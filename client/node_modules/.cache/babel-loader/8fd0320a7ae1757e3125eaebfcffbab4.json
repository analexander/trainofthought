{"ast":null,"code":"import _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl } from './Transpose_impl';\nexport var maxConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: function kernelFunc(_ref) {\n    var inputs = _ref.inputs,\n        attrs = _ref.attrs,\n        backend = _ref.backend;\n    var x = inputs.x;\n    var reductionIndices = attrs.reductionIndices,\n        keepDims = attrs.keepDims;\n    var cpuBackend = backend;\n    var xShape = x.shape;\n    var xRank = xShape.length;\n    var origAxes = util.parseAxisParam(reductionIndices, xShape);\n    var axes = origAxes;\n    var permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    var xVals = cpuBackend.data.get(x.dataId).values;\n\n    if (permutedAxes != null) {\n      var newShape = new Array(xRank);\n\n      for (var i = 0; i < newShape.length; i++) {\n        newShape[i] = xShape[permutedAxes[i]];\n      }\n\n      xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n      xShape = newShape;\n    }\n\n    assertNotComplex(x, 'max');\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n\n    var _backend_util$compute = backend_util.computeOutAndReduceShapes(xShape, axes),\n        _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n        maxOutShape = _backend_util$compute2[0],\n        reduceShape = _backend_util$compute2[1];\n\n    var reduceSize = util.sizeFromShape(reduceShape);\n    var result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n    var dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n    var outShape = maxOutShape;\n\n    if (keepDims) {\n      // reshape\n      var _newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n\n      outShape = _newShape;\n    }\n\n    return {\n      dataId: dataId,\n      shape: outShape,\n      dtype: x.dtype\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}