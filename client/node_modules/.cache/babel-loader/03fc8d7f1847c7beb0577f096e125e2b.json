{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Tile } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Construct a tensor by repeating it the number of times given by reps.\n *\n * This operation creates a new tensor by replicating `input` `reps`\n * times. The output tensor's i'th dimension has `input.shape[i] *\n * reps[i]` elements, and the values of `input` are replicated\n * `reps[i]` times along the i'th dimension. For example, tiling\n * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n *\n * a.tile([2]).print();    // or a.tile([2])\n * ```\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.tile([1, 2]).print();  // or a.tile([1, 2])\n * ```\n * @param x The tensor to tile.\n * @param reps Determines the number of replications per dimension.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\n\nfunction tile_(x, reps) {\n  var parseAs = null;\n  var $x = convertToTensor(x, 'x', 'tile', parseAs);\n  util.assert($x.rank === reps.length, function () {\n    return \"Error in transpose: rank of input \".concat($x.rank, \" \") + \"must match length of reps \".concat(reps, \".\");\n  });\n\n  var forward = function forward(backend, save) {\n    var res = backend.tile($x, reps);\n    save([$x]);\n    return res;\n  };\n\n  var inputsToSave = [$x];\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    reps: reps\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Tile, attrs, inputsToSave);\n}\n\nexport var tile = op({\n  tile_: tile_\n});","map":null,"metadata":{},"sourceType":"module"}