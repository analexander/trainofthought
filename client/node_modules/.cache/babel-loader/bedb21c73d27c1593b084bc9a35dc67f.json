{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3D(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      filter = inputs.filter;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dilations = attrs.dilations;\n  assertNotComplex([x, filter], 'conv3d');\n  var convInfo = backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n  var filterDepth = convInfo.filterDepth,\n      filterHeight = convInfo.filterHeight,\n      filterWidth = convInfo.filterWidth,\n      dilationDepth = convInfo.dilationDepth,\n      dilationHeight = convInfo.dilationHeight,\n      dilationWidth = convInfo.dilationWidth,\n      padInfo = convInfo.padInfo;\n  var padFront = padInfo.front;\n  var padLeft = padInfo.left;\n  var padTop = padInfo.top;\n  var y = new TensorBuffer(convInfo.outShape, x.dtype);\n  var xVals = backend.data.get(x.dataId).values;\n  var wVals = backend.data.get(filter.dataId).values;\n  var yVals = y.values;\n  var xStrides = util.computeStrides(x.shape);\n  var filterStrides = util.computeStrides(filter.shape);\n\n  for (var b = 0; b < convInfo.batchSize; ++b) {\n    var xOffset1 = b * xStrides[0];\n    var yOffset1 = b * y.strides[0];\n\n    for (var yF = 0; yF < convInfo.outDepth; ++yF) {\n      var yOffset2 = yOffset1 + yF * y.strides[1];\n      var xFCorner = yF * convInfo.strideDepth - padFront;\n\n      for (var wF = 0; wF < filterDepth; ++wF) {\n        var xF = xFCorner + wF * dilationDepth;\n\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n\n        var wOffset1 = wF * filterStrides[0];\n        var xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n          var yOffset3 = yOffset2 + yR * y.strides[2];\n          var xRCorner = yR * convInfo.strideHeight - padTop;\n\n          for (var wR = 0; wR < filterHeight; ++wR) {\n            var xR = xRCorner + wR * dilationHeight;\n\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n\n            var wOffset2 = wOffset1 + wR * filterStrides[1];\n            var xOffset3 = xOffset2 + xR * xStrides[2];\n\n            for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n              var yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              var xCCorner = yC * convInfo.strideWidth - padLeft;\n\n              for (var wC = 0; wC < filterWidth; ++wC) {\n                var xC = xCCorner + wC * dilationWidth;\n\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n\n                var wOffset3 = wOffset2 + wC * filterStrides[2];\n                var xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                var wOffset4 = wOffset3;\n\n                for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  var xVal = xVals[xOffset4 + d1];\n\n                  for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nexport var conv3DConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D\n};","map":null,"metadata":{},"sourceType":"module"}