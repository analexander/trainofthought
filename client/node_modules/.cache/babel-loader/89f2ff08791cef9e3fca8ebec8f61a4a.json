{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\n\nexports.dilation2dConfig = {\n  kernelName: tfjs_1.Dilation2D,\n  backendName: 'tensorflow',\n  kernelFunc: function kernelFunc(_a) {\n    var inputs = _a.inputs,\n        backend = _a.backend,\n        attrs = _a.attrs;\n    var _b = inputs,\n        x = _b.x,\n        filter = _b.filter;\n    var _c = attrs,\n        strides = _c.strides,\n        pad = _c.pad,\n        dilations = _c.dilations;\n\n    var _d = tfjs_1.backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC'\n    /* dataFormat */\n    , dilations),\n        dilationHeight = _d.dilationHeight,\n        dilationWidth = _d.dilationWidth,\n        padInfo = _d.padInfo,\n        strideHeight = _d.strideHeight,\n        strideWidth = _d.strideWidth;\n\n    var $strides = [1, strideHeight, strideWidth, 1];\n    var $dilations = [1, dilationHeight, dilationWidth, 1];\n    var nodeBackend = backend;\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), {\n      name: 'strides',\n      type: nodeBackend.binding.TF_ATTR_INT,\n      value: $strides\n    }, {\n      name: 'rates',\n      type: nodeBackend.binding.TF_ATTR_INT,\n      value: $dilations\n    }, {\n      name: 'padding',\n      type: nodeBackend.binding.TF_ATTR_STRING,\n      value: padInfo.type\n    }];\n    return nodeBackend.executeSingleOutput(tfjs_1.Dilation2D, opAttrs, [x, filter]);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}