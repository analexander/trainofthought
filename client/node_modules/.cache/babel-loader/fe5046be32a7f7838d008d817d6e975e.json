{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar TrackerBase = require('./tracker-base.js');\n\nvar Tracker = require('./tracker.js');\n\nvar TrackerStream = require('./tracker-stream.js');\n\nvar TrackerGroup = module.exports = function (name) {\n  TrackerBase.call(this, name);\n  this.parentGroup = null;\n  this.trackers = [];\n  this.completion = {};\n  this.weight = {};\n  this.totalWeight = 0;\n  this.finished = false;\n  this.bubbleChange = bubbleChange(this);\n};\n\nutil.inherits(TrackerGroup, TrackerBase);\n\nfunction bubbleChange(trackerGroup) {\n  return function (name, completed, tracker) {\n    trackerGroup.completion[tracker.id] = completed;\n    if (trackerGroup.finished) return;\n    trackerGroup.emit('change', name || trackerGroup.name, trackerGroup.completed(), trackerGroup);\n  };\n}\n\nTrackerGroup.prototype.nameInTree = function () {\n  var names = [];\n  var from = this;\n\n  while (from) {\n    names.unshift(from.name);\n    from = from.parentGroup;\n  }\n\n  return names.join('/');\n};\n\nTrackerGroup.prototype.addUnit = function (unit, weight) {\n  if (unit.addUnit) {\n    var toTest = this;\n\n    while (toTest) {\n      if (unit === toTest) {\n        throw new Error('Attempted to add tracker group ' + unit.name + ' to tree that already includes it ' + this.nameInTree(this));\n      }\n\n      toTest = toTest.parentGroup;\n    }\n\n    unit.parentGroup = this;\n  }\n\n  this.weight[unit.id] = weight || 1;\n  this.totalWeight += this.weight[unit.id];\n  this.trackers.push(unit);\n  this.completion[unit.id] = unit.completed();\n  unit.on('change', this.bubbleChange);\n  if (!this.finished) this.emit('change', unit.name, this.completion[unit.id], unit);\n  return unit;\n};\n\nTrackerGroup.prototype.completed = function () {\n  if (this.trackers.length === 0) return 0;\n  var valPerWeight = 1 / this.totalWeight;\n  var completed = 0;\n\n  for (var ii = 0; ii < this.trackers.length; ii++) {\n    var trackerId = this.trackers[ii].id;\n    completed += valPerWeight * this.weight[trackerId] * this.completion[trackerId];\n  }\n\n  return completed;\n};\n\nTrackerGroup.prototype.newGroup = function (name, weight) {\n  return this.addUnit(new TrackerGroup(name), weight);\n};\n\nTrackerGroup.prototype.newItem = function (name, todo, weight) {\n  return this.addUnit(new Tracker(name, todo), weight);\n};\n\nTrackerGroup.prototype.newStream = function (name, todo, weight) {\n  return this.addUnit(new TrackerStream(name, todo), weight);\n};\n\nTrackerGroup.prototype.finish = function () {\n  this.finished = true;\n  if (!this.trackers.length) this.addUnit(new Tracker(), 1, true);\n\n  for (var ii = 0; ii < this.trackers.length; ii++) {\n    var tracker = this.trackers[ii];\n    tracker.finish();\n    tracker.removeListener('change', this.bubbleChange);\n  }\n\n  this.emit('change', this.name, 1, this);\n};\n\nvar buffer = '                                  ';\n\nTrackerGroup.prototype.debug = function (depth) {\n  depth = depth || 0;\n  var indent = depth ? buffer.substr(0, depth) : '';\n  var output = indent + (this.name || 'top') + ': ' + this.completed() + '\\n';\n  this.trackers.forEach(function (tracker) {\n    if (tracker instanceof TrackerGroup) {\n      output += tracker.debug(depth + 1);\n    } else {\n      output += indent + ' ' + tracker.name + ': ' + tracker.completed() + '\\n';\n    }\n  });\n  return output;\n};","map":null,"metadata":{},"sourceType":"script"}