{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { NetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { seperateWeightMaps } from './util';\n\nvar FaceProcessor =\n/** @class */\nfunction (_super) {\n  __extends(FaceProcessor, _super);\n\n  function FaceProcessor(_name, faceFeatureExtractor) {\n    var _this = _super.call(this, _name) || this;\n\n    _this._faceFeatureExtractor = faceFeatureExtractor;\n    return _this;\n  }\n\n  Object.defineProperty(FaceProcessor.prototype, \"faceFeatureExtractor\", {\n    get: function get() {\n      return this._faceFeatureExtractor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  FaceProcessor.prototype.runNet = function (input) {\n    var _this = this;\n\n    var params = this.params;\n\n    if (!params) {\n      throw new Error(this._name + \" - load model before inference\");\n    }\n\n    return tf.tidy(function () {\n      var bottleneckFeatures = input instanceof NetInput ? _this.faceFeatureExtractor.forwardInput(input) : input;\n      return fullyConnectedLayer(bottleneckFeatures.as2D(bottleneckFeatures.shape[0], -1), params.fc);\n    });\n  };\n\n  FaceProcessor.prototype.dispose = function (throwOnRedispose) {\n    if (throwOnRedispose === void 0) {\n      throwOnRedispose = true;\n    }\n\n    this.faceFeatureExtractor.dispose(throwOnRedispose);\n\n    _super.prototype.dispose.call(this, throwOnRedispose);\n  };\n\n  FaceProcessor.prototype.loadClassifierParams = function (weights) {\n    var _a = this.extractClassifierParams(weights),\n        params = _a.params,\n        paramMappings = _a.paramMappings;\n\n    this._params = params;\n    this._paramMappings = paramMappings;\n  };\n\n  FaceProcessor.prototype.extractClassifierParams = function (weights) {\n    return extractParams(weights, this.getClassifierChannelsIn(), this.getClassifierChannelsOut());\n  };\n\n  FaceProcessor.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    var _a = seperateWeightMaps(weightMap),\n        featureExtractorMap = _a.featureExtractorMap,\n        classifierMap = _a.classifierMap;\n\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\n    return extractParamsFromWeigthMap(classifierMap);\n  };\n\n  FaceProcessor.prototype.extractParams = function (weights) {\n    var cIn = this.getClassifierChannelsIn();\n    var cOut = this.getClassifierChannelsOut();\n    var classifierWeightSize = cOut * cIn + cOut;\n    var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\n    var classifierWeights = weights.slice(weights.length - classifierWeightSize);\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\n    return this.extractClassifierParams(classifierWeights);\n  };\n\n  return FaceProcessor;\n}(NeuralNetwork);\n\nexport { FaceProcessor };","map":{"version":3,"sources":["../../../src/faceProcessor/FaceProcessor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\r\nimport { NetInput } from '../dom';\r\nimport { NeuralNetwork } from '../NeuralNetwork';\r\nimport { extractParams } from './extractParams';\r\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\r\nimport { seperateWeightMaps } from './util';\r\nvar FaceProcessor = /** @class */ (function (_super) {\r\n    __extends(FaceProcessor, _super);\r\n    function FaceProcessor(_name, faceFeatureExtractor) {\r\n        var _this = _super.call(this, _name) || this;\r\n        _this._faceFeatureExtractor = faceFeatureExtractor;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(FaceProcessor.prototype, \"faceFeatureExtractor\", {\r\n        get: function () {\r\n            return this._faceFeatureExtractor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FaceProcessor.prototype.runNet = function (input) {\r\n        var _this = this;\r\n        var params = this.params;\r\n        if (!params) {\r\n            throw new Error(this._name + \" - load model before inference\");\r\n        }\r\n        return tf.tidy(function () {\r\n            var bottleneckFeatures = input instanceof NetInput\r\n                ? _this.faceFeatureExtractor.forwardInput(input)\r\n                : input;\r\n            return fullyConnectedLayer(bottleneckFeatures.as2D(bottleneckFeatures.shape[0], -1), params.fc);\r\n        });\r\n    };\r\n    FaceProcessor.prototype.dispose = function (throwOnRedispose) {\r\n        if (throwOnRedispose === void 0) { throwOnRedispose = true; }\r\n        this.faceFeatureExtractor.dispose(throwOnRedispose);\r\n        _super.prototype.dispose.call(this, throwOnRedispose);\r\n    };\r\n    FaceProcessor.prototype.loadClassifierParams = function (weights) {\r\n        var _a = this.extractClassifierParams(weights), params = _a.params, paramMappings = _a.paramMappings;\r\n        this._params = params;\r\n        this._paramMappings = paramMappings;\r\n    };\r\n    FaceProcessor.prototype.extractClassifierParams = function (weights) {\r\n        return extractParams(weights, this.getClassifierChannelsIn(), this.getClassifierChannelsOut());\r\n    };\r\n    FaceProcessor.prototype.extractParamsFromWeigthMap = function (weightMap) {\r\n        var _a = seperateWeightMaps(weightMap), featureExtractorMap = _a.featureExtractorMap, classifierMap = _a.classifierMap;\r\n        this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\r\n        return extractParamsFromWeigthMap(classifierMap);\r\n    };\r\n    FaceProcessor.prototype.extractParams = function (weights) {\r\n        var cIn = this.getClassifierChannelsIn();\r\n        var cOut = this.getClassifierChannelsOut();\r\n        var classifierWeightSize = (cOut * cIn) + cOut;\r\n        var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\r\n        var classifierWeights = weights.slice(weights.length - classifierWeightSize);\r\n        this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\r\n        return this.extractClassifierParams(classifierWeights);\r\n    };\r\n    return FaceProcessor;\r\n}(NeuralNetwork));\r\nexport { FaceProcessor };\r\n//# sourceMappingURL=FaceProcessor.js.map"]},"metadata":{},"sourceType":"module"}