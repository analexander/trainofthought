{"ast":null,"code":"import { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\nimport { isTensor2D } from '../utils';\n\nfunction extractorsFactory(weightMap, paramMappings) {\n  var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  function extractScaleLayerParams(prefix) {\n    var weights = extractWeightEntry(prefix + \"/scale/weights\", 1);\n    var biases = extractWeightEntry(prefix + \"/scale/biases\", 1);\n    return {\n      weights: weights,\n      biases: biases\n    };\n  }\n\n  function extractConvLayerParams(prefix) {\n    var filters = extractWeightEntry(prefix + \"/conv/filters\", 4);\n    var bias = extractWeightEntry(prefix + \"/conv/bias\", 1);\n    var scale = extractScaleLayerParams(prefix);\n    return {\n      conv: {\n        filters: filters,\n        bias: bias\n      },\n      scale: scale\n    };\n  }\n\n  function extractResidualLayerParams(prefix) {\n    return {\n      conv1: extractConvLayerParams(prefix + \"/conv1\"),\n      conv2: extractConvLayerParams(prefix + \"/conv2\")\n    };\n  }\n\n  return {\n    extractConvLayerParams: extractConvLayerParams,\n    extractResidualLayerParams: extractResidualLayerParams\n  };\n}\n\nexport function extractParamsFromWeigthMap(weightMap) {\n  var paramMappings = [];\n\n  var _a = extractorsFactory(weightMap, paramMappings),\n      extractConvLayerParams = _a.extractConvLayerParams,\n      extractResidualLayerParams = _a.extractResidualLayerParams;\n\n  var conv32_down = extractConvLayerParams('conv32_down');\n  var conv32_1 = extractResidualLayerParams('conv32_1');\n  var conv32_2 = extractResidualLayerParams('conv32_2');\n  var conv32_3 = extractResidualLayerParams('conv32_3');\n  var conv64_down = extractResidualLayerParams('conv64_down');\n  var conv64_1 = extractResidualLayerParams('conv64_1');\n  var conv64_2 = extractResidualLayerParams('conv64_2');\n  var conv64_3 = extractResidualLayerParams('conv64_3');\n  var conv128_down = extractResidualLayerParams('conv128_down');\n  var conv128_1 = extractResidualLayerParams('conv128_1');\n  var conv128_2 = extractResidualLayerParams('conv128_2');\n  var conv256_down = extractResidualLayerParams('conv256_down');\n  var conv256_1 = extractResidualLayerParams('conv256_1');\n  var conv256_2 = extractResidualLayerParams('conv256_2');\n  var conv256_down_out = extractResidualLayerParams('conv256_down_out');\n  var fc = weightMap['fc'];\n  paramMappings.push({\n    originalPath: 'fc',\n    paramPath: 'fc'\n  });\n\n  if (!isTensor2D(fc)) {\n    throw new Error(\"expected weightMap[fc] to be a Tensor2D, instead have \" + fc);\n  }\n\n  var params = {\n    conv32_down: conv32_down,\n    conv32_1: conv32_1,\n    conv32_2: conv32_2,\n    conv32_3: conv32_3,\n    conv64_down: conv64_down,\n    conv64_1: conv64_1,\n    conv64_2: conv64_2,\n    conv64_3: conv64_3,\n    conv128_down: conv128_down,\n    conv128_1: conv128_1,\n    conv128_2: conv128_2,\n    conv256_down: conv256_down,\n    conv256_1: conv256_1,\n    conv256_2: conv256_2,\n    conv256_down_out: conv256_down_out,\n    fc: fc\n  };\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n  return {\n    params: params,\n    paramMappings: paramMappings\n  };\n}","map":null,"metadata":{},"sourceType":"module"}