{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\n *\n * ```js\n * const probs = tf.tensor([.75, .25]);\n * tf.multinomial(probs, 3).print();\n * ```\n *\n * @param logits 1D array with unnormalized log-probabilities, or\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\n *     parameter.\n * @param numSamples Number of samples to draw for each row slice.\n * @param seed The seed number.\n * @param normalized Whether the provided `logits` are normalized true\n *     probabilities (sum to 1). Defaults to false.\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\n *     `[batchSize, numSamples]`, depending on the rank of the input.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\n\nfunction multinomial_(logits, numSamples, seed) {\n  var normalized = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var $logits = convertToTensor(logits, 'logits', 'multinomial');\n  var numOutcomes = $logits.size;\n  var origRank = $logits.rank;\n\n  if (numOutcomes < 2) {\n    throw new Error(\"Error in multinomial: you need at least 2 outcomes, but got \" + \"\".concat(numOutcomes, \".\"));\n  }\n\n  if (origRank > 2) {\n    throw new Error(\"Rank of probabilities must be 1 or 2, but is \".concat(origRank));\n  }\n\n  seed = seed || Math.random();\n  var logits2D = origRank === 1 ? reshape($logits, [1, -1]) : $logits;\n  var res = ENGINE.runKernelFunc(function (backend) {\n    return backend.multinomial(logits2D, normalized, numSamples, seed);\n  }, {\n    logits2D: logits2D\n  }); // tslint:disable-next-line:no-unnecessary-type-assertion\n\n  return origRank === 1 ? reshape(res, [res.size]) : res;\n}\n\nexport var multinomial = op({\n  multinomial_: multinomial_\n});","map":null,"metadata":{},"sourceType":"module"}