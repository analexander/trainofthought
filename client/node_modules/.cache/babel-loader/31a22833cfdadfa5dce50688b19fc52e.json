{"ast":null,"code":"import _toConsumableArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _assertThisInitialized from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _regeneratorRuntime from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/callbacks.py */\nimport { add, div, keep, mul, nextFrame, tidy, util } from '@tensorflow/tfjs-core';\nimport { ValueError } from './errors';\nimport { resolveScalarsInLogs } from './logs';\nimport * as generic_utils from './utils/generic_utils';\n/** Verbosity logging level when fitting a model. */\n\nexport var ModelLoggingVerbosity;\n\n(function (ModelLoggingVerbosity) {\n  ModelLoggingVerbosity[ModelLoggingVerbosity[\"SILENT\"] = 0] = \"SILENT\";\n  ModelLoggingVerbosity[ModelLoggingVerbosity[\"VERBOSE\"] = 1] = \"VERBOSE\";\n})(ModelLoggingVerbosity || (ModelLoggingVerbosity = {}));\n/** How often to yield to the main thread when training (in ms). */\n\n\nexport var DEFAULT_YIELD_EVERY_MS = 125;\n/**\n * Abstract base class used to build new callbacks.\n *\n * The `logs` dictionary that callback methods take as argument will contain\n * keys for quantities relevant to the current batch or epoch.\n *\n * Currently, the `.fit()` method of the `Sequential` model class\n * will include the following quantities in the `logs` that\n * it passes to its callbacks:\n *\n * onEpochEnd: Logs include `acc` and `loss`, and optionally include `valLoss`\n *   (if validation is enabled in `fit`), and `valAcc` (if validation and\n *   accuracy monitoring are enabled).\n * onBatchBegin: Logs include `size`, the number of samples in the current\n *   batch.\n * onBatchEnd: Logs include `loss`, and optionally `acc` (if accuracy monitoring\n *   is enabled).\n */\n\nexport var BaseCallback = /*#__PURE__*/function () {\n  function BaseCallback() {\n    _classCallCheck(this, BaseCallback);\n\n    // TODO(michaelterry): This type is a best guess.\n    this.validationData = null;\n  }\n\n  _createClass(BaseCallback, [{\n    key: \"setParams\",\n    value: function setParams(params) {\n      this.params = params;\n    }\n  }, {\n    key: \"onEpochBegin\",\n    value: function () {\n      var _onEpochBegin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(epoch, logs) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onEpochBegin(_x, _x2) {\n        return _onEpochBegin.apply(this, arguments);\n      }\n\n      return onEpochBegin;\n    }()\n  }, {\n    key: \"onEpochEnd\",\n    value: function () {\n      var _onEpochEnd = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(epoch, logs) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function onEpochEnd(_x3, _x4) {\n        return _onEpochEnd.apply(this, arguments);\n      }\n\n      return onEpochEnd;\n    }()\n  }, {\n    key: \"onBatchBegin\",\n    value: function () {\n      var _onBatchBegin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(batch, logs) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function onBatchBegin(_x5, _x6) {\n        return _onBatchBegin.apply(this, arguments);\n      }\n\n      return onBatchBegin;\n    }()\n  }, {\n    key: \"onBatchEnd\",\n    value: function () {\n      var _onBatchEnd = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(batch, logs) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function onBatchEnd(_x7, _x8) {\n        return _onBatchEnd.apply(this, arguments);\n      }\n\n      return onBatchEnd;\n    }()\n  }, {\n    key: \"onTrainBegin\",\n    value: function () {\n      var _onTrainBegin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(logs) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function onTrainBegin(_x9) {\n        return _onTrainBegin.apply(this, arguments);\n      }\n\n      return onTrainBegin;\n    }()\n  }, {\n    key: \"onTrainEnd\",\n    value: function () {\n      var _onTrainEnd = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(logs) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function onTrainEnd(_x10) {\n        return _onTrainEnd.apply(this, arguments);\n      }\n\n      return onTrainEnd;\n    }() // LayersModel needs to call Callback.setModel(), but cannot actually depend\n    // on Callback because that creates a cyclic dependency.  Providing this no-op\n    // method on BaseCallback breaks the cycle: this way LayersModel can depend on\n    // BaseCallback but not on Callback.  The argument is typed as `Container`\n    // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback\n    // overrides this method and enforces that the argument is really a\n    // LayersModel.\n\n  }, {\n    key: \"setModel\",\n    value: function setModel(model) {// Do nothing. Use Callback instead of BaseCallback to track the model.\n    }\n  }]);\n\n  return BaseCallback;\n}();\n/**\n * Container abstracting a list of callbacks.\n */\n\nexport var CallbackList = /*#__PURE__*/function () {\n  // TODO(cais): When the need arises, uncomment the following lines and\n  // implement the queue for time values.\n  // private deltaTBatch: number;\n  // private deltaTsBatchBegin: Array<number>;\n  // private deltaTsBatchEnd: Array<number>;\n\n  /**\n   * Constructor of CallbackList.\n   * @param callbacks Array of `Callback` instances.\n   * @param queueLength Queue length for keeping running statistics over\n   *   callback execution time.\n   */\n  function CallbackList(callbacks) {\n    var queueLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n\n    _classCallCheck(this, CallbackList);\n\n    // TODO(cais): Make use of queueLength when implementing the queue for time\n    // values.\n    if (callbacks == null) {\n      callbacks = [];\n    }\n\n    this.callbacks = callbacks;\n    this.queueLength = queueLength;\n  }\n\n  _createClass(CallbackList, [{\n    key: \"append\",\n    value: function append(callback) {\n      this.callbacks.push(callback);\n    }\n  }, {\n    key: \"setParams\",\n    value: function setParams(params) {\n      var _iterator = _createForOfIteratorHelper(this.callbacks),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var callback = _step.value;\n          callback.setParams(params);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"setModel\",\n    value: function setModel(model) {\n      var _iterator2 = _createForOfIteratorHelper(this.callbacks),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var callback = _step2.value;\n          callback.setModel(model);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * Called at the start of an epoch.\n     * @param epoch Index of epoch.\n     * @param logs Dictionary of logs.\n     */\n\n  }, {\n    key: \"onEpochBegin\",\n    value: function () {\n      var _onEpochBegin2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(epoch, logs) {\n        var _iterator3, _step3, callback;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (logs == null) {\n                  logs = {};\n                }\n\n                _iterator3 = _createForOfIteratorHelper(this.callbacks);\n                _context7.prev = 2;\n\n                _iterator3.s();\n\n              case 4:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context7.next = 10;\n                  break;\n                }\n\n                callback = _step3.value;\n                _context7.next = 8;\n                return callback.onEpochBegin(epoch, logs);\n\n              case 8:\n                _context7.next = 4;\n                break;\n\n              case 10:\n                _context7.next = 15;\n                break;\n\n              case 12:\n                _context7.prev = 12;\n                _context7.t0 = _context7[\"catch\"](2);\n\n                _iterator3.e(_context7.t0);\n\n              case 15:\n                _context7.prev = 15;\n\n                _iterator3.f();\n\n                return _context7.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[2, 12, 15, 18]]);\n      }));\n\n      function onEpochBegin(_x11, _x12) {\n        return _onEpochBegin2.apply(this, arguments);\n      }\n\n      return onEpochBegin;\n    }()\n    /**\n     * Called at the end of an epoch.\n     * @param epoch Index of epoch.\n     * @param logs Dictionary of logs.\n     */\n\n  }, {\n    key: \"onEpochEnd\",\n    value: function () {\n      var _onEpochEnd2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(epoch, logs) {\n        var _iterator4, _step4, callback;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (logs == null) {\n                  logs = {};\n                }\n\n                _iterator4 = _createForOfIteratorHelper(this.callbacks);\n                _context8.prev = 2;\n\n                _iterator4.s();\n\n              case 4:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context8.next = 10;\n                  break;\n                }\n\n                callback = _step4.value;\n                _context8.next = 8;\n                return callback.onEpochEnd(epoch, logs);\n\n              case 8:\n                _context8.next = 4;\n                break;\n\n              case 10:\n                _context8.next = 15;\n                break;\n\n              case 12:\n                _context8.prev = 12;\n                _context8.t0 = _context8[\"catch\"](2);\n\n                _iterator4.e(_context8.t0);\n\n              case 15:\n                _context8.prev = 15;\n\n                _iterator4.f();\n\n                return _context8.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[2, 12, 15, 18]]);\n      }));\n\n      function onEpochEnd(_x13, _x14) {\n        return _onEpochEnd2.apply(this, arguments);\n      }\n\n      return onEpochEnd;\n    }()\n    /**\n     * Called  right before processing a batch.\n     * @param batch Index of batch within the current epoch.\n     * @param logs Dictionary of logs.\n     */\n\n  }, {\n    key: \"onBatchBegin\",\n    value: function () {\n      var _onBatchBegin2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(batch, logs) {\n        var _iterator5, _step5, callback;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (logs == null) {\n                  logs = {};\n                }\n\n                _iterator5 = _createForOfIteratorHelper(this.callbacks);\n                _context9.prev = 2;\n\n                _iterator5.s();\n\n              case 4:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context9.next = 10;\n                  break;\n                }\n\n                callback = _step5.value;\n                _context9.next = 8;\n                return callback.onBatchBegin(batch, logs);\n\n              case 8:\n                _context9.next = 4;\n                break;\n\n              case 10:\n                _context9.next = 15;\n                break;\n\n              case 12:\n                _context9.prev = 12;\n                _context9.t0 = _context9[\"catch\"](2);\n\n                _iterator5.e(_context9.t0);\n\n              case 15:\n                _context9.prev = 15;\n\n                _iterator5.f();\n\n                return _context9.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[2, 12, 15, 18]]);\n      }));\n\n      function onBatchBegin(_x15, _x16) {\n        return _onBatchBegin2.apply(this, arguments);\n      }\n\n      return onBatchBegin;\n    }()\n    /**\n     * Called at the end of a batch.\n     * @param batch Index of batch within the current epoch.\n     * @param logs Dictionary of logs.\n     */\n\n  }, {\n    key: \"onBatchEnd\",\n    value: function () {\n      var _onBatchEnd2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(batch, logs) {\n        var _iterator6, _step6, callback;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (logs == null) {\n                  logs = {};\n                }\n\n                _iterator6 = _createForOfIteratorHelper(this.callbacks);\n                _context10.prev = 2;\n\n                _iterator6.s();\n\n              case 4:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context10.next = 10;\n                  break;\n                }\n\n                callback = _step6.value;\n                _context10.next = 8;\n                return callback.onBatchEnd(batch, logs);\n\n              case 8:\n                _context10.next = 4;\n                break;\n\n              case 10:\n                _context10.next = 15;\n                break;\n\n              case 12:\n                _context10.prev = 12;\n                _context10.t0 = _context10[\"catch\"](2);\n\n                _iterator6.e(_context10.t0);\n\n              case 15:\n                _context10.prev = 15;\n\n                _iterator6.f();\n\n                return _context10.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[2, 12, 15, 18]]);\n      }));\n\n      function onBatchEnd(_x17, _x18) {\n        return _onBatchEnd2.apply(this, arguments);\n      }\n\n      return onBatchEnd;\n    }()\n    /**\n     * Called at the beginning of training.\n     * @param logs Dictionary of logs.\n     */\n\n  }, {\n    key: \"onTrainBegin\",\n    value: function () {\n      var _onTrainBegin2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(logs) {\n        var _iterator7, _step7, callback;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (logs == null) {\n                  logs = {};\n                }\n\n                _iterator7 = _createForOfIteratorHelper(this.callbacks);\n                _context11.prev = 2;\n\n                _iterator7.s();\n\n              case 4:\n                if ((_step7 = _iterator7.n()).done) {\n                  _context11.next = 10;\n                  break;\n                }\n\n                callback = _step7.value;\n                _context11.next = 8;\n                return callback.onTrainBegin(logs);\n\n              case 8:\n                _context11.next = 4;\n                break;\n\n              case 10:\n                _context11.next = 15;\n                break;\n\n              case 12:\n                _context11.prev = 12;\n                _context11.t0 = _context11[\"catch\"](2);\n\n                _iterator7.e(_context11.t0);\n\n              case 15:\n                _context11.prev = 15;\n\n                _iterator7.f();\n\n                return _context11.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[2, 12, 15, 18]]);\n      }));\n\n      function onTrainBegin(_x19) {\n        return _onTrainBegin2.apply(this, arguments);\n      }\n\n      return onTrainBegin;\n    }()\n    /**\n     * Called at the end of training.\n     * @param logs Dictionary of logs.\n     */\n\n  }, {\n    key: \"onTrainEnd\",\n    value: function () {\n      var _onTrainEnd2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(logs) {\n        var _iterator8, _step8, callback;\n\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (logs == null) {\n                  logs = {};\n                }\n\n                _iterator8 = _createForOfIteratorHelper(this.callbacks);\n                _context12.prev = 2;\n\n                _iterator8.s();\n\n              case 4:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context12.next = 10;\n                  break;\n                }\n\n                callback = _step8.value;\n                _context12.next = 8;\n                return callback.onTrainEnd(logs);\n\n              case 8:\n                _context12.next = 4;\n                break;\n\n              case 10:\n                _context12.next = 15;\n                break;\n\n              case 12:\n                _context12.prev = 12;\n                _context12.t0 = _context12[\"catch\"](2);\n\n                _iterator8.e(_context12.t0);\n\n              case 15:\n                _context12.prev = 15;\n\n                _iterator8.f();\n\n                return _context12.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this, [[2, 12, 15, 18]]);\n      }));\n\n      function onTrainEnd(_x20) {\n        return _onTrainEnd2.apply(this, arguments);\n      }\n\n      return onTrainEnd;\n    }()\n  }]);\n\n  return CallbackList;\n}();\n/**\n * Callback that accumulates epoch averages of metrics.\n *\n * This callback is automatically applied to every LayersModel.\n */\n\nexport var BaseLogger = /*#__PURE__*/function (_BaseCallback) {\n  _inherits(BaseLogger, _BaseCallback);\n\n  function BaseLogger() {\n    _classCallCheck(this, BaseLogger);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BaseLogger).call(this));\n  }\n\n  _createClass(BaseLogger, [{\n    key: \"onEpochBegin\",\n    value: function () {\n      var _onEpochBegin3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(epoch) {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                this.seen = 0;\n                this.totals = {};\n\n              case 2:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function onEpochBegin(_x21) {\n        return _onEpochBegin3.apply(this, arguments);\n      }\n\n      return onEpochBegin;\n    }()\n  }, {\n    key: \"onBatchEnd\",\n    value: function () {\n      var _onBatchEnd3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(batch, logs) {\n        var _this = this;\n\n        var batchSize, _loop, key;\n\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                if (logs == null) {\n                  logs = {};\n                }\n\n                batchSize = logs['size'] == null ? 0 : logs['size'];\n                this.seen += batchSize;\n\n                _loop = function _loop(key) {\n                  var value = logs[key];\n\n                  if (typeof value === 'number') {\n                    if (!_this.totals.hasOwnProperty(key)) {\n                      _this.totals[key] = 0;\n                    }\n\n                    _this.totals[key] = _this.totals[key] + value * batchSize;\n                  } else {\n                    var oldTotalsToDispose;\n\n                    if (key in _this.totals) {\n                      oldTotalsToDispose = _this.totals[key];\n                    } else {\n                      _this.totals[key] = 0;\n                    }\n\n                    var total = tidy(function () {\n                      return add(_this.totals[key], mul(value, batchSize));\n                    });\n                    _this.totals[key] = total;\n\n                    if (oldTotalsToDispose != null) {\n                      oldTotalsToDispose.dispose();\n                    }\n                  }\n                };\n\n                for (key in logs) {\n                  _loop(key);\n                }\n\n              case 5:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function onBatchEnd(_x22, _x23) {\n        return _onBatchEnd3.apply(this, arguments);\n      }\n\n      return onBatchEnd;\n    }()\n  }, {\n    key: \"onEpochEnd\",\n    value: function () {\n      var _onEpochEnd3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(epoch, logs) {\n        var _this2 = this;\n\n        var _iterator9, _step9, _loop2, _ret;\n\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                if (!(logs != null)) {\n                  _context15.next = 19;\n                  break;\n                }\n\n                _iterator9 = _createForOfIteratorHelper(this.params['metrics']);\n                _context15.prev = 2;\n\n                _loop2 = function _loop2() {\n                  var key = _step9.value;\n\n                  if (_this2.totals[key] == null) {\n                    return \"continue\";\n                  }\n\n                  if (typeof _this2.totals[key] === 'number') {\n                    logs[key] = _this2.totals[key] / _this2.seen;\n                  } else {\n                    tidy(function () {\n                      var log = mul(div(1, _this2.seen), _this2.totals[key]);\n                      logs[key] = log;\n\n                      _this2.totals[key].dispose();\n\n                      keep(logs[key]);\n                    });\n                  }\n                };\n\n                _iterator9.s();\n\n              case 5:\n                if ((_step9 = _iterator9.n()).done) {\n                  _context15.next = 11;\n                  break;\n                }\n\n                _ret = _loop2();\n\n                if (!(_ret === \"continue\")) {\n                  _context15.next = 9;\n                  break;\n                }\n\n                return _context15.abrupt(\"continue\", 9);\n\n              case 9:\n                _context15.next = 5;\n                break;\n\n              case 11:\n                _context15.next = 16;\n                break;\n\n              case 13:\n                _context15.prev = 13;\n                _context15.t0 = _context15[\"catch\"](2);\n\n                _iterator9.e(_context15.t0);\n\n              case 16:\n                _context15.prev = 16;\n\n                _iterator9.f();\n\n                return _context15.finish(16);\n\n              case 19:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this, [[2, 13, 16, 19]]);\n      }));\n\n      function onEpochEnd(_x24, _x25) {\n        return _onEpochEnd3.apply(this, arguments);\n      }\n\n      return onEpochEnd;\n    }()\n  }]);\n\n  return BaseLogger;\n}(BaseCallback);\n/**\n * Callback that records events into a `History` object. This callback is\n * automatically applied to every TF.js Layers model. The `History` object\n * gets returned by the `fit` method of models.\n */\n\nexport var History = /*#__PURE__*/function (_BaseCallback2) {\n  _inherits(History, _BaseCallback2);\n\n  function History() {\n    _classCallCheck(this, History);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(History).apply(this, arguments));\n  }\n\n  _createClass(History, [{\n    key: \"onTrainBegin\",\n    value: function () {\n      var _onTrainBegin3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(logs) {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                this.epoch = [];\n                this.history = {};\n\n              case 2:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function onTrainBegin(_x26) {\n        return _onTrainBegin3.apply(this, arguments);\n      }\n\n      return onTrainBegin;\n    }()\n  }, {\n    key: \"onEpochEnd\",\n    value: function () {\n      var _onEpochEnd4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(epoch, logs) {\n        var key;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                if (logs == null) {\n                  logs = {};\n                }\n\n                this.epoch.push(epoch);\n\n                for (key in logs) {\n                  if (this.history[key] == null) {\n                    this.history[key] = [];\n                  }\n\n                  this.history[key].push(logs[key]);\n                }\n\n              case 3:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function onEpochEnd(_x27, _x28) {\n        return _onEpochEnd4.apply(this, arguments);\n      }\n\n      return onEpochEnd;\n    }()\n    /**\n     * Await the values of all losses and metrics.\n     */\n\n  }, {\n    key: \"syncData\",\n    value: function () {\n      var _syncData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        var promises, keys, indices, key, valueArray, i, valueScalar, values, n, tensorToDispose;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                promises = [];\n                keys = [];\n                indices = [];\n\n                for (key in this.history) {\n                  valueArray = this.history[key];\n\n                  for (i = 0; i < valueArray.length; ++i) {\n                    if (typeof valueArray[i] !== 'number') {\n                      valueScalar = valueArray[i];\n                      promises.push(valueScalar.data());\n                      keys.push(key);\n                      indices.push(i);\n                    }\n                  }\n                }\n\n                _context18.next = 6;\n                return Promise.all(promises);\n\n              case 6:\n                values = _context18.sent;\n\n                for (n = 0; n < values.length; ++n) {\n                  tensorToDispose = this.history[keys[n]][indices[n]];\n                  tensorToDispose.dispose();\n                  this.history[keys[n]][indices[n]] = values[n][0];\n                }\n\n              case 8:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function syncData() {\n        return _syncData.apply(this, arguments);\n      }\n\n      return syncData;\n    }()\n  }]);\n\n  return History;\n}(BaseCallback);\n/**\n * Custom callback for training.\n */\n\nexport var CustomCallback = /*#__PURE__*/function (_BaseCallback3) {\n  _inherits(CustomCallback, _BaseCallback3);\n\n  function CustomCallback(args, yieldEvery) {\n    var _this3;\n\n    _classCallCheck(this, CustomCallback);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(CustomCallback).call(this));\n    _this3.currentEpoch = 0;\n    _this3.yieldEvery = yieldEvery || 'auto';\n\n    if (_this3.yieldEvery === 'auto') {\n      _this3.yieldEvery = DEFAULT_YIELD_EVERY_MS;\n    }\n\n    if (_this3.yieldEvery === 'never' && args.onYield != null) {\n      throw new Error('yieldEvery is `never` but you provided an `onYield` callback. ' + 'Either change `yieldEvery` or remove the callback');\n    }\n\n    if (util.isNumber(_this3.yieldEvery)) {\n      // Decorate `maybeWait` so it will be called at most once every\n      // `yieldEvery` ms.\n      _this3.maybeWait = generic_utils.debounce(_this3.maybeWait.bind(_assertThisInitialized(_assertThisInitialized(_this3))), _this3.yieldEvery);\n    }\n\n    _this3.trainBegin = args.onTrainBegin;\n    _this3.trainEnd = args.onTrainEnd;\n    _this3.epochBegin = args.onEpochBegin;\n    _this3.epochEnd = args.onEpochEnd;\n    _this3.batchBegin = args.onBatchBegin;\n    _this3.batchEnd = args.onBatchEnd;\n    _this3.yield = args.onYield;\n    return _this3;\n  }\n\n  _createClass(CustomCallback, [{\n    key: \"maybeWait\",\n    value: function () {\n      var _maybeWait = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(epoch, batch, logs) {\n        var ps;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                ps = [];\n\n                if (!(this.yield != null)) {\n                  _context19.next = 5;\n                  break;\n                }\n\n                _context19.next = 4;\n                return resolveScalarsInLogs(logs);\n\n              case 4:\n                ps.push(this.yield(epoch, batch, logs));\n\n              case 5:\n                ps.push(nextFrame());\n                _context19.next = 8;\n                return Promise.all(ps);\n\n              case 8:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function maybeWait(_x29, _x30, _x31) {\n        return _maybeWait.apply(this, arguments);\n      }\n\n      return maybeWait;\n    }()\n  }, {\n    key: \"onEpochBegin\",\n    value: function () {\n      var _onEpochBegin4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(epoch, logs) {\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                this.currentEpoch = epoch;\n\n                if (!(this.epochBegin != null)) {\n                  _context20.next = 6;\n                  break;\n                }\n\n                _context20.next = 4;\n                return resolveScalarsInLogs(logs);\n\n              case 4:\n                _context20.next = 6;\n                return this.epochBegin(epoch, logs);\n\n              case 6:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function onEpochBegin(_x32, _x33) {\n        return _onEpochBegin4.apply(this, arguments);\n      }\n\n      return onEpochBegin;\n    }()\n  }, {\n    key: \"onEpochEnd\",\n    value: function () {\n      var _onEpochEnd5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(epoch, logs) {\n        var ps;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                ps = [];\n\n                if (!(this.epochEnd != null)) {\n                  _context21.next = 5;\n                  break;\n                }\n\n                _context21.next = 4;\n                return resolveScalarsInLogs(logs);\n\n              case 4:\n                ps.push(this.epochEnd(epoch, logs));\n\n              case 5:\n                if (this.yieldEvery === 'epoch') {\n                  ps.push(nextFrame());\n                }\n\n                _context21.next = 8;\n                return Promise.all(ps);\n\n              case 8:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function onEpochEnd(_x34, _x35) {\n        return _onEpochEnd5.apply(this, arguments);\n      }\n\n      return onEpochEnd;\n    }()\n  }, {\n    key: \"onBatchBegin\",\n    value: function () {\n      var _onBatchBegin3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(batch, logs) {\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                if (!(this.batchBegin != null)) {\n                  _context22.next = 5;\n                  break;\n                }\n\n                _context22.next = 3;\n                return resolveScalarsInLogs(logs);\n\n              case 3:\n                _context22.next = 5;\n                return this.batchBegin(batch, logs);\n\n              case 5:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function onBatchBegin(_x36, _x37) {\n        return _onBatchBegin3.apply(this, arguments);\n      }\n\n      return onBatchBegin;\n    }()\n  }, {\n    key: \"onBatchEnd\",\n    value: function () {\n      var _onBatchEnd4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(batch, logs) {\n        var ps;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                ps = [];\n\n                if (!(this.batchEnd != null)) {\n                  _context23.next = 5;\n                  break;\n                }\n\n                _context23.next = 4;\n                return resolveScalarsInLogs(logs);\n\n              case 4:\n                ps.push(this.batchEnd(batch, logs));\n\n              case 5:\n                if (this.yieldEvery === 'batch') {\n                  ps.push(nextFrame());\n                } else if (util.isNumber(this.yieldEvery)) {\n                  ps.push(this.maybeWait(this.currentEpoch, batch, logs));\n                }\n\n                _context23.next = 8;\n                return Promise.all(ps);\n\n              case 8:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function onBatchEnd(_x38, _x39) {\n        return _onBatchEnd4.apply(this, arguments);\n      }\n\n      return onBatchEnd;\n    }()\n  }, {\n    key: \"onTrainBegin\",\n    value: function () {\n      var _onTrainBegin4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(logs) {\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                if (!(this.trainBegin != null)) {\n                  _context24.next = 5;\n                  break;\n                }\n\n                _context24.next = 3;\n                return resolveScalarsInLogs(logs);\n\n              case 3:\n                _context24.next = 5;\n                return this.trainBegin(logs);\n\n              case 5:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function onTrainBegin(_x40) {\n        return _onTrainBegin4.apply(this, arguments);\n      }\n\n      return onTrainBegin;\n    }()\n  }, {\n    key: \"onTrainEnd\",\n    value: function () {\n      var _onTrainEnd3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(logs) {\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                if (!(this.trainEnd != null)) {\n                  _context25.next = 5;\n                  break;\n                }\n\n                _context25.next = 3;\n                return resolveScalarsInLogs(logs);\n\n              case 3:\n                _context25.next = 5;\n                return this.trainEnd(logs);\n\n              case 5:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function onTrainEnd(_x41) {\n        return _onTrainEnd3.apply(this, arguments);\n      }\n\n      return onTrainEnd;\n    }()\n  }]);\n\n  return CustomCallback;\n}(BaseCallback);\n/**\n * Standardize callbacks or configurations of them to an Array of callbacks.\n */\n\nexport function standardizeCallbacks(callbacks, yieldEvery) {\n  if (callbacks == null) {\n    callbacks = {};\n  }\n\n  if (callbacks instanceof BaseCallback) {\n    return [callbacks];\n  }\n\n  if (Array.isArray(callbacks) && callbacks[0] instanceof BaseCallback) {\n    return callbacks;\n  } // Convert custom callback configs to custom callback objects.\n\n\n  var callbackConfigs = generic_utils.toList(callbacks);\n  return callbackConfigs.map(function (callbackConfig) {\n    return new CustomCallback(callbackConfig, yieldEvery);\n  });\n}\n/**\n * A global registry for callback constructors to be used during\n * LayersModel.fit().\n */\n\nexport var CallbackConstructorRegistry = /*#__PURE__*/function () {\n  /**\n   * Blocks public access to constructor.\n   */\n  function CallbackConstructorRegistry() {\n    _classCallCheck(this, CallbackConstructorRegistry);\n  }\n  /**\n   * Register a tf.LayersModel.fit() callback constructor.\n   *\n   * The registered callback constructor will be used to instantiate\n   * callbacks for every tf.LayersModel.fit() call afterwards.\n   *\n   * @param verbosityLevel Level of verbosity at which the `callbackConstructor`\n   *   is to be reigstered.\n   * @param callbackConstructor A no-arg constructor for `tf.Callback`.\n   * @throws Error, if the same callbackConstructor has been registered before,\n   *   either at the same or a different `verbosityLevel`.\n   */\n\n\n  _createClass(CallbackConstructorRegistry, null, [{\n    key: \"registerCallbackConstructor\",\n    value: function registerCallbackConstructor(verbosityLevel, callbackConstructor) {\n      util.assert(verbosityLevel >= 0 && Number.isInteger(verbosityLevel), function () {\n        return \"Verbosity level is expected to be an integer >= 0, \" + \"but got \".concat(verbosityLevel);\n      });\n      CallbackConstructorRegistry.checkForDuplicate(callbackConstructor);\n\n      if (CallbackConstructorRegistry.constructors[verbosityLevel] == null) {\n        CallbackConstructorRegistry.constructors[verbosityLevel] = [];\n      }\n\n      CallbackConstructorRegistry.constructors[verbosityLevel].push(callbackConstructor);\n    }\n  }, {\n    key: \"checkForDuplicate\",\n    value: function checkForDuplicate(callbackConstructor) {\n      for (var levelName in CallbackConstructorRegistry.constructors) {\n        var constructors = CallbackConstructorRegistry.constructors[+levelName];\n        constructors.forEach(function (ctor) {\n          if (ctor === callbackConstructor) {\n            throw new ValueError('Duplicate callback constructor.');\n          }\n        });\n      }\n    }\n    /**\n     * Clear all registered callback constructors.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      CallbackConstructorRegistry.constructors = {};\n    }\n    /**\n     * Create callbacks using the registered callback constructors.\n     *\n     * Given `verbosityLevel`, all constructors registered at that level or above\n     * will be called and the instantiated callbacks will be used.\n     *\n     * @param verbosityLevel: Level of verbosity.\n     */\n\n  }, {\n    key: \"createCallbacks\",\n    value: function createCallbacks(verbosityLevel) {\n      var constructors = [];\n\n      for (var levelName in CallbackConstructorRegistry.constructors) {\n        var level = +levelName;\n\n        if (verbosityLevel >= level) {\n          constructors.push.apply(constructors, _toConsumableArray(CallbackConstructorRegistry.constructors[level]));\n        }\n      }\n\n      return constructors.map(function (ctor) {\n        return new ctor();\n      });\n    }\n  }]);\n\n  return CallbackConstructorRegistry;\n}();\nCallbackConstructorRegistry.constructors = {};\nexport function configureCallbacks(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics) {\n  var history = new History();\n  var actualCallbacks = [new BaseLogger()].concat(_toConsumableArray(CallbackConstructorRegistry.createCallbacks(verbose)));\n\n  if (callbacks != null) {\n    actualCallbacks.push.apply(actualCallbacks, _toConsumableArray(callbacks));\n  }\n\n  actualCallbacks.push(history);\n  var callbackList = new CallbackList(actualCallbacks); // TODO(cais): Figure out when this LayersModel instance can have a\n  // dynamically\n  //   set property called 'callback_model' as in PyKeras.\n\n  callbackList.setParams({\n    epochs: epochs,\n    initialEpoch: initialEpoch,\n    samples: numTrainSamples,\n    steps: stepsPerEpoch,\n    batchSize: batchSize,\n    verbose: verbose,\n    doValidation: doValidation,\n    metrics: callbackMetrics\n  });\n  return {\n    callbackList: callbackList,\n    history: history\n  };\n}","map":null,"metadata":{},"sourceType":"module"}