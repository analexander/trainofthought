{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * Contains global resources of a model.\n */\nexport var ResourceManager = /*#__PURE__*/function () {\n  function ResourceManager() {\n    var hashTableNameToHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var hashTableMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, ResourceManager);\n\n    this.hashTableNameToHandle = hashTableNameToHandle;\n    this.hashTableMap = hashTableMap;\n  }\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n\n\n  _createClass(ResourceManager, [{\n    key: \"addHashTable\",\n    value: function addHashTable(name, hashTable) {\n      this.hashTableNameToHandle[name] = hashTable.handle;\n      this.hashTableMap[hashTable.id] = hashTable;\n    }\n    /**\n     * Get the table handle by node name.\n     * @param name Op node name that creates the `HashTable`. This name is also\n     *     used in the inputs list of lookup and import `HashTable` ops.\n     */\n\n  }, {\n    key: \"getHashTableHandleByName\",\n    value: function getHashTableHandleByName(name) {\n      return this.hashTableNameToHandle[name];\n    }\n    /**\n     * Get the actual `HashTable` by its handle tensor's id.\n     * @param id The id of the handle tensor.\n     */\n\n  }, {\n    key: \"getHashTableById\",\n    value: function getHashTableById(id) {\n      return this.hashTableMap[id];\n    }\n    /**\n     * Dispose `ResourceManager`, including its hashTables and tensors in them.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var key in this.hashTableMap) {\n        this.hashTableMap[key].clearAndClose();\n        delete this.hashTableMap[key];\n      }\n\n      for (var name in this.hashTableNameToHandle) {\n        this.hashTableNameToHandle[name].dispose();\n        delete this.hashTableNameToHandle[name];\n      }\n    }\n  }]);\n\n  return ResourceManager;\n}();","map":null,"metadata":{},"sourceType":"module"}