{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D, util } from '@tensorflow/tfjs-core';\nexport var dilation2dConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: function kernelFunc(_ref) {\n    var inputs = _ref.inputs,\n        backend = _ref.backend,\n        attrs = _ref.attrs;\n    var x = inputs.x,\n        filter = inputs.filter;\n    var strides = attrs.strides,\n        pad = attrs.pad,\n        dilations = attrs.dilations;\n    var cpuBackend = backend;\n    var xVals = cpuBackend.data.get(x.dataId).values;\n    var xRank = x.shape.length;\n    var filterVals = cpuBackend.data.get(filter.dataId).values;\n    var filterRank = filter.shape.length;\n\n    var _backend_util$compute = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC'\n    /* dataFormat */\n    , dilations),\n        batchSize = _backend_util$compute.batchSize,\n        inHeight = _backend_util$compute.inHeight,\n        inWidth = _backend_util$compute.inWidth,\n        inChannels = _backend_util$compute.inChannels,\n        outHeight = _backend_util$compute.outHeight,\n        outWidth = _backend_util$compute.outWidth,\n        padInfo = _backend_util$compute.padInfo,\n        strideHeight = _backend_util$compute.strideHeight,\n        strideWidth = _backend_util$compute.strideWidth,\n        filterHeight = _backend_util$compute.filterHeight,\n        filterWidth = _backend_util$compute.filterWidth,\n        dilationHeight = _backend_util$compute.dilationHeight,\n        dilationWidth = _backend_util$compute.dilationWidth,\n        outShape = _backend_util$compute.outShape;\n\n    var outSize = util.sizeFromShape(outShape);\n    var outRank = outShape.length;\n    var outputVals = util.getArrayFromDType(x.dtype, outSize); // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n\n    for (var b = 0; b < batchSize; ++b) {\n      for (var hOut = 0; hOut < outHeight; ++hOut) {\n        var hBeg = hOut * strideHeight - padInfo.top;\n\n        for (var wOut = 0; wOut < outWidth; ++wOut) {\n          var wBeg = wOut * strideWidth - padInfo.left;\n\n          for (var d = 0; d < inChannels; ++d) {\n            var curVal = Number.MIN_SAFE_INTEGER;\n\n            for (var h = 0; h < filterHeight; ++h) {\n              var hIn = hBeg + h * dilationHeight;\n\n              if (hIn >= 0 && hIn < inHeight) {\n                for (var w = 0; w < filterWidth; ++w) {\n                  var wIn = wBeg + w * dilationWidth;\n\n                  if (wIn >= 0 && wIn < inWidth) {\n                    var xIndex = util.locToIndex([b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    var filterIndex = util.locToIndex([h, w, d], filterRank, util.computeStrides(filter.shape));\n                    var val = xVals[xIndex] + filterVals[filterIndex];\n\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n\n            var outputIndex = util.locToIndex([b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    var dataId = cpuBackend.write(util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n    return {\n      dataId: dataId,\n      shape: outShape,\n      dtype: x.dtype\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}