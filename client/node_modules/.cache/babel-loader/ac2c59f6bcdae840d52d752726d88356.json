{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Unpack } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * tf.unstack(a).forEach(tensor => tensor.print());\n * ```\n *\n * @param x A tensor object.\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\n\nfunction unstack_(x) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var $x = convertToTensor(x, 'x', 'unstack');\n  util.assert(axis >= -$x.shape.length && axis < $x.shape.length, function () {\n    return \"Axis = \".concat(axis, \" is not in [-\").concat($x.shape.length, \", \").concat($x.shape.length, \")\");\n  });\n\n  if (axis < 0) {\n    axis += $x.shape.length;\n  }\n\n  var inputs = {\n    value: $x\n  };\n  var attrs = {\n    axis: axis\n  };\n\n  var forward = function forward(backend) {\n    return backend.unstack($x, axis);\n  };\n\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Unpack, attrs);\n}\n\nexport var unstack = op({\n  unstack_: unstack_\n});","map":null,"metadata":{},"sourceType":"module"}