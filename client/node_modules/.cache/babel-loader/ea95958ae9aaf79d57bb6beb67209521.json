{"ast":null,"code":"var createHash = require('crypto').createHash;\n\nfunction get_header(header, credentials, opts) {\n  var type = header.split(' ')[0],\n      user = credentials[0],\n      pass = credentials[1];\n\n  if (type == 'Digest') {\n    return digest.generate(header, user, pass, opts.method, opts.path);\n  } else if (type == 'Basic') {\n    return basic(user, pass);\n  }\n} ////////////////////\n// basic\n\n\nfunction md5(string) {\n  return createHash('md5').update(string).digest('hex');\n}\n\nfunction basic(user, pass) {\n  var str = typeof pass == 'undefined' ? user : [user, pass].join(':');\n  return 'Basic ' + Buffer.from(str).toString('base64');\n} ////////////////////\n// digest\n// logic inspired from https://github.com/simme/node-http-digest-client\n\n\nvar digest = {};\n\ndigest.parse_header = function (header) {\n  var challenge = {},\n      matches = header.match(/([a-z0-9_-]+)=\"?([a-z0-9=\\/\\.@\\s-\\+]+)\"?/gi);\n\n  for (var i = 0, l = matches.length; i < l; i++) {\n    var parts = matches[i].split('='),\n        key = parts.shift(),\n        val = parts.join('=').replace(/^\"/, '').replace(/\"$/, '');\n    challenge[key] = val;\n  }\n\n  return challenge;\n};\n\ndigest.update_nc = function (nc) {\n  var max = 99999999;\n  nc++;\n  if (nc > max) nc = 1;\n  var padding = new Array(8).join('0') + '';\n  nc = nc + '';\n  return padding.substr(0, 8 - nc.length) + nc;\n};\n\ndigest.generate = function (header, user, pass, method, path) {\n  var nc = 1,\n      cnonce = null,\n      challenge = digest.parse_header(header);\n  var ha1 = md5(user + ':' + challenge.realm + ':' + pass),\n      ha2 = md5(method.toUpperCase() + ':' + path),\n      resp = [ha1, challenge.nonce];\n\n  if (typeof challenge.qop === 'string') {\n    cnonce = md5(Math.random().toString(36)).substr(0, 8);\n    nc = digest.update_nc(nc);\n    resp = resp.concat(nc, cnonce);\n    resp = resp.concat(challenge.qop, ha2);\n  } else {\n    resp = resp.concat(ha2);\n  }\n\n  var params = {\n    uri: path,\n    realm: challenge.realm,\n    nonce: challenge.nonce,\n    username: user,\n    response: md5(resp.join(':'))\n  };\n\n  if (challenge.qop) {\n    params.qop = challenge.qop;\n  }\n\n  if (challenge.opaque) {\n    params.opaque = challenge.opaque;\n  }\n\n  if (cnonce) {\n    params.nc = nc;\n    params.cnonce = cnonce;\n  }\n\n  header = [];\n\n  for (var k in params) {\n    header.push(k + '=\"' + params[k] + '\"');\n  }\n\n  return 'Digest ' + header.join(', ');\n};\n\nmodule.exports = {\n  header: get_header,\n  basic: basic,\n  digest: digest.generate\n};","map":null,"metadata":{},"sourceType":"script"}