{"ast":null,"code":"import _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropInputV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3DBackpropInputV2(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var dy = inputs.dy,\n      filter = inputs.filter;\n  var pad = attrs.pad,\n      strides = attrs.strides,\n      inputShape = attrs.inputShape;\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n  var dyStrides = util.computeStrides(dy.shape);\n  var filterStrides = util.computeStrides(filter.shape);\n  var convInfo = backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1\n  /* dilations */\n  , pad);\n  var dx = new TensorBuffer(convInfo.inShape, 'float32');\n  var dxValues = dx.values;\n\n  var _dx$strides = _slicedToArray(dx.strides, 4),\n      dxS0 = _dx$strides[0],\n      dxS1 = _dx$strides[1],\n      dxS2 = _dx$strides[2],\n      dxS3 = _dx$strides[3];\n\n  var dyValues = backend.data.get(dy.dataId).values;\n\n  var _dyStrides = _slicedToArray(dyStrides, 4),\n      dyS0 = _dyStrides[0],\n      dyS1 = _dyStrides[1],\n      dyS2 = _dyStrides[2],\n      dyS3 = _dyStrides[3];\n\n  var fltValues = backend.data.get(filter.dataId).values;\n\n  var _filterStrides = _slicedToArray(filterStrides, 4),\n      fltS0 = _filterStrides[0],\n      fltS1 = _filterStrides[1],\n      fltS2 = _filterStrides[2],\n      fltS3 = _filterStrides[3];\n\n  var batchSize = convInfo.batchSize,\n      filterDepth = convInfo.filterDepth,\n      filterHeight = convInfo.filterHeight,\n      filterWidth = convInfo.filterWidth,\n      inChannels = convInfo.inChannels,\n      inDepth = convInfo.inDepth,\n      inHeight = convInfo.inHeight,\n      inWidth = convInfo.inWidth,\n      outChannels = convInfo.outChannels,\n      outDepth = convInfo.outDepth,\n      outHeight = convInfo.outHeight,\n      outWidth = convInfo.outWidth,\n      strideDepth = convInfo.strideDepth,\n      strideHeight = convInfo.strideHeight,\n      strideWidth = convInfo.strideWidth;\n  var frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  var topPad = filterHeight - 1 - convInfo.padInfo.top;\n  var leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (var b = 0; b < batchSize; ++b) {\n    for (var d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (var xF = 0; xF < inDepth; ++xF) {\n        var xFCorner = xF - frontPad;\n        var xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        var yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth); // Rows as per standard 2d matrix notation\n\n        for (var xR = 0; xR < inHeight; ++xR) {\n          var xRCorner = xR - topPad;\n          var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          var yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight); // Columns as per standard 2d matrix notation\n\n          for (var xC = 0; xC < inWidth; ++xC) {\n            var xCCorner = xC - leftPad;\n            var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            var yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n            var dotProd = 0;\n\n            for (var yF = xFMin; yF < yFMax; ++yF) {\n              var wF = yF * strideDepth - xFCorner;\n\n              for (var yR = xRMin; yR < yRMax; ++yR) {\n                var wR = yR * strideHeight - xRCorner;\n\n                for (var yC = xCMin; yC < yCMax; ++yC) {\n                  var wC = yC * strideWidth - xCCorner;\n                  var dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  var fltOffset = fltS0 * (filterDepth - 1 - wF) + fltS1 * (filterHeight - 1 - wR) + fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (var d2 = 0; d2 < outChannels; ++d2) {\n                    var pixel = dyValues[dyOffset + d2];\n                    var weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport var conv3DBackpropInputV2Config = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2\n};","map":null,"metadata":{},"sourceType":"module"}