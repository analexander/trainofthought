{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { cast } from './cast';\nimport { matMul } from './mat_mul';\nimport { oneHot } from './one_hot';\nimport { op } from './operation';\nimport { transpose } from './transpose';\n/**\n * Computes the confusion matrix from true labels and predicted labels.\n *\n * ```js\n * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');\n * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');\n * const numClasses = 3;\n * const out = tf.math.confusionMatrix(labels, predictions, numClasses);\n * out.print();\n * // Expected output matrix:\n * // [[2, 0, 0],\n * //  [0, 1, 1],\n * //  [0, 0, 1]]\n * ```\n *\n * @param labels The target labels, assumed to be 0-based integers\n *   for the classes. The shape is `[numExamples]`, where\n *   `numExamples` is the number of examples included.\n * @param predictions The predicted classes, assumed to be\n *   0-based integers for the classes. Must have the same shape as `labels`.\n * @param numClasses Number of all classes, as an integer.\n *   Its value must be larger than the largest element in `labels` and\n *   `predictions`.\n * @returns The confusion matrix as a int32-type 2D tensor. The value at\n *   row `r` and column `c` is the number of times examples of actual class\n *   `r` were predicted as class `c`.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\n\nexport function confusionMatrix_(labels, predictions, numClasses) {\n  var $labels = convertToTensor(labels, 'labels', 'confusionMatrix');\n  var $predictions = convertToTensor(predictions, 'predictions', 'confusionMatrix');\n  util.assert(numClasses == null || numClasses > 0 && Number.isInteger(numClasses), function () {\n    return \"If provided, numClasses must be a positive integer, \" + \"but got \".concat(numClasses);\n  });\n  util.assert($labels.rank === 1, function () {\n    return \"Expected the rank of labels to be 1, but got \".concat($labels.rank);\n  });\n  util.assert($predictions.rank === 1, function () {\n    return \"Expected the rank of predictions to be 1, \" + \"but got \".concat($predictions.rank);\n  });\n  util.assert($labels.shape[0] === $predictions.shape[0], function () {\n    return \"Mismatch in the number of examples: \" + \"\".concat($labels.shape[0], \" vs. \").concat($predictions.shape[0], \". \") + \"Labels and predictions should have the same number of elements.\";\n  });\n  util.assert(numClasses > 0 && Number.isInteger(numClasses), function () {\n    return \"numClasses is required to be a positive integer, but got \" + \"\".concat(numClasses);\n  }); // TODO(cais): In the future, if oneHot supports tensors inputs for\n  //   `numClasses`, `confusionMatrix` can make `numClasses` optional.\n\n  var oneHotLabels = oneHot(cast($labels, 'int32'), numClasses);\n  var oneHotPredictions = oneHot(cast($predictions, 'int32'), numClasses);\n  var oneHotLabelsT = transpose(oneHotLabels);\n  var product = matMul(oneHotLabelsT, oneHotPredictions);\n  return cast(product, 'int32');\n}\nexport var confusionMatrix = op({\n  confusionMatrix_: confusionMatrix_\n});","map":null,"metadata":{},"sourceType":"module"}