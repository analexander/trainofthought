{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { extractFaces, extractFaceTensors } from '../dom';\nimport { isWithFaceLandmarks } from '../factories/WithFaceLandmarks';\nexport function extractAllFacesAndComputeResults(parentResults, input, computeResults, extractedFaces, getRectForAlignment) {\n  if (getRectForAlignment === void 0) {\n    getRectForAlignment = function getRectForAlignment(_a) {\n      var alignedRect = _a.alignedRect;\n      return alignedRect;\n    };\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var faceBoxes, faces, _a, _b, results;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          faceBoxes = parentResults.map(function (parentResult) {\n            return isWithFaceLandmarks(parentResult) ? getRectForAlignment(parentResult) : parentResult.detection;\n          });\n          _a = extractedFaces;\n          if (_a) return [3\n          /*break*/\n          , 5];\n          if (!(input instanceof tf.Tensor)) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , extractFaceTensors(input, faceBoxes)];\n\n        case 1:\n          _b = _c.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          return [4\n          /*yield*/\n          , extractFaces(input, faceBoxes)];\n\n        case 3:\n          _b = _c.sent();\n          _c.label = 4;\n\n        case 4:\n          _a = _b;\n          _c.label = 5;\n\n        case 5:\n          faces = _a;\n          return [4\n          /*yield*/\n          , computeResults(faces)];\n\n        case 6:\n          results = _c.sent();\n          faces.forEach(function (f) {\n            return f instanceof tf.Tensor && f.dispose();\n          });\n          return [2\n          /*return*/\n          , results];\n      }\n    });\n  });\n}\nexport function extractSingleFaceAndComputeResult(parentResult, input, computeResult, extractedFaces, getRectForAlignment) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      return [2\n      /*return*/\n      , extractAllFacesAndComputeResults([parentResult], input, function (faces) {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2\n            /*return*/\n            , computeResult(faces[0])];\n          });\n        });\n      }, extractedFaces, getRectForAlignment)];\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/globalApi/extractFacesAndComputeResults.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAZ,MAAoB,uBAApB;AAGA,SAAS,YAAT,EAAuB,kBAAvB,QAA4D,QAA5D;AAEA,SAAS,mBAAT,QAAuD,gCAAvD;AAEA,OAAM,SAAgB,gCAAhB,CACJ,aADI,EAEJ,KAFI,EAGJ,cAHI,EAIJ,cAJI,EAKJ,mBALI,EAKoH;AAAxH,MAAA,mBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,mBAAA,GAAA,6BAAyF,EAAzF,EAAwG;UAAb,WAAA,GAAA,EAAA,CAAA,W;AAAkB,aAAA,WAAA;AAAW,KAAxH;AAAwH;;;;;;;;AAElH,UAAA,SAAS,GAAG,aAAa,CAAC,GAAd,CAAkB,UAAA,YAAA,EAAY;AAC9C,mBAAA,mBAAmB,CAAC,YAAD,CAAnB,GACI,mBAAmB,CAAC,YAAD,CADvB,GAEI,YAAY,CAAC,SAFjB;AAE0B,WAHV,CAAZ;AAKgD,UAAA,EAAA,GAAA,cAAA;kBAAA,OAAA,CAAA;AAAA;AAAA,YAAA,CAAA,CAAA;cACpD,EAAA,KAAK,YAAY,EAAE,CAAC,MAApB,C,EAAA,OAAA,CAAA;AAAA;AAAA,YAAA,CAAA,CAAA;AACI,iBAAA,CAAA;AAAA;AAAA,YAAM,kBAAkB,CAAC,KAAD,EAAQ,SAAR,CAAxB,CAAA;;;AAAA,UAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA;;;;;;AACA,iBAAA,CAAA;AAAA;AAAA,YAAM,YAAY,CAAC,KAAD,EAAQ,SAAR,CAAlB,CAAA;;;AAAA,UAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA;;;;AAHkE,UAAA,EAAA,GAAA,EAAA;;;;AAAlE,UAAA,KAAK,GAAA,EAAL;AAMU,iBAAA,CAAA;AAAA;AAAA,YAAM,cAAc,CAAC,KAAD,CAApB,CAAA;;;AAAV,UAAA,OAAO,GAAG,EAAA,CAAA,IAAA,EAAV;AAEN,UAAA,KAAK,CAAC,OAAN,CAAc,UAAA,CAAA,EAAC;AAAI,mBAAA,CAAC,YAAY,EAAE,CAAC,MAAhB,IAA0B,CAAC,CAA3B,OAA0B,EAA1B;AAAqC,WAAxD;AAEA,iBAAA,CAAA;AAAA;AAAA,YAAO,OAAP,CAAA;;;;AACD;AAED,OAAM,SAAgB,iCAAhB,CACJ,YADI,EAEJ,KAFI,EAGJ,aAHI,EAIJ,cAJI,EAKJ,mBALI,EAKkF;;;;;AAEtF,aAAA,CAAA;AAAA;AAAA,QAAO,gCAAgC,CACrC,CAAC,YAAD,CADqC,EAErC,KAFqC,EAGrC,UAAM,KAAN,EAAW;AAAA,eAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;AAAA,iBAAA,WAAA,CAAA,IAAA,EAAA,UAAA,EAAA,EAAA;AAAI,mBAAA,CAAA;AAAA;AAAA,cAAA,aAAa,CAAC,KAAK,CAAC,CAAD,CAAN,CAAb,CAAA;WAAJ,CAAA;SAAA,CAAA;AAA2B,OAHD,EAIrC,cAJqC,EAKrC,mBALqC,CAAvC,CAAA;;;AAOD","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { extractFaces, extractFaceTensors } from '../dom';\r\nimport { isWithFaceLandmarks } from '../factories/WithFaceLandmarks';\r\nexport function extractAllFacesAndComputeResults(parentResults, input, computeResults, extractedFaces, getRectForAlignment) {\r\n    if (getRectForAlignment === void 0) { getRectForAlignment = function (_a) {\r\n        var alignedRect = _a.alignedRect;\r\n        return alignedRect;\r\n    }; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var faceBoxes, faces, _a, _b, results;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    faceBoxes = parentResults.map(function (parentResult) {\r\n                        return isWithFaceLandmarks(parentResult)\r\n                            ? getRectForAlignment(parentResult)\r\n                            : parentResult.detection;\r\n                    });\r\n                    _a = extractedFaces;\r\n                    if (_a) return [3 /*break*/, 5];\r\n                    if (!(input instanceof tf.Tensor)) return [3 /*break*/, 2];\r\n                    return [4 /*yield*/, extractFaceTensors(input, faceBoxes)];\r\n                case 1:\r\n                    _b = _c.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 2: return [4 /*yield*/, extractFaces(input, faceBoxes)];\r\n                case 3:\r\n                    _b = _c.sent();\r\n                    _c.label = 4;\r\n                case 4:\r\n                    _a = (_b);\r\n                    _c.label = 5;\r\n                case 5:\r\n                    faces = _a;\r\n                    return [4 /*yield*/, computeResults(faces)];\r\n                case 6:\r\n                    results = _c.sent();\r\n                    faces.forEach(function (f) { return f instanceof tf.Tensor && f.dispose(); });\r\n                    return [2 /*return*/, results];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function extractSingleFaceAndComputeResult(parentResult, input, computeResult, extractedFaces, getRectForAlignment) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            return [2 /*return*/, extractAllFacesAndComputeResults([parentResult], input, function (faces) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n                    return [2 /*return*/, computeResult(faces[0])];\r\n                }); }); }, extractedFaces, getRectForAlignment)];\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=extractFacesAndComputeResults.js.map"]},"metadata":{},"sourceType":"module"}