{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from './util';\nexport var Profiler = /*#__PURE__*/function () {\n  function Profiler(backendTimer, logger) {\n    _classCallCheck(this, Profiler);\n\n    this.backendTimer = backendTimer;\n    this.logger = logger;\n\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  _createClass(Profiler, [{\n    key: \"profileKernel\",\n    value: function profileKernel(kernelName, inputs, f) {\n      var outputs;\n\n      var holdResultWrapperFn = function holdResultWrapperFn() {\n        outputs = f();\n      };\n\n      var timer = this.backendTimer.time(holdResultWrapperFn);\n\n      var _loop = function _loop(i) {\n        var output = outputs[i]; // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n\n        output.data().then(function (tensorVals) {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      };\n\n      for (var i = 0; i < outputs.length; i++) {\n        _loop(i);\n      }\n\n      var kernelProfile = {\n        kernelName: kernelName,\n        outputs: outputs,\n        inputs: inputs,\n        timeMs: timer.then(function (timing) {\n          return timing.kernelMs;\n        }),\n        extraInfo: timer.then(function (timing) {\n          return timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : '';\n        })\n      };\n      return kernelProfile;\n    }\n  }, {\n    key: \"logKernelProfile\",\n    value: function logKernelProfile(kernelProfile) {\n      var _this = this;\n\n      var kernelName = kernelProfile.kernelName,\n          outputs = kernelProfile.outputs,\n          timeMs = kernelProfile.timeMs,\n          inputs = kernelProfile.inputs,\n          extraInfo = kernelProfile.extraInfo;\n      outputs.forEach(function (result) {\n        Promise.all([result.data(), timeMs, extraInfo]).then(function (valueContainer) {\n          _this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n        });\n      });\n    }\n  }]);\n\n  return Profiler;\n}();\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n\n  for (var i = 0; i < vals.length; i++) {\n    var num = vals[i];\n\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(\"Found \".concat(num, \" in the result of '\").concat(kernelName, \"'\"));\n      return true;\n    }\n  }\n\n  return false;\n}\nexport var Logger = /*#__PURE__*/function () {\n  function Logger() {\n    _classCallCheck(this, Logger);\n  }\n\n  _createClass(Logger, [{\n    key: \"logKernelProfile\",\n    value: function logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n      var time = typeof timeMs === 'number' ? util.rightPad(\"\".concat(timeMs, \"ms\"), 9) : timeMs['error'];\n      var paddedName = util.rightPad(name, 25);\n      var rank = result.rank;\n      var size = result.size;\n      var shape = util.rightPad(result.shape.toString(), 14);\n      var inputShapesDescription = '';\n\n      for (var _name in inputs) {\n        var input = inputs[_name];\n\n        if (input != null) {\n          // The input might be a non-tensor (e.g HTMLImageElement), in which case\n          // we claim the output shape as input shape.\n          var inputShape = input.shape || result.shape;\n          var inputRank = inputShape.length;\n          inputShapesDescription += \"\".concat(_name, \": \").concat(inputRank, \"D \").concat(inputRank > 0 ? inputShape : '', \" \");\n        }\n      }\n\n      console.log(\"%c\".concat(paddedName, \"\\t%c\").concat(time, \"\\t%c\").concat(rank, \"D \").concat(shape, \"\\t%c\").concat(size, \"\\t%c\").concat(inputShapesDescription, \"\\t%c\").concat(extraInfo), 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n    }\n  }]);\n\n  return Logger;\n}();","map":null,"metadata":{},"sourceType":"module"}