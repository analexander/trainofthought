{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport var DepthwiseConvPacked2DProgram = function DepthwiseConvPacked2DProgram(convInfo) {\n  var addBias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var activation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var hasPreluActivation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  _classCallCheck(this, DepthwiseConvPacked2DProgram);\n\n  this.variableNames = ['x', 'W'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.outputShape = convInfo.outShape;\n  var xNumRows = convInfo.inHeight;\n  var xNumCols = convInfo.inWidth;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var texelsAcross = filterWidth;\n  var mainLoop = \"int xR; int xC; int xCOffset;\";\n\n  for (var r = 0; r < filterHeight; r++) {\n    for (var c = 0; c < filterWidth; c++) {\n      mainLoop += \"\\n          vec4 xTexelR\".concat(r, \"C\").concat(c * 2, \" = vec4(0.);\\n          vec4 wR\").concat(r, \"C\").concat(c, \" = vec4(0.);\\n          vec4 xR\").concat(r, \"C\").concat(c, \" = vec4(0.);\");\n    }\n  }\n  /**\n   * This vectorized implementation works by gathering the values needed for\n   * each output channel's dot product into vec4's and then multiplying them\n   * all together (this happens in the final double for-loop below). Most of\n   * the main loop consists of constructing these vec4's with the minimum\n   * number of texture2D calls, which means making use of all four returned\n   * values from a texture2D call at once.\n   */\n\n\n  for (var _r = 0; _r < filterHeight; _r++) {\n    for (var texelC = 0; texelC < texelsAcross; texelC++) {\n      var _c = texelC * 2;\n\n      mainLoop += \"\\n          xR = xRCorner + \".concat(_r * dilationHeight, \";\\n          xC = xCCorner + \").concat(_c * dilationWidth, \";\\n        \");\n\n      if (strideWidth === 1) {\n        if (_c < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n            mainLoop += \"\\n                xCOffset = xC + 1;\\n                if(xR >= 0 && xR < \".concat(xNumRows, \" && xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                  xTexelR\").concat(_r, \"C\").concat(_c, \" = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \").concat(xNumCols, \") {\\n                    xTexelR\").concat(_r, \"C\").concat(_c, \".zw = vec2(0.);\\n                  }\\n                } else {\\n                  xTexelR\").concat(_r, \"C\").concat(_c, \" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + 1 - 2;\\n                if(xR >= 0 && xR < \").concat(xNumRows, \" && xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \").concat(xNumCols, \") {\\n                    previous.zw = vec2(0.);\\n                  }\\n\\n                  xR\").concat(_r, \"C\").concat(_c, \" = vec4(previous.zw, xTexelR\").concat(_r, \"C\").concat(_c, \".xy);\\n                } else {\\n                  xR\").concat(_r, \"C\").concat(_c, \" = vec4(0, 0, xTexelR\").concat(_r, \"C\").concat(_c, \".xy);\\n                }\\n              \");\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += \"\\n                if(xR >= 0 && xR < \".concat(xNumRows, \" && xC >= 0 && xC < \").concat(xNumCols, \") {\\n                  xTexelR\").concat(_r, \"C\").concat(_c, \" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\").concat(_r, \"C\").concat(_c, \" = vec4(0.);\\n                }\\n\\n                xR\").concat(_r, \"C\").concat(_c, \" = xTexelR\").concat(_r, \"C\").concat(_c, \";\\n              \");\n          }\n\n          if (_c + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n            var nextTexelOffset = padLeft % 2 === 0 ? util.nearestLargerEven(dilationWidth) : dilationWidth;\n\n            if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {\n              mainLoop += \"\\n                  xCOffset = xC + \".concat(padLeft % 2, \" + \").concat(nextTexelOffset, \";\\n\\n                  if(xR >= 0 && xR < \").concat(xNumRows, \" &&\\n                    xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                    xTexelR\").concat(_r, \"C\").concat(_c + 2, \" = getX(batch, xR, xCOffset, d1);\\n                  }\\n                \"); // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n\n              if (dilationWidth > 1) {\n                mainLoop += \"\\n                    xCOffset -= 2;\\n                    if(xR >= 0 && xR < \".concat(xNumRows, \" &&\\n                      xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                      xTexelR\").concat(_r, \"C\").concat(_c, \" = getX(batch, xR, xCOffset, d1);\\n                    } else {\\n                      xTexelR\").concat(_r, \"C\").concat(_c, \" = vec4(0.);\\n                    }\\n                  \");\n              }\n\n              mainLoop += \"\\n                  xR\".concat(_r, \"C\").concat(_c + 1, \" = vec4(\\n                    xTexelR\").concat(_r, \"C\").concat(_c, \".zw, xTexelR\").concat(_r, \"C\").concat(_c + 2, \".xy);\\n                \");\n            } else {\n              mainLoop += \"\\n                  xCOffset = xC + \".concat(nextTexelOffset, \";\\n\\n                  if(xR >= 0 && xR < \").concat(xNumRows, \" &&\\n                    xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                    xTexelR\").concat(_r, \"C\").concat(_c + 2, \" = getX(batch, xR, xCOffset, d1);\\n                  }\\n\\n                  xR\").concat(_r, \"C\").concat(_c + 1, \" = xTexelR\").concat(_r, \"C\").concat(_c + 2, \";\\n                \");\n            }\n          }\n        }\n      } else {\n        // stride > 1\n        if (_c < filterWidth) {\n          mainLoop += \"\\n              if(xR >= 0 && xR < \".concat(xNumRows, \") {\\n            \"); // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xR${r}C${c}. If padLeft is\n          // even, xR${r}C${c + 1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `vec4\n          // final` initialized below.\n\n          if (padLeft % 2 === 1) {\n            mainLoop += \"\\n                xCOffset = xC + 1 - \".concat(strideWidth, \";\\n                if(xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                  xTexelR\").concat(_r, \"C\").concat(_c, \" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\").concat(_r, \"C\").concat(_c, \" = vec4(0.);\\n                }\\n\\n                if(xC + 1 >= 0 && xC + 1 < \").concat(xNumCols, \") {\\n                  xTexelR\").concat(_r, \"C\").concat(_c + 2, \" = getX(batch, xR, xC + 1, d1);\\n                } else {\\n                  xTexelR\").concat(_r, \"C\").concat(_c + 2, \" = vec4(0.);\\n                }\\n\\n                xR\").concat(_r, \"C\").concat(_c, \" = vec4(\\n                  xTexelR\").concat(_r, \"C\").concat(_c, \".zw, xTexelR\").concat(_r, \"C\").concat(_c + 2, \".zw);\\n              \");\n\n            if (_c + 1 < filterWidth) {\n              mainLoop += \"\\n                  vec4 final = vec4(0.);\\n                  xCOffset = xC + 1 + \".concat(strideWidth, \";\\n                  if(xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                    final = getX(batch, xR, xCOffset, d1);\\n                  }\\n                  xR\").concat(_r, \"C\").concat(_c + 1, \" = vec4(xTexelR\").concat(_r, \"C\").concat(_c + 2, \".xy, final.xy);\\n                \");\n            }\n          } else {\n            mainLoop += \"\\n                if(xC >= 0 && xC < \".concat(xNumCols, \") {\\n                  xTexelR\").concat(_r, \"C\").concat(_c, \" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\").concat(_r, \"C\").concat(_c, \" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + \").concat(strideWidth, \";\\n                if(xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                  xTexelR\").concat(_r, \"C\").concat(_c + 2, \" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\").concat(_r, \"C\").concat(_c + 2, \" = vec4(0.);\\n                }\\n\\n                xR\").concat(_r, \"C\").concat(_c, \" = vec4(\\n                  xTexelR\").concat(_r, \"C\").concat(_c, \".xy, xTexelR\").concat(_r, \"C\").concat(_c + 2, \".xy);\\n              \");\n\n            if (_c + 1 < filterWidth) {\n              mainLoop += \"\\n                  xR\".concat(_r, \"C\").concat(_c + 1, \" = vec4(\\n                    xTexelR\").concat(_r, \"C\").concat(_c, \".zw, xTexelR\").concat(_r, \"C\").concat(_c + 2, \".zw);\\n                \");\n            }\n          }\n\n          mainLoop += \"}\";\n        }\n      }\n\n      if (_c < filterWidth) {\n        mainLoop += \"\\n            vec4 wTexelR\".concat(_r, \"C\").concat(_c, \" = getW(\").concat(_r, \", \").concat(_c, \", d1, q);\\n            wR\").concat(_r, \"C\").concat(_c, \" = vec4(wTexelR\").concat(_r, \"C\").concat(_c, \".xz, wTexelR\").concat(_r, \"C\").concat(_c, \".xz);\\n          \");\n\n        if (_c + 1 < filterWidth) {\n          mainLoop += \"\\n              vec4 wTexelR\".concat(_r, \"C\").concat(_c + 1, \" = getW(\").concat(_r, \", \").concat(_c + 1, \", d1, q);\\n              wR\").concat(_r, \"C\").concat(_c + 1, \" =\\n                vec4(wTexelR\").concat(_r, \"C\").concat(_c + 1, \".xz, wTexelR\").concat(_r, \"C\").concat(_c + 1, \".xz);\");\n        }\n      }\n    }\n  }\n\n  for (var _r2 = 0; _r2 < filterHeight; _r2++) {\n    for (var _c2 = 0; _c2 < filterWidth; _c2++) {\n      mainLoop += \"dotProd += xR\".concat(_r2, \"C\").concat(_c2, \" * wR\").concat(_r2, \"C\").concat(_c2, \";\");\n    }\n  }\n\n  var activationSnippet = '',\n      applyActivationSnippet = '';\n\n  if (activation) {\n    if (hasPreluActivation) {\n      activationSnippet = \"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \".concat(activation, \"\\n        }\");\n    } else {\n      activationSnippet = \"vec4 activation(vec4 x) {\\n          \".concat(activation, \"\\n        }\");\n    }\n\n    applyActivationSnippet = \"result = activation(result);\";\n  }\n\n  var addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n\n  if (addBias) {\n    this.variableNames.push('bias');\n  }\n\n  if (hasPreluActivation) {\n    this.variableNames.push('preluActivationWeights');\n  }\n\n  this.userCode = \"\\n      \".concat(activationSnippet, \"\\n\\n      const ivec2 strides = ivec2(\").concat(strideHeight, \", \").concat(strideWidth, \");\\n      const ivec2 pads = ivec2(\").concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2;\\n        int q = 0;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        vec4 dotProd = vec4(0.);\\n\\n        \").concat(mainLoop, \"\\n\\n        vec4 result = dotProd;\\n        \").concat(addBiasSnippet, \"\\n        \").concat(applyActivationSnippet, \"\\n        setOutput(result);\\n      }\\n    \");\n};","map":null,"metadata":{},"sourceType":"module"}