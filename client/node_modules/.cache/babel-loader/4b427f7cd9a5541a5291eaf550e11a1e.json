{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tidy, util } from '@tensorflow/tfjs-core'; // tslint:disable-next-line: no-imports-from-dist\n\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat':\n      {\n        var n = getParamValue('n', node, tensorMap, context);\n        var axis = getParamValue('axis', node, tensorMap, context);\n        var inputs = getParamValue('tensors', node, tensorMap, context);\n        inputs = inputs.slice(0, n);\n        return [tfOps.concat(inputs, axis)];\n      }\n\n    case 'GatherV2':\n    case 'Gather':\n      {\n        var _axis = getParamValue('axis', node, tensorMap, context);\n\n        var input = getParamValue('x', node, tensorMap, context);\n        var indices = getParamValue('indices', node, tensorMap, context);\n        return [tfOps.gather(input, tfOps.cast(indices, 'int32'), _axis)];\n      }\n\n    case 'ReverseV2':\n    case 'Reverse':\n      {\n        var _axis2 = getParamValue('axis', node, tensorMap, context);\n\n        var _input = getParamValue('x', node, tensorMap, context);\n\n        return [tfOps.reverse(_input, _axis2)];\n      }\n\n    case 'Slice':\n      {\n        // tslint:disable-next-line:no-any\n        var begin = getParamValue('begin', node, tensorMap, context); // tslint:disable-next-line:no-any\n\n        var size = getParamValue('size', node, tensorMap, context);\n        return [tfOps.slice(getParamValue('x', node, tensorMap, context), begin, size)];\n      }\n\n    case 'StridedSlice':\n      {\n        var _begin = getParamValue('begin', node, tensorMap, context);\n\n        var end = getParamValue('end', node, tensorMap, context);\n        var strides = getParamValue('strides', node, tensorMap, context);\n        var beginMask = getParamValue('beginMask', node, tensorMap, context);\n        var endMask = getParamValue('endMask', node, tensorMap, context);\n        var ellipsisMask = getParamValue('ellipsisMask', node, tensorMap, context);\n        var newAxisMask = getParamValue('newAxisMask', node, tensorMap, context);\n        var shrinkAxisMask = getParamValue('shrinkAxisMask', node, tensorMap, context);\n        var tensor = getParamValue('x', node, tensorMap, context);\n        return [tfOps.stridedSlice(tensor, _begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];\n      }\n\n    case 'Pack':\n      {\n        return tidy(function () {\n          var axis = getParamValue('axis', node, tensorMap, context);\n          var tensors = getParamValue('tensors', node, tensorMap, context); // Reshape the tensors to the first tensor's shape if they don't\n          // match.\n\n          var shape = tensors[0].shape;\n          var squeezedShape = tfOps.squeeze(tensors[0]).shape;\n          var mapped = tensors.map(function (tensor) {\n            var sameShape = util.arraysEqual(tensor.shape, shape);\n\n            if (!sameShape && !util.arraysEqual(tfOps.squeeze(tensor).shape, squeezedShape)) {\n              throw new Error('the input tensors shape does not match');\n            }\n\n            return sameShape ? tensor : tfOps.reshape(tensor, shape);\n          });\n          return [tfOps.stack(mapped, axis)];\n        });\n      }\n\n    case 'Unpack':\n      {\n        var _axis3 = getParamValue('axis', node, tensorMap, context);\n\n        var _tensor = getParamValue('tensor', node, tensorMap, context);\n\n        return tfOps.unstack(_tensor, _axis3);\n      }\n\n    case 'Tile':\n      {\n        var reps = getParamValue('reps', node, tensorMap, context);\n        return [tfOps.tile(getParamValue('x', node, tensorMap, context), reps)];\n      }\n\n    case 'Split':\n    case 'SplitV':\n      {\n        var _axis4 = getParamValue('axis', node, tensorMap, context);\n\n        var numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);\n\n        var _tensor2 = getParamValue('x', node, tensorMap, context);\n\n        return tfOps.split(_tensor2, numOrSizeSplits, _axis4);\n      }\n\n    case 'ScatterNd':\n      {\n        var _indices = getParamValue('indices', node, tensorMap, context);\n\n        var values = getParamValue('values', node, tensorMap, context);\n        var shape = getParamValue('shape', node, tensorMap, context);\n        return [tfOps.scatterND(_indices, values, shape)];\n      }\n\n    case 'GatherNd':\n      {\n        var x = getParamValue('x', node, tensorMap, context);\n\n        var _indices2 = getParamValue('indices', node, tensorMap, context);\n\n        return [tfOps.gatherND(x, _indices2)];\n      }\n\n    case 'SparseToDense':\n      {\n        var _indices3 = getParamValue('sparseIndices', node, tensorMap, context);\n\n        var _shape = getParamValue('outputShape', node, tensorMap, context);\n\n        var sparseValues = getParamValue('sparseValues', node, tensorMap, context);\n        var defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n        return [tfOps.sparseToDense(_indices3, sparseValues, _shape, sparseValues.dtype === defaultValue.dtype ? defaultValue : tfOps.cast(defaultValue, sparseValues.dtype))];\n      }\n\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport var CATEGORY = 'slice_join';","map":null,"metadata":{},"sourceType":"module"}