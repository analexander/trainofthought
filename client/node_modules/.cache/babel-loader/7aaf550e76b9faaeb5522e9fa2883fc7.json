{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MaxPool3DBackprop } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the backprop of a 3d max pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank 4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param output The original output image, of rank 5 of shape\n *     [batchSize, outDepth, outHeight, outWidth, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param dilations Deprecated, this field will be gone in v3.0.0.\n *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\n\nfunction maxPool3dBackprop_(dy, input, output, filterSize, strides) {\n  var dilations = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1, 1];\n  var pad = arguments.length > 6 ? arguments[6] : undefined;\n  var dimRoundingMode = arguments.length > 7 ? arguments[7] : undefined;\n  var $dy = convertToTensor(dy, 'dy', 'maxPool3dBackprop');\n  var $input = convertToTensor(input, 'input', 'maxPool3dBackprop');\n  var $output = convertToTensor(output, 'output', 'maxPool3dBackprop');\n  var dy5D = $dy;\n  var input5D = $input;\n  var output5D = $output;\n  var reshapedTo5D = false;\n\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n    input5D = reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]]);\n    output5D = reshape($output, [1, $output.shape[0], $output.shape[1], $output.shape[2], $output.shape[3]]);\n  }\n\n  util.assert(dy5D.rank === 5, function () {\n    return \"Error in maxPool3dBackprop: dy must be rank 5 but got rank \" + \"\".concat(dy5D.rank, \".\");\n  });\n  util.assert(input5D.rank === 5, function () {\n    return \"Error in maxPool3dBackprop: input must be rank 5 but got rank \" + \"\".concat(input5D.rank, \".\");\n  });\n  util.assert(output5D.rank === 5, function () {\n    return \"Error in maxPool3dBackprop: output must be rank 5 but got rank \" + \"\".concat(output5D.rank, \".\");\n  });\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), function () {\n    return 'Error in maxPool3dBackprop: Either strides or dilations ' + \"must be 1. Got strides \".concat(strides, \" and dilations '\").concat(dilations, \"'\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in maxPool3dBackprop: pad must be an integer when \" + \"using, dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\");\n    });\n  }\n\n  var forward = function forward(backend) {\n    var convInfo = conv_util.computePool3DInfo(input5D.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    return backend.maxPool3dBackprop(dy5D, input5D, output5D, convInfo);\n  };\n\n  var inputs = {\n    dy: dy5D,\n    input: input5D,\n    output: output5D\n  };\n  var attrs = {\n    filterSize: filterSize,\n    strides: strides,\n    dilations: dilations,\n    pad: pad,\n    dimRoundingMode: dimRoundingMode\n  };\n  var res = ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , MaxPool3DBackprop, attrs);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport var maxPool3dBackprop = op({\n  maxPool3dBackprop_: maxPool3dBackprop_\n});","map":null,"metadata":{},"sourceType":"module"}