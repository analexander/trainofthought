{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FFTProgram } from '../fft_gpu';\nimport { complex } from './Complex';\nimport { reshape } from './Reshape';\nexport function fftImpl(x, inverse, backend) {\n  var xData = backend.texData.get(x.dataId);\n  var inputSize = util.sizeFromShape(x.shape); // Collapse all outer dimensions to a single batch dimension.\n\n  var innerDimensionSize = x.shape[x.shape.length - 1];\n  var batch = inputSize / innerDimensionSize;\n  var input2D = reshape({\n    inputs: {\n      x: x\n    },\n    backend: backend,\n    attrs: {\n      shape: [batch, innerDimensionSize]\n    }\n  });\n  var xShape = input2D.shape;\n  var realProgram = new FFTProgram('real', xShape, inverse);\n  var imagProgram = new FFTProgram('imag', xShape, inverse);\n  var inputs = [{\n    dataId: xData.complexTensorInfos.real.dataId,\n    dtype: xData.complexTensorInfos.real.dtype,\n    shape: xShape\n  }, {\n    dataId: xData.complexTensorInfos.imag.dataId,\n    dtype: xData.complexTensorInfos.imag.dtype,\n    shape: xShape\n  }];\n  var realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  var imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n  var complexOutput = complex({\n    inputs: {\n      real: realPart,\n      imag: imagPart\n    },\n    backend: backend\n  });\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n  var complexOutputReshaped = reshape({\n    inputs: {\n      x: complexOutput\n    },\n    backend: backend,\n    attrs: {\n      shape: x.shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(complexOutputReshaped);\n  return complexOutputReshaped;\n}","map":null,"metadata":{},"sourceType":"module"}