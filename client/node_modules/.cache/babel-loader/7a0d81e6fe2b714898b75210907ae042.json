{"ast":null,"code":"import _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n  var isContinous = slice_util.isSliceContinous(shape, begin, size);\n  var length = util.sizeFromShape(size);\n  var xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    var flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n    return vals.subarray(flatOffset, flatOffset + length);\n  }\n\n  var outVals = util.getTypedArrayFromDType(dtype, length);\n\n  for (var i = 0; i < length; ++i) {\n    var rank = size.length;\n    var strides = util.computeStrides(size);\n    var loc = util.indexToLoc(i, rank, strides);\n    var xLoc = loc.map(function (idx, j) {\n      return idx + begin[j];\n    });\n    var xIndex = util.locToIndex(xLoc, shape.length, xStrides);\n    outVals[i] = vals[xIndex];\n  }\n\n  return outVals;\n}\nexport function slice(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var begin = attrs.begin,\n      size = attrs.size;\n  assertNotComplex(x, 'slice');\n\n  var _slice_util$parseSlic = slice_util.parseSliceParams(x, begin, size),\n      _slice_util$parseSlic2 = _slicedToArray(_slice_util$parseSlic, 2),\n      $begin = _slice_util$parseSlic2[0],\n      $size = _slice_util$parseSlic2[1];\n\n  slice_util.assertParamsValid(x, $begin, $size);\n  var vals = backend.data.get(x.dataId).values;\n  var outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport var sliceConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice\n};","map":null,"metadata":{},"sourceType":"module"}