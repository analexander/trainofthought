{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { batchMatMul } from './BatchMatMul';\nexport function _fusedMatMul(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var a = inputs.a,\n      b = inputs.b,\n      bias = inputs.bias,\n      preluActivationWeights = inputs.preluActivationWeights;\n  var transposeA = attrs.transposeA,\n      transposeB = attrs.transposeB,\n      activation = attrs.activation;\n  var current;\n  var addRes;\n  var activationRes;\n  var intermediates = [];\n  var matMulRes = batchMatMul({\n    inputs: {\n      a: a,\n      b: b\n    },\n    attrs: {\n      transposeA: transposeA,\n      transposeB: transposeB\n    },\n    backend: backend\n  });\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({\n      inputs: {\n        a: current,\n        b: bias\n      },\n      backend: backend\n    });\n    intermediates.push(current);\n    current = addRes;\n  }\n\n  if (activation) {\n    activationRes = applyActivation(backend, current, activation, preluActivationWeights);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (var _i = 0, _intermediates = intermediates; _i < _intermediates.length; _i++) {\n    var i = _intermediates[_i];\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\nexport var _fusedMatMulConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul\n};","map":null,"metadata":{},"sourceType":"module"}