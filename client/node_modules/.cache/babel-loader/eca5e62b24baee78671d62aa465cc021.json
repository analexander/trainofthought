{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"./nodejs_kernel_backend\");\n\nvar SummaryFileWriter =\n/** @class */\nfunction () {\n  function SummaryFileWriter(resourceHandle) {\n    this.resourceHandle = resourceHandle;\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    this.backend = nodejs_kernel_backend_1.nodeBackend();\n  }\n  /**\n   * Write a scalar summary.\n   *\n   * @param name A name of the summary. The summary tag for TensorBoard will be\n   *   this name.\n   * @param value A real numeric scalar value, as `tf.Scalar` or a JavaScript\n   *   `number`.\n   * @param step Required `int64`-castable, monotically-increasing step value.\n   * @param description Optinal long-form description for this summary, as a\n   *   `string`. *Not implemented yet*.\n   */\n\n\n  SummaryFileWriter.prototype.scalar = function (name, value, step, description) {\n    // N.B.: Unlike the Python TensorFlow API, step is a required parameter,\n    // because the construct of global step does not exist in TensorFlow.js.\n    if (description != null) {\n      throw new Error('scalar() does not support description yet');\n    }\n\n    this.backend.writeScalarSummary(this.resourceHandle, step, name, value);\n  };\n  /**\n   * Force summary writer to send all buffered data to storage.\n   */\n\n\n  SummaryFileWriter.prototype.flush = function () {\n    this.backend.flushSummaryWriter(this.resourceHandle);\n  };\n\n  return SummaryFileWriter;\n}();\n\nexports.SummaryFileWriter = SummaryFileWriter;\n/**\n * Use a cache for `SummaryFileWriter` instance.\n *\n * Using multiple instances of `SummaryFileWriter` pointing to the same\n * logdir has potential problems. Using this cache avoids those problems.\n */\n\nvar summaryFileWriterCache = {};\n/**\n * Create a summary file writer for TensorBoard.\n *\n * Example:\n * ```js\n * const tf = require('@tensorflow/tfjs-node');\n *\n * const summaryWriter = tf.node.summaryFileWriter('/tmp/tfjs_tb_logdir');\n *\n * for (let step = 0; step < 100; ++step) {\n *  summaryWriter.scalar('dummyValue', Math.sin(2 * Math.PI * step / 8), step);\n * }\n * ```\n *\n * @param logdir Log directory in which the summary data will be written.\n * @param maxQueue Maximum queue length (default: `10`).\n * @param flushMillis Flush every __ milliseconds (default: `120e3`, i.e,\n *   `120` seconds).\n * @param filenameSuffix Suffix of the protocol buffer file names to be\n *   written in the `logdir` (default: `.v2`).\n * @returns An instance of `SummaryFileWriter`.\n *\n * @doc {heading: 'TensorBoard', namespace: 'node'}\n */\n\nfunction summaryFileWriter(logdir, maxQueue, flushMillis, filenameSuffix) {\n  if (maxQueue === void 0) {\n    maxQueue = 10;\n  }\n\n  if (flushMillis === void 0) {\n    flushMillis = 120000;\n  }\n\n  if (filenameSuffix === void 0) {\n    filenameSuffix = '.v2';\n  }\n\n  tfjs_1.util.assert(logdir != null && typeof logdir === 'string' && logdir.length > 0, function () {\n    return \"Invalid logdir: \" + logdir + \". Expected a non-empty string for logdir.\";\n  });\n\n  if (!(logdir in summaryFileWriterCache)) {\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    var backend = nodejs_kernel_backend_1.nodeBackend();\n    var writerResource = backend.summaryWriter(logdir);\n    backend.createSummaryFileWriter(writerResource, logdir, maxQueue, flushMillis, filenameSuffix);\n    summaryFileWriterCache[logdir] = new SummaryFileWriter(writerResource);\n  }\n\n  return summaryFileWriterCache[logdir];\n}\n\nexports.summaryFileWriter = summaryFileWriter;","map":null,"metadata":{},"sourceType":"script"}