{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { getCoordsDataType } from './shader_compiler';\nexport var CumSumProgram = /*#__PURE__*/function () {\n  function CumSumProgram(shape, exclusive, reverse) {\n    _classCallCheck(this, CumSumProgram);\n\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n    var rank = shape.length;\n    var val = exclusive ? '0.0' : \"getX(\".concat(getCoords(rank, 'coords'), \")\");\n    var length = shape[shape.length - 1];\n    var condition = '';\n    var idxString = ''; // When exclusive is set, the cumsum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n\n    if (exclusive) {\n      condition = reverse ? \"end != \".concat(length - 1) : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? \"end + pow2 < \".concat(length) : 'end >= pow2';\n      idxString = reverse ? 'end + pow2' : 'end - pow2';\n    }\n\n    this.userCode = \"\\n      uniform float index;\\n      void main() {\\n        \".concat(getCoordsDataType(rank), \" coords = getOutputCoords();\\n        int end = \").concat(getFinalCoord(rank, 'coords'), \";\\n        float val = \").concat(val, \";\\n        int pow2 = int(pow(2.0, index));\\n        if (\").concat(condition, \") {\\n          int idx = \").concat(idxString, \";\\n          \").concat(getFinalCoord(rank, 'coords'), \" = idx;\\n          val += getX(\").concat(getCoords(rank, 'coords'), \");\\n        }\\n        setOutput(val);\\n      }\\n    \");\n  }\n\n  _createClass(CumSumProgram, [{\n    key: \"getCustomSetupFunc\",\n    value: function getCustomSetupFunc(index) {\n      var _this = this;\n\n      return function (gpgpu, webGLProgram) {\n        if (_this.index == null) {\n          _this.index = gpgpu.getUniformLocation(webGLProgram, 'index');\n        }\n\n        gpgpu.gl.uniform1f(_this.index, index);\n      };\n    }\n  }]);\n\n  return CumSumProgram;\n}();\n\nfunction getCoords(rank, name) {\n  if (rank === 1) {\n    return \"\".concat(name);\n  } else if (rank === 2) {\n    return \"\".concat(name, \".x, \").concat(name, \".y\");\n  } else if (rank === 3) {\n    return \"\".concat(name, \".x, \").concat(name, \".y, \").concat(name, \".z\");\n  } else if (rank === 4) {\n    return \"\".concat(name, \".x, \").concat(name, \".y, \").concat(name, \".z, \").concat(name, \".w\");\n  } else {\n    throw Error(\"Cumulative sum for rank \".concat(rank, \" is not yet supported\"));\n  }\n}\n\nfunction getFinalCoord(rank, name) {\n  if (rank === 1) {\n    return \"\".concat(name);\n  } else if (rank === 2) {\n    return \"\".concat(name, \".y\");\n  } else if (rank === 3) {\n    return \"\".concat(name, \".z\");\n  } else if (rank === 4) {\n    return \"\".concat(name, \".w\");\n  } else {\n    throw Error(\"Cumulative sum for rank \".concat(rank, \" is not yet supported\"));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}