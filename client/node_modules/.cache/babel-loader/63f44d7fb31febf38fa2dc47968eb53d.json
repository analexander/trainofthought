{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors'; // tslint:enable\n\n/**\n * Determine whether the input is an Array of Shapes.\n */\n\nexport function isArrayOfShapes(x) {\n  return Array.isArray(x) && Array.isArray(x[0]);\n}\n/**\n * Special case of normalizing shapes to lists.\n *\n * @param x A shape or list of shapes to normalize into a list of Shapes.\n * @return A list of Shapes.\n */\n\nexport function normalizeShapeList(x) {\n  if (x.length === 0) {\n    return [];\n  }\n\n  if (!Array.isArray(x[0])) {\n    return [x];\n  }\n\n  return x;\n}\n/**\n * Helper function to obtain exactly one Tensor.\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\n */\n\nexport function getExactlyOneTensor(xs) {\n  var x;\n\n  if (Array.isArray(xs)) {\n    if (xs.length !== 1) {\n      throw new ValueError(\"Expected Tensor length to be 1; got \".concat(xs.length));\n    }\n\n    x = xs[0];\n  } else {\n    x = xs;\n  }\n\n  return x;\n}\n/**\n * Helper function to obtain exactly on instance of Shape.\n *\n * @param shapes Input single `Shape` or Array of `Shape`s.\n * @returns If input is a single `Shape`, return it unchanged. If the input is\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\n *   Otherwise, throw a `ValueError`.\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\n *   1.\n */\n\nexport function getExactlyOneShape(shapes) {\n  if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n    if (shapes.length === 1) {\n      shapes = shapes;\n      return shapes[0];\n    } else {\n      throw new ValueError(\"Expected exactly 1 Shape; got \".concat(shapes.length));\n    }\n  } else {\n    return shapes;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}