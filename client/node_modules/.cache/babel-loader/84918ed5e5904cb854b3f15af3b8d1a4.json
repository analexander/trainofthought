{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport var PackProgram = function PackProgram(outputShape) {\n  _classCallCheck(this, PackProgram);\n\n  this.variableNames = ['A'];\n  this.packedInputs = false;\n  this.packedOutput = true; // Only input / output 3D tensors.\n\n  this.outputShape = outputShape;\n  var rank = outputShape.length;\n\n  if (rank === 0) {\n    this.userCode = \"\\n        void main() {\\n          setOutput(vec4(getA(), 0., 0., 0.));\\n        }\\n      \";\n  } else {\n    var channels = getChannels('rc', rank);\n    var dtype = getCoordsDataType(rank);\n    var outOfBoundsCondition = getOutOfBoundsCondition(rank, outputShape, channels);\n    var setup = getSetup(rank, outputShape[outputShape.length - 1], outputShape[outputShape.length - 2], channels);\n    var output = getOutput(outputShape, channels);\n    this.userCode = \"\\n        void main() {\\n          \".concat(dtype, \" rc = getOutputCoords();\\n\\n          if(\").concat(outOfBoundsCondition, \") {\\n            setOutput(vec4(0));\\n          } else {\\n            \").concat(setup, \"\\n\\n            setOutput(vec4(\").concat(output, \"));\\n          }\\n        }\\n      \");\n  }\n};\n\nfunction getSourceCoordsArr(rank, dims) {\n  var coords = [];\n\n  for (var row = 0; row <= 1; row++) {\n    for (var col = 0; col <= 1; col++) {\n      var coord = \"\".concat(row === 0 ? 'r' : 'rp1', \", \").concat(col === 0 ? 'c' : 'cp1');\n\n      for (var d = 2; d < rank; d++) {\n        coord = \"\".concat(dims[dims.length - 1 - d], \",\") + coord;\n      }\n\n      coords.push(coord);\n    }\n  }\n\n  return coords;\n}\n\nfunction getOutOfBoundsCondition(rank, shape, dims) {\n  if (rank === 1) {\n    return \"rc > \".concat(shape[0]);\n  }\n\n  var cond = '';\n\n  for (var i = rank - 2; i < rank; i++) {\n    cond += \"\".concat(dims[i], \" >= \").concat(shape[i]);\n\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\nfunction getSetup(rank, cols, rows, dims) {\n  if (rank === 1) {\n    return '';\n  }\n\n  var innerDims = dims.slice(-2);\n  return \"\\n    int r = \".concat(innerDims[0], \";\\n    int c = \").concat(innerDims[1], \";\\n    int rp1 = r + 1;\\n    int cp1 = c + 1;\\n\\n    bool cEdge = cp1 >= \").concat(cols, \";\\n    bool rEdge = rp1 >= \").concat(rows, \";\\n  \");\n}\n\nfunction getOutput(shape, dims) {\n  var rank = shape.length;\n  var sourceCoords = getSourceCoordsArr(rank, dims);\n\n  if (rank === 1) {\n    return \"getA(rc),\\n            rc + 1 >= \".concat(shape[0], \" ? 0. : getA(rc + 1),\\n            0, 0\");\n  }\n\n  return \"getA(\".concat(sourceCoords[0], \"),\\n          cEdge ? 0. : getA(\").concat(sourceCoords[1], \"),\\n          rEdge ? 0. : getA(\").concat(sourceCoords[2], \"),\\n          rEdge || cEdge ? 0. : getA(\").concat(sourceCoords[3], \")\");\n}","map":null,"metadata":{},"sourceType":"module"}