{"ast":null,"code":"import _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { TopK } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Finds the values and indices of the `k` largest entries along the last\n * dimension.\n *\n * If the input is a vector (rank=1), finds the k largest entries in the vector\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\n * largest entry in input, and its index is indices[j].\n * For higher rank inputs, computes the top k entries along the last dimension.\n *\n * If two elements are equal, the lower-index element appears first.\n *\n * ```js\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\n * const {values, indices} = tf.topk(a);\n * values.print();\n * indices.print();\n * ```\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\n * @param k Number of top elements to look for along the last dimension.\n * @param sorted If true, the resulting `k` elements will be sorted by the\n *     values in descending order.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\n\nfunction topk_(x) {\n  var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var sorted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var $x = convertToTensor(x, 'x', 'topk');\n\n  if ($x.rank === 0) {\n    throw new Error('topk() expects the input to be of rank 1 or higher');\n  }\n\n  var lastDim = $x.shape[$x.shape.length - 1];\n\n  if (k > lastDim) {\n    throw new Error(\"'k' passed to topk() must be <= the last dimension (\".concat(lastDim, \") \") + \"but got \".concat(k));\n  }\n\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    k: k,\n    sorted: sorted\n  };\n\n  var _ENGINE$runKernelFunc = ENGINE.runKernelFunc(function (b) {\n    return b.topk($x, k, sorted);\n  }, inputs, null\n  /* grad */\n  , TopK, attrs),\n      _ENGINE$runKernelFunc2 = _slicedToArray(_ENGINE$runKernelFunc, 2),\n      values = _ENGINE$runKernelFunc2[0],\n      indices = _ENGINE$runKernelFunc2[1];\n\n  return {\n    values: values,\n    indices: indices\n  };\n}\n\nexport var topk = op({\n  topk_: topk_\n});","map":null,"metadata":{},"sourceType":"module"}