{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\n\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\n\nvar Add_1 = require(\"./kernels/Add\");\n\nvar AddN_1 = require(\"./kernels/AddN\");\n\nvar ArgMax_1 = require(\"./kernels/ArgMax\");\n\nvar ArgMin_1 = require(\"./kernels/ArgMin\");\n\nvar Diag_1 = require(\"./kernels/Diag\");\n\nvar Dilation2D_1 = require(\"./kernels/Dilation2D\");\n\nvar Dilation2DBackpropFilter_1 = require(\"./kernels/Dilation2DBackpropFilter\");\n\nvar Dilation2DBackpropInput_1 = require(\"./kernels/Dilation2DBackpropInput\");\n\nvar Equal_1 = require(\"./kernels/Equal\");\n\nvar FloorDiv_1 = require(\"./kernels/FloorDiv\");\n\nvar Greater_1 = require(\"./kernels/Greater\");\n\nvar GreaterEqual_1 = require(\"./kernels/GreaterEqual\");\n\nvar Less_1 = require(\"./kernels/Less\");\n\nvar LessEqual_1 = require(\"./kernels/LessEqual\");\n\nvar LogicalAnd_1 = require(\"./kernels/LogicalAnd\");\n\nvar LogicalNot_1 = require(\"./kernels/LogicalNot\");\n\nvar LogicalOr_1 = require(\"./kernels/LogicalOr\");\n\nvar Max_1 = require(\"./kernels/Max\");\n\nvar Maximum_1 = require(\"./kernels/Maximum\");\n\nvar Min_1 = require(\"./kernels/Min\");\n\nvar Minimum_1 = require(\"./kernels/Minimum\");\n\nvar MirrorPad_1 = require(\"./kernels/MirrorPad\");\n\nvar Multiply_1 = require(\"./kernels/Multiply\");\n\nvar NonMaxSuppressionV4_1 = require(\"./kernels/NonMaxSuppressionV4\");\n\nvar NonMaxSuppressionV5_1 = require(\"./kernels/NonMaxSuppressionV5\");\n\nvar NotEqual_1 = require(\"./kernels/NotEqual\");\n\nvar Prod_1 = require(\"./kernels/Prod\");\n\nvar Softmax_1 = require(\"./kernels/Softmax\");\n\nvar SquaredDifference_1 = require(\"./kernels/SquaredDifference\");\n\nvar Sum_1 = require(\"./kernels/Sum\");\n\nvar UnsortedSegmentSum_1 = require(\"./kernels/UnsortedSegmentSum\"); // List all kernel configs here\n\n\nvar kernelConfigs = [Add_1.addConfig, AddN_1.addNConfig, ArgMax_1.argMaxConfig, ArgMin_1.argMinConfig, Diag_1.diagConfig, Dilation2DBackpropFilter_1.dilation2dBackpropFilterConfig, Dilation2DBackpropInput_1.dilation2dBackpropInputConfig, Dilation2D_1.dilation2dConfig, Equal_1.equalConfig, FloorDiv_1.floorDivConfig, Greater_1.greaterConfig, GreaterEqual_1.greaterEqualConfig, Less_1.lessConfig, LessEqual_1.lessEqualConfig, LogicalAnd_1.logicalAndConfig, LogicalNot_1.logicalNotConfig, LogicalOr_1.logicalOrConfig, Max_1.maxConfig, Maximum_1.maximumConfig, Min_1.minConfig, Minimum_1.minimumConfig, MirrorPad_1.mirrorPadConfig, Multiply_1.multiplyConfig, NonMaxSuppressionV4_1.nonMaxSuppressionV4Config, NonMaxSuppressionV5_1.nonMaxSuppressionV5Config, NotEqual_1.notEqualConfig, Prod_1.prodConfig, Softmax_1.softmaxConfig, SquaredDifference_1.squaredDifferenceConfig, Sum_1.sumConfig, UnsortedSegmentSum_1.unsortedSegmentSumConfig];\n\nfor (var _i = 0, kernelConfigs_1 = kernelConfigs; _i < kernelConfigs_1.length; _i++) {\n  var kernelConfig = kernelConfigs_1[_i];\n  tfjs_core_1.registerKernel(kernelConfig);\n}","map":null,"metadata":{},"sourceType":"script"}