{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { GatherV2 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { collectGatherOpShapeInfo } from './segment_util';\n/**\n * Gather slices from tensor `x`'s axis `axis` according to `indices`.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const indices = tf.tensor1d([1, 3, 3], 'int32');\n *\n * x.gather(indices).print();\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const indices = tf.tensor1d([1, 1, 0], 'int32');\n *\n * x.gather(indices).print();\n * ```\n * @param x The input tensor whose slices to be gathered.\n * @param indices The indices of the values to extract.\n * @param axis The axis over which to select values. Defaults to 0.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\n\nfunction gather_(x, indices) {\n  var axis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var $x = convertToTensor(x, 'x', 'gather');\n  var $indices = convertToTensor(indices, 'indices', 'gather', 'int32');\n  var inputs = {\n    x: $x,\n    indices: $indices\n  };\n  var attrs = {\n    axis: axis\n  };\n\n  var forward = function forward(backend, save) {\n    var parsedAxis = parseAxisParam(axis, $x.shape)[0];\n    var shapeInfo = collectGatherOpShapeInfo($x, $indices, parsedAxis);\n    var res = backend.gather($x, reshape($indices, [$indices.size]), parsedAxis);\n    save([$x, $indices]);\n    return reshape(res, shapeInfo.outputShape);\n  };\n\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , GatherV2, attrs);\n}\n\nexport var gather = op({\n  gather_: gather_\n});","map":null,"metadata":{},"sourceType":"module"}