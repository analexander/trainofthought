{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { add } from './add';\nimport { concat } from './concat';\nimport { matMul } from './mat_mul';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { sigmoid } from './sigmoid';\nimport { slice } from './slice';\nimport { tanh } from './tanh';\n/**\n * Computes the next state and output of a BasicLSTMCell.\n *\n * Returns `[newC, newH]`.\n *\n * Derived from tf.contrib.rnn.BasicLSTMCell.\n *\n * @param forgetBias Forget bias for the cell.\n * @param lstmKernel The weights for the cell.\n * @param lstmBias The bias for the cell.\n * @param data The input to the cell.\n * @param c Previous cell state.\n * @param h Previous cell output.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\n\nfunction basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {\n  var $forgetBias = convertToTensor(forgetBias, 'forgetBias', 'basicLSTMCell');\n  var $lstmKernel = convertToTensor(lstmKernel, 'lstmKernel', 'basicLSTMCell');\n  var $lstmBias = convertToTensor(lstmBias, 'lstmBias', 'basicLSTMCell');\n  var $data = convertToTensor(data, 'data', 'basicLSTMCell');\n  var $c = convertToTensor(c, 'c', 'basicLSTMCell');\n  var $h = convertToTensor(h, 'h', 'basicLSTMCell');\n  var combined = concat([$data, $h], 1);\n  var weighted = matMul(combined, $lstmKernel);\n  var res = add(weighted, $lstmBias); // i = input_gate, j = new_input, f = forget_gate, o = output_gate\n\n  var batchSize = res.shape[0];\n  var sliceCols = res.shape[1] / 4;\n  var sliceSize = [batchSize, sliceCols];\n  var i = slice(res, [0, 0], sliceSize);\n  var j = slice(res, [0, sliceCols], sliceSize);\n  var f = slice(res, [0, sliceCols * 2], sliceSize);\n  var o = slice(res, [0, sliceCols * 3], sliceSize);\n  var newC = add(mul(sigmoid(i), tanh(j)), mul($c, sigmoid(add($forgetBias, f))));\n  var newH = mul(tanh(newC), sigmoid(o));\n  return [newC, newH];\n}\n\nexport var basicLSTMCell = op({\n  basicLSTMCell_: basicLSTMCell_\n});","map":null,"metadata":{},"sourceType":"module"}