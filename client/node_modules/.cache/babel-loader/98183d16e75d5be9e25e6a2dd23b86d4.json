{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { conv, convDown, convNoRelu } from './convLayer';\nexport function residual(x, params) {\n  var out = conv(x, params.conv1);\n  out = convNoRelu(out, params.conv2);\n  out = tf.add(out, x);\n  out = tf.relu(out);\n  return out;\n}\nexport function residualDown(x, params) {\n  var out = convDown(x, params.conv1);\n  out = convNoRelu(out, params.conv2);\n  var pooled = tf.avgPool(x, 2, 2, 'valid');\n  var zeros = tf.zeros(pooled.shape);\n  var isPad = pooled.shape[3] !== out.shape[3];\n  var isAdjustShape = pooled.shape[1] !== out.shape[1] || pooled.shape[2] !== out.shape[2];\n\n  if (isAdjustShape) {\n    var padShapeX = __spreadArrays(out.shape);\n\n    padShapeX[1] = 1;\n    var zerosW = tf.zeros(padShapeX);\n    out = tf.concat([out, zerosW], 1);\n\n    var padShapeY = __spreadArrays(out.shape);\n\n    padShapeY[2] = 1;\n    var zerosH = tf.zeros(padShapeY);\n    out = tf.concat([out, zerosH], 2);\n  }\n\n  pooled = isPad ? tf.concat([pooled, zeros], 3) : pooled;\n  out = tf.add(pooled, out);\n  out = tf.relu(out);\n  return out;\n}","map":{"version":3,"sources":["../../../src/faceRecognitionNet/residualLayer.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAZ,MAAoB,uBAApB;AAEA,SAAS,IAAT,EAAe,QAAf,EAAyB,UAAzB,QAA2C,aAA3C;AAGA,OAAM,SAAU,QAAV,CAAmB,CAAnB,EAAmC,MAAnC,EAA8D;AAClE,MAAI,GAAG,GAAG,IAAI,CAAC,CAAD,EAAI,MAAM,CAAC,KAAX,CAAd;AACA,EAAA,GAAG,GAAG,UAAU,CAAC,GAAD,EAAM,MAAM,CAAC,KAAb,CAAhB;AACA,EAAA,GAAG,GAAG,EAAE,CAAC,GAAH,CAAO,GAAP,EAAY,CAAZ,CAAN;AACA,EAAA,GAAG,GAAG,EAAE,CAAC,IAAH,CAAQ,GAAR,CAAN;AACA,SAAO,GAAP;AACD;AAED,OAAM,SAAU,YAAV,CAAuB,CAAvB,EAAuC,MAAvC,EAAkE;AACtE,MAAI,GAAG,GAAG,QAAQ,CAAC,CAAD,EAAI,MAAM,CAAC,KAAX,CAAlB;AACA,EAAA,GAAG,GAAG,UAAU,CAAC,GAAD,EAAM,MAAM,CAAC,KAAb,CAAhB;AAEA,MAAI,MAAM,GAAG,EAAE,CAAC,OAAH,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,OAApB,CAAb;AACA,MAAM,KAAK,GAAG,EAAE,CAAC,KAAH,CAAqB,MAAM,CAAC,KAA5B,CAAd;AACA,MAAM,KAAK,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,MAAoB,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAlC;AACA,MAAM,aAAa,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,MAAoB,GAAG,CAAC,KAAJ,CAAU,CAAV,CAApB,IAAoC,MAAM,CAAC,KAAP,CAAa,CAAb,MAAoB,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA9E;;AAEA,MAAI,aAAJ,EAAmB;AACjB,QAAM,SAAS,GAAG,cAAA,CAAI,GAAG,CAAC,KAAR,CAAlB;;AACA,IAAA,SAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AACA,QAAM,MAAM,GAAG,EAAE,CAAC,KAAH,CAAqB,SAArB,CAAf;AACA,IAAA,GAAG,GAAG,EAAE,CAAC,MAAH,CAAU,CAAC,GAAD,EAAM,MAAN,CAAV,EAAyB,CAAzB,CAAN;;AAEA,QAAM,SAAS,GAAG,cAAA,CAAI,GAAG,CAAC,KAAR,CAAlB;;AACA,IAAA,SAAS,CAAC,CAAD,CAAT,GAAe,CAAf;AACA,QAAM,MAAM,GAAG,EAAE,CAAC,KAAH,CAAqB,SAArB,CAAf;AACA,IAAA,GAAG,GAAG,EAAE,CAAC,MAAH,CAAU,CAAC,GAAD,EAAM,MAAN,CAAV,EAAyB,CAAzB,CAAN;AACD;;AAED,EAAA,MAAM,GAAG,KAAK,GAAG,EAAE,CAAC,MAAH,CAAU,CAAC,MAAD,EAAS,KAAT,CAAV,EAA2B,CAA3B,CAAH,GAAmC,MAAjD;AACA,EAAA,GAAG,GAAG,EAAE,CAAC,GAAH,CAAO,MAAP,EAAe,GAAf,CAAN;AAEA,EAAA,GAAG,GAAG,EAAE,CAAC,IAAH,CAAQ,GAAR,CAAN;AACA,SAAO,GAAP;AACD","sourceRoot":"","sourcesContent":["import { __spreadArrays } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { conv, convDown, convNoRelu } from './convLayer';\r\nexport function residual(x, params) {\r\n    var out = conv(x, params.conv1);\r\n    out = convNoRelu(out, params.conv2);\r\n    out = tf.add(out, x);\r\n    out = tf.relu(out);\r\n    return out;\r\n}\r\nexport function residualDown(x, params) {\r\n    var out = convDown(x, params.conv1);\r\n    out = convNoRelu(out, params.conv2);\r\n    var pooled = tf.avgPool(x, 2, 2, 'valid');\r\n    var zeros = tf.zeros(pooled.shape);\r\n    var isPad = pooled.shape[3] !== out.shape[3];\r\n    var isAdjustShape = pooled.shape[1] !== out.shape[1] || pooled.shape[2] !== out.shape[2];\r\n    if (isAdjustShape) {\r\n        var padShapeX = __spreadArrays(out.shape);\r\n        padShapeX[1] = 1;\r\n        var zerosW = tf.zeros(padShapeX);\r\n        out = tf.concat([out, zerosW], 1);\r\n        var padShapeY = __spreadArrays(out.shape);\r\n        padShapeY[2] = 1;\r\n        var zerosH = tf.zeros(padShapeY);\r\n        out = tf.concat([out, zerosH], 2);\r\n    }\r\n    pooled = isPad ? tf.concat([pooled, zeros], 3) : pooled;\r\n    out = tf.add(pooled, out);\r\n    out = tf.relu(out);\r\n    return out;\r\n}\r\n//# sourceMappingURL=residualLayer.js.map"]},"metadata":{},"sourceType":"module"}