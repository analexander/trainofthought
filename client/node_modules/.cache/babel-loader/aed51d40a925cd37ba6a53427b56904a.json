{"ast":null,"code":"import { getContext2dOrThrow } from '../dom/getContext2dOrThrow';\nimport { resolveInput } from '../dom/resolveInput';\nexport var AnchorPosition;\n\n(function (AnchorPosition) {\n  AnchorPosition[\"TOP_LEFT\"] = \"TOP_LEFT\";\n  AnchorPosition[\"TOP_RIGHT\"] = \"TOP_RIGHT\";\n  AnchorPosition[\"BOTTOM_LEFT\"] = \"BOTTOM_LEFT\";\n  AnchorPosition[\"BOTTOM_RIGHT\"] = \"BOTTOM_RIGHT\";\n})(AnchorPosition || (AnchorPosition = {}));\n\nvar DrawTextFieldOptions =\n/** @class */\nfunction () {\n  function DrawTextFieldOptions(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var anchorPosition = options.anchorPosition,\n        backgroundColor = options.backgroundColor,\n        fontColor = options.fontColor,\n        fontSize = options.fontSize,\n        fontStyle = options.fontStyle,\n        padding = options.padding;\n    this.anchorPosition = anchorPosition || AnchorPosition.TOP_LEFT;\n    this.backgroundColor = backgroundColor || 'rgba(0, 0, 0, 0.5)';\n    this.fontColor = fontColor || 'rgba(255, 255, 255, 1)';\n    this.fontSize = fontSize || 14;\n    this.fontStyle = fontStyle || 'Georgia';\n    this.padding = padding || 4;\n  }\n\n  return DrawTextFieldOptions;\n}();\n\nexport { DrawTextFieldOptions };\n\nvar DrawTextField =\n/** @class */\nfunction () {\n  function DrawTextField(text, anchor, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.text = typeof text === 'string' ? [text] : text instanceof DrawTextField ? text.text : text;\n    this.anchor = anchor;\n    this.options = new DrawTextFieldOptions(options);\n  }\n\n  DrawTextField.prototype.measureWidth = function (ctx) {\n    var padding = this.options.padding;\n    return this.text.map(function (l) {\n      return ctx.measureText(l).width;\n    }).reduce(function (w0, w1) {\n      return w0 < w1 ? w1 : w0;\n    }, 0) + 2 * padding;\n  };\n\n  DrawTextField.prototype.measureHeight = function () {\n    var _a = this.options,\n        fontSize = _a.fontSize,\n        padding = _a.padding;\n    return this.text.length * fontSize + 2 * padding;\n  };\n\n  DrawTextField.prototype.getUpperLeft = function (ctx, canvasDims) {\n    var anchorPosition = this.options.anchorPosition;\n    var isShiftLeft = anchorPosition === AnchorPosition.BOTTOM_RIGHT || anchorPosition === AnchorPosition.TOP_RIGHT;\n    var isShiftTop = anchorPosition === AnchorPosition.BOTTOM_LEFT || anchorPosition === AnchorPosition.BOTTOM_RIGHT;\n    var textFieldWidth = this.measureWidth(ctx);\n    var textFieldHeight = this.measureHeight();\n    var x = isShiftLeft ? this.anchor.x - textFieldWidth : this.anchor.x;\n    var y = isShiftTop ? this.anchor.y - textFieldHeight : this.anchor.y; // adjust anchor if text box exceeds canvas borders\n\n    if (canvasDims) {\n      var width = canvasDims.width,\n          height = canvasDims.height;\n      var newX = Math.max(Math.min(x, width - textFieldWidth), 0);\n      var newY = Math.max(Math.min(y, height - textFieldHeight), 0);\n      return {\n        x: newX,\n        y: newY\n      };\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  DrawTextField.prototype.draw = function (canvasArg) {\n    var canvas = resolveInput(canvasArg);\n    var ctx = getContext2dOrThrow(canvas);\n    var _a = this.options,\n        backgroundColor = _a.backgroundColor,\n        fontColor = _a.fontColor,\n        fontSize = _a.fontSize,\n        fontStyle = _a.fontStyle,\n        padding = _a.padding;\n    ctx.font = fontSize + \"px \" + fontStyle;\n    var maxTextWidth = this.measureWidth(ctx);\n    var textHeight = this.measureHeight();\n    ctx.fillStyle = backgroundColor;\n    var upperLeft = this.getUpperLeft(ctx, canvas);\n    ctx.fillRect(upperLeft.x, upperLeft.y, maxTextWidth, textHeight);\n    ctx.fillStyle = fontColor;\n    this.text.forEach(function (textLine, i) {\n      var x = padding + upperLeft.x;\n      var y = padding + upperLeft.y + (i + 1) * fontSize;\n      ctx.fillText(textLine, x, y);\n    });\n  };\n\n  return DrawTextField;\n}();\n\nexport { DrawTextField };","map":{"version":3,"sources":["../../../src/draw/DrawTextField.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getContext2dOrThrow } from '../dom/getContext2dOrThrow';\r\nimport { resolveInput } from '../dom/resolveInput';\r\nexport var AnchorPosition;\r\n(function (AnchorPosition) {\r\n    AnchorPosition[\"TOP_LEFT\"] = \"TOP_LEFT\";\r\n    AnchorPosition[\"TOP_RIGHT\"] = \"TOP_RIGHT\";\r\n    AnchorPosition[\"BOTTOM_LEFT\"] = \"BOTTOM_LEFT\";\r\n    AnchorPosition[\"BOTTOM_RIGHT\"] = \"BOTTOM_RIGHT\";\r\n})(AnchorPosition || (AnchorPosition = {}));\r\nvar DrawTextFieldOptions = /** @class */ (function () {\r\n    function DrawTextFieldOptions(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var anchorPosition = options.anchorPosition, backgroundColor = options.backgroundColor, fontColor = options.fontColor, fontSize = options.fontSize, fontStyle = options.fontStyle, padding = options.padding;\r\n        this.anchorPosition = anchorPosition || AnchorPosition.TOP_LEFT;\r\n        this.backgroundColor = backgroundColor || 'rgba(0, 0, 0, 0.5)';\r\n        this.fontColor = fontColor || 'rgba(255, 255, 255, 1)';\r\n        this.fontSize = fontSize || 14;\r\n        this.fontStyle = fontStyle || 'Georgia';\r\n        this.padding = padding || 4;\r\n    }\r\n    return DrawTextFieldOptions;\r\n}());\r\nexport { DrawTextFieldOptions };\r\nvar DrawTextField = /** @class */ (function () {\r\n    function DrawTextField(text, anchor, options) {\r\n        if (options === void 0) { options = {}; }\r\n        this.text = typeof text === 'string'\r\n            ? [text]\r\n            : (text instanceof DrawTextField ? text.text : text);\r\n        this.anchor = anchor;\r\n        this.options = new DrawTextFieldOptions(options);\r\n    }\r\n    DrawTextField.prototype.measureWidth = function (ctx) {\r\n        var padding = this.options.padding;\r\n        return this.text.map(function (l) { return ctx.measureText(l).width; }).reduce(function (w0, w1) { return w0 < w1 ? w1 : w0; }, 0) + (2 * padding);\r\n    };\r\n    DrawTextField.prototype.measureHeight = function () {\r\n        var _a = this.options, fontSize = _a.fontSize, padding = _a.padding;\r\n        return this.text.length * fontSize + (2 * padding);\r\n    };\r\n    DrawTextField.prototype.getUpperLeft = function (ctx, canvasDims) {\r\n        var anchorPosition = this.options.anchorPosition;\r\n        var isShiftLeft = anchorPosition === AnchorPosition.BOTTOM_RIGHT || anchorPosition === AnchorPosition.TOP_RIGHT;\r\n        var isShiftTop = anchorPosition === AnchorPosition.BOTTOM_LEFT || anchorPosition === AnchorPosition.BOTTOM_RIGHT;\r\n        var textFieldWidth = this.measureWidth(ctx);\r\n        var textFieldHeight = this.measureHeight();\r\n        var x = (isShiftLeft ? this.anchor.x - textFieldWidth : this.anchor.x);\r\n        var y = isShiftTop ? this.anchor.y - textFieldHeight : this.anchor.y;\r\n        // adjust anchor if text box exceeds canvas borders\r\n        if (canvasDims) {\r\n            var width = canvasDims.width, height = canvasDims.height;\r\n            var newX = Math.max(Math.min(x, width - textFieldWidth), 0);\r\n            var newY = Math.max(Math.min(y, height - textFieldHeight), 0);\r\n            return { x: newX, y: newY };\r\n        }\r\n        return { x: x, y: y };\r\n    };\r\n    DrawTextField.prototype.draw = function (canvasArg) {\r\n        var canvas = resolveInput(canvasArg);\r\n        var ctx = getContext2dOrThrow(canvas);\r\n        var _a = this.options, backgroundColor = _a.backgroundColor, fontColor = _a.fontColor, fontSize = _a.fontSize, fontStyle = _a.fontStyle, padding = _a.padding;\r\n        ctx.font = fontSize + \"px \" + fontStyle;\r\n        var maxTextWidth = this.measureWidth(ctx);\r\n        var textHeight = this.measureHeight();\r\n        ctx.fillStyle = backgroundColor;\r\n        var upperLeft = this.getUpperLeft(ctx, canvas);\r\n        ctx.fillRect(upperLeft.x, upperLeft.y, maxTextWidth, textHeight);\r\n        ctx.fillStyle = fontColor;\r\n        this.text.forEach(function (textLine, i) {\r\n            var x = padding + upperLeft.x;\r\n            var y = padding + upperLeft.y + ((i + 1) * fontSize);\r\n            ctx.fillText(textLine, x, y);\r\n        });\r\n    };\r\n    return DrawTextField;\r\n}());\r\nexport { DrawTextField };\r\n//# sourceMappingURL=DrawTextField.js.map"]},"metadata":{},"sourceType":"module"}