{"ast":null,"code":"'use strict';\n\nfunction isArguments(thingy) {\n  return thingy != null && typeof thingy === 'object' && thingy.hasOwnProperty('callee');\n}\n\nvar types = {\n  '*': {\n    label: 'any',\n    check: function check() {\n      return true;\n    }\n  },\n  A: {\n    label: 'array',\n    check: function check(thingy) {\n      return Array.isArray(thingy) || isArguments(thingy);\n    }\n  },\n  S: {\n    label: 'string',\n    check: function check(thingy) {\n      return typeof thingy === 'string';\n    }\n  },\n  N: {\n    label: 'number',\n    check: function check(thingy) {\n      return typeof thingy === 'number';\n    }\n  },\n  F: {\n    label: 'function',\n    check: function check(thingy) {\n      return typeof thingy === 'function';\n    }\n  },\n  O: {\n    label: 'object',\n    check: function check(thingy) {\n      return typeof thingy === 'object' && thingy != null && !types.A.check(thingy) && !types.E.check(thingy);\n    }\n  },\n  B: {\n    label: 'boolean',\n    check: function check(thingy) {\n      return typeof thingy === 'boolean';\n    }\n  },\n  E: {\n    label: 'error',\n    check: function check(thingy) {\n      return thingy instanceof Error;\n    }\n  },\n  Z: {\n    label: 'null',\n    check: function check(thingy) {\n      return thingy == null;\n    }\n  }\n};\n\nfunction addSchema(schema, arity) {\n  var group = arity[schema.length] = arity[schema.length] || [];\n  if (group.indexOf(schema) === -1) group.push(schema);\n}\n\nvar validate = module.exports = function (rawSchemas, args) {\n  if (arguments.length !== 2) throw wrongNumberOfArgs(['SA'], arguments.length);\n  if (!rawSchemas) throw missingRequiredArg(0, 'rawSchemas');\n  if (!args) throw missingRequiredArg(1, 'args');\n  if (!types.S.check(rawSchemas)) throw invalidType(0, ['string'], rawSchemas);\n  if (!types.A.check(args)) throw invalidType(1, ['array'], args);\n  var schemas = rawSchemas.split('|');\n  var arity = {};\n  schemas.forEach(function (schema) {\n    for (var ii = 0; ii < schema.length; ++ii) {\n      var type = schema[ii];\n      if (!types[type]) throw unknownType(ii, type);\n    }\n\n    if (/E.*E/.test(schema)) throw moreThanOneError(schema);\n    addSchema(schema, arity);\n\n    if (/E/.test(schema)) {\n      addSchema(schema.replace(/E.*$/, 'E'), arity);\n      addSchema(schema.replace(/E/, 'Z'), arity);\n      if (schema.length === 1) addSchema('', arity);\n    }\n  });\n  var matching = arity[args.length];\n\n  if (!matching) {\n    throw wrongNumberOfArgs(Object.keys(arity), args.length);\n  }\n\n  for (var ii = 0; ii < args.length; ++ii) {\n    var newMatching = matching.filter(function (schema) {\n      var type = schema[ii];\n      var typeCheck = types[type].check;\n      return typeCheck(args[ii]);\n    });\n\n    if (!newMatching.length) {\n      var labels = matching.map(function (schema) {\n        return types[schema[ii]].label;\n      }).filter(function (schema) {\n        return schema != null;\n      });\n      throw invalidType(ii, labels, args[ii]);\n    }\n\n    matching = newMatching;\n  }\n};\n\nfunction missingRequiredArg(num) {\n  return newException('EMISSINGARG', 'Missing required argument #' + (num + 1));\n}\n\nfunction unknownType(num, type) {\n  return newException('EUNKNOWNTYPE', 'Unknown type ' + type + ' in argument #' + (num + 1));\n}\n\nfunction invalidType(num, expectedTypes, value) {\n  var valueType;\n  Object.keys(types).forEach(function (typeCode) {\n    if (types[typeCode].check(value)) valueType = types[typeCode].label;\n  });\n  return newException('EINVALIDTYPE', 'Argument #' + (num + 1) + ': Expected ' + englishList(expectedTypes) + ' but got ' + valueType);\n}\n\nfunction englishList(list) {\n  return list.join(', ').replace(/, ([^,]+)$/, ' or $1');\n}\n\nfunction wrongNumberOfArgs(expected, got) {\n  var english = englishList(expected);\n  var args = expected.every(function (ex) {\n    return ex.length === 1;\n  }) ? 'argument' : 'arguments';\n  return newException('EWRONGARGCOUNT', 'Expected ' + english + ' ' + args + ' but got ' + got);\n}\n\nfunction moreThanOneError(schema) {\n  return newException('ETOOMANYERRORTYPES', 'Only one error type per argument signature is allowed, more than one found in \"' + schema + '\"');\n}\n\nfunction newException(code, msg) {\n  var e = new Error(msg);\n  e.code = code;\n  if (Error.captureStackTrace) Error.captureStackTrace(e, validate);\n  return e;\n}","map":null,"metadata":{},"sourceType":"script"}