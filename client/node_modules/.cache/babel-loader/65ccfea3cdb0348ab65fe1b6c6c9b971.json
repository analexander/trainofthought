{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2DBackpropFilter } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the filter of a 2D convolution.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.\n * @param dy The dy image, of rank 4 or rank 3, of shape\n *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.\n * @param filterShape The shape of the filter, length 4,\n *     [filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\n\nfunction conv2DBackpropFilter_(x, dy, filterShape, strides, pad) {\n  var dataFormat = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'NHWC';\n  var dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  var x4D = x;\n\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n\n  var dy4D = dy;\n\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n\n  util.assert(x4D.rank === 4, function () {\n    return \"Error in conv2dDerFilter: input must be rank 4, but got shape \" + \"\".concat(x4D.shape, \".\");\n  });\n  util.assert(dy4D.rank === 4, function () {\n    return \"Error in conv2dDerFilter: dy must be rank 4, but got shape \" + \"\".concat(dy4D.shape, \".\");\n  });\n  util.assert(filterShape.length === 4, function () {\n    return \"Error in conv2dDerFilter: filterShape must be length 4, but got \" + \"\".concat(filterShape, \".\");\n  });\n  var inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  var outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(inDepth === filterShape[2], function () {\n    return \"Error in conv2dDerFilter: depth of input \".concat(inDepth, \") must \") + \"match input depth in filter (\".concat(filterShape[2], \".\");\n  });\n  util.assert(outDepth === filterShape[3], function () {\n    return \"Error in conv2dDerFilter: depth of dy (\".concat(outDepth, \") must \") + \"match output depth for filter (\".concat(filterShape[3], \").\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in conv2dDerFilter: pad must be an integer when using, \" + \"dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\");\n    });\n  }\n\n  var forward = function forward(backend) {\n    var dilations = 1;\n    var $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);\n    var convInfo = conv_util.computeConv2DInfo(x4D.shape, filterShape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);\n    return backend.conv2dDerFilter(x4D, dy4D, convInfo);\n  };\n\n  var inputs = {\n    x: x4D,\n    dy: dy4D\n  };\n  var attrs = {\n    strides: strides,\n    pad: pad,\n    dataFormat: dataFormat,\n    dimRoundingMode: dimRoundingMode,\n    filterShape: filterShape\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null, Conv2DBackpropFilter, attrs);\n}\n\nexport var conv2DBackpropFilter = op({\n  conv2DBackpropFilter_: conv2DBackpropFilter_\n});","map":null,"metadata":{},"sourceType":"module"}