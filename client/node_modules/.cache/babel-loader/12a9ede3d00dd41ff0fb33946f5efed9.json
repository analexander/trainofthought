{"ast":null,"code":"import _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport var EncodeMatrixProgram = function EncodeMatrixProgram(outputShape, texShape) {\n  var inputIsUnsignedByte = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  _classCallCheck(this, EncodeMatrixProgram);\n\n  this.variableNames = ['A'];\n  var glsl = getGlslDifferences();\n\n  var _texShape = _slicedToArray(texShape, 2),\n      height = _texShape[0],\n      width = _texShape[1];\n\n  this.outputShape = outputShape;\n  var output = \"result\";\n\n  if (inputIsUnsignedByte) {\n    output = \"floor(result * 255. + 0.5)\";\n  }\n\n  this.userCode = \"\\n      \".concat(shader_util.getFlatIndexFrom3D(outputShape), \"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        int flatIndex = getFlatIndex(coords);\\n        int offset = imod(flatIndex, 4);\\n\\n        flatIndex = idiv(flatIndex, 4, 1.);\\n\\n        int r = flatIndex / \").concat(width, \";\\n        int c = imod(flatIndex, \").concat(width, \");\\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(\").concat(width, \".0, \").concat(height, \".0);\\n        vec4 values = \").concat(glsl.texture2D, \"(A, uv);\\n\\n        float result;\\n\\n        if(offset == 0) {\\n          result = values[0];\\n        } else if(offset == 1) {\\n          result = values[1];\\n        } else if(offset == 2) {\\n          result = values[2];\\n        } else {\\n          result = values[3];\\n        }\\n\\n        \").concat(glsl.output, \" = vec4(\").concat(output, \", 0., 0., 0.);\\n      }\\n    \");\n};","map":null,"metadata":{},"sourceType":"module"}