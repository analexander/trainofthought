{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { denseBlock4 } from './denseBlock';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\n\nvar FaceFeatureExtractor =\n/** @class */\nfunction (_super) {\n  __extends(FaceFeatureExtractor, _super);\n\n  function FaceFeatureExtractor() {\n    return _super.call(this, 'FaceFeatureExtractor') || this;\n  }\n\n  FaceFeatureExtractor.prototype.forwardInput = function (input) {\n    var params = this.params;\n\n    if (!params) {\n      throw new Error('FaceFeatureExtractor - load model before inference');\n    }\n\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(255));\n      var out = denseBlock4(normalized, params.dense0, true);\n      out = denseBlock4(out, params.dense1);\n      out = denseBlock4(out, params.dense2);\n      out = denseBlock4(out, params.dense3);\n      out = tf.avgPool(out, [7, 7], [2, 2], 'valid');\n      return out;\n    });\n  };\n\n  FaceFeatureExtractor.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n\n  FaceFeatureExtractor.prototype.getDefaultModelName = function () {\n    return 'face_feature_extractor_model';\n  };\n\n  FaceFeatureExtractor.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap);\n  };\n\n  FaceFeatureExtractor.prototype.extractParams = function (weights) {\n    return extractParams(weights);\n  };\n\n  return FaceFeatureExtractor;\n}(NeuralNetwork);\n\nexport { FaceFeatureExtractor };","map":{"version":3,"sources":["../../../src/faceFeatureExtractor/FaceFeatureExtractor.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAZ,MAAoB,uBAApB;AAEA,SAA8B,UAA9B,QAAgD,QAAhD;AACA,SAAS,aAAT,QAA8B,kBAA9B;AACA,SAAS,SAAT,QAA0B,QAA1B;AACA,SAAS,WAAT,QAA4B,cAA5B;AACA,SAAS,aAAT,QAA8B,iBAA9B;AACA,SAAS,0BAAT,QAA2C,8BAA3C;;AAGA,IAAA,oBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,SAAA,CAAA,oBAAA,EAAA,MAAA,CAAA;;AAExC,WAAA,oBAAA,GAAA;WACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,sBAAN,KAA6B,I;AAC9B;;AAEM,EAAA,oBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,KAApB,EAAmC;AAEzB,QAAA,MAAA,GAAA,KAAA,MAAA;;AAER,QAAI,CAAC,MAAL,EAAa;AACX,YAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,WAAO,EAAE,CAAC,IAAH,CAAQ,YAAA;AACb,UAAM,WAAW,GAAG,KAAK,CAAC,aAAN,CAAoB,GAApB,EAAyB,IAAzB,CAApB;AACA,UAAM,OAAO,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAAhB;AACA,UAAM,UAAU,GAAG,SAAS,CAAC,WAAD,EAAc,OAAd,CAAT,CAAgC,GAAhC,CAAoC,EAAE,CAAC,MAAH,CAAU,GAAV,CAApC,CAAnB;AAEA,UAAI,GAAG,GAAG,WAAW,CAAC,UAAD,EAAa,MAAM,CAAC,MAApB,EAA4B,IAA5B,CAArB;AACA,MAAA,GAAG,GAAG,WAAW,CAAC,GAAD,EAAM,MAAM,CAAC,MAAb,CAAjB;AACA,MAAA,GAAG,GAAG,WAAW,CAAC,GAAD,EAAM,MAAM,CAAC,MAAb,CAAjB;AACA,MAAA,GAAG,GAAG,WAAW,CAAC,GAAD,EAAM,MAAM,CAAC,MAAb,CAAjB;AACA,MAAA,GAAG,GAAG,EAAE,CAAC,OAAH,CAAW,GAAX,EAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,EAAgC,OAAhC,CAAN;AAEA,aAAO,GAAP;AACD,KAZM,CAAP;AAaD,GArBM;;AAuBM,EAAA,oBAAA,CAAA,SAAA,CAAA,OAAA,GAAb,UAAqB,KAArB,EAAqC;;;;;;;AAC5B,YAAA,EAAA,GAAA,KAAK,YAAL;AAAkB,mBAAA,CAAA;AAAA;AAAA,cAAM,UAAU,CAAC,KAAD,CAAhB,CAAA;;;AAAzB,mBAAA,CAAA;AAAA;AAAA,cAAO,EAAA,CAAA,KAAA,CAAA,IAAA,EAAI,CAAc,EAAA,CAAA,IAAA,EAAd,CAAJ,CAAP,CAAA;;;;AACD,GAFY;;AAIH,EAAA,oBAAA,CAAA,SAAA,CAAA,mBAAA,GAAV,YAAA;AACE,WAAO,8BAAP;AACD,GAFS;;AAIA,EAAA,oBAAA,CAAA,SAAA,CAAA,0BAAA,GAAV,UAAqC,SAArC,EAAiE;AAC/D,WAAO,0BAA0B,CAAC,SAAD,CAAjC;AACD,GAFS;;AAIA,EAAA,oBAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UAAwB,OAAxB,EAA6C;AAC3C,WAAO,aAAa,CAAC,OAAD,CAApB;AACD,GAFS;;AAGZ,SAAA,oBAAA;AAAC,CA5CD,CAA0C,aAA1C,CAAA","sourceRoot":"","sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { toNetInput } from '../dom';\r\nimport { NeuralNetwork } from '../NeuralNetwork';\r\nimport { normalize } from '../ops';\r\nimport { denseBlock4 } from './denseBlock';\r\nimport { extractParams } from './extractParams';\r\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\r\nvar FaceFeatureExtractor = /** @class */ (function (_super) {\r\n    __extends(FaceFeatureExtractor, _super);\r\n    function FaceFeatureExtractor() {\r\n        return _super.call(this, 'FaceFeatureExtractor') || this;\r\n    }\r\n    FaceFeatureExtractor.prototype.forwardInput = function (input) {\r\n        var params = this.params;\r\n        if (!params) {\r\n            throw new Error('FaceFeatureExtractor - load model before inference');\r\n        }\r\n        return tf.tidy(function () {\r\n            var batchTensor = input.toBatchTensor(112, true);\r\n            var meanRgb = [122.782, 117.001, 104.298];\r\n            var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(255));\r\n            var out = denseBlock4(normalized, params.dense0, true);\r\n            out = denseBlock4(out, params.dense1);\r\n            out = denseBlock4(out, params.dense2);\r\n            out = denseBlock4(out, params.dense3);\r\n            out = tf.avgPool(out, [7, 7], [2, 2], 'valid');\r\n            return out;\r\n        });\r\n    };\r\n    FaceFeatureExtractor.prototype.forward = function (input) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = this.forwardInput;\r\n                        return [4 /*yield*/, toNetInput(input)];\r\n                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    FaceFeatureExtractor.prototype.getDefaultModelName = function () {\r\n        return 'face_feature_extractor_model';\r\n    };\r\n    FaceFeatureExtractor.prototype.extractParamsFromWeigthMap = function (weightMap) {\r\n        return extractParamsFromWeigthMap(weightMap);\r\n    };\r\n    FaceFeatureExtractor.prototype.extractParams = function (weights) {\r\n        return extractParams(weights);\r\n    };\r\n    return FaceFeatureExtractor;\r\n}(NeuralNetwork));\r\nexport { FaceFeatureExtractor };\r\n//# sourceMappingURL=FaceFeatureExtractor.js.map"]},"metadata":{},"sourceType":"module"}