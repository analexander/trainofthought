{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { FFT } from '../../kernel_names';\nimport { assert } from '../../util';\nimport { op } from '../operation';\n/**\n * Fast Fourier transform.\n *\n * Computes the 1-dimensional discrete Fourier transform over the inner-most\n * dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.fft().print();  // tf.spectral.fft(x).print();\n * ```\n * @param input The complex input to compute an fft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\n\nfunction fft_(input) {\n  assert(input.dtype === 'complex64', function () {\n    return \"The dtype for tf.spectral.fft() must be complex64 \" + \"but got \".concat(input.dtype, \".\");\n  });\n  var inputs = {\n    input: input\n  };\n  return ENGINE.runKernelFunc(function (backend) {\n    // Collapse all outer dimensions to a single batch dimension.\n    var innerDimensionSize = input.shape[input.shape.length - 1];\n    var batch = input.size / innerDimensionSize;\n    var input2D = input.as2D(batch, innerDimensionSize);\n    var result = backend.fft(input2D);\n    return result.reshape(input.shape);\n  }, inputs, null\n  /* gradient */\n  , FFT);\n}\n\nexport var fft = op({\n  fft_: fft_\n});","map":null,"metadata":{},"sourceType":"module"}