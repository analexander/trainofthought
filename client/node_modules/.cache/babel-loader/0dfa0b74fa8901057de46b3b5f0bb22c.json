{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { conv2D } from './Conv2D';\nexport function fusedConv2D(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      filter = inputs.filter,\n      bias = inputs.bias,\n      preluActivationWeights = inputs.preluActivationWeights;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dataFormat = attrs.dataFormat,\n      dilations = attrs.dilations,\n      dimRoundingMode = attrs.dimRoundingMode,\n      activation = attrs.activation;\n  var result = conv2D({\n    inputs: {\n      x: x,\n      filter: filter\n    },\n    backend: backend,\n    attrs: {\n      strides: strides,\n      pad: pad,\n      dataFormat: dataFormat,\n      dilations: dilations,\n      dimRoundingMode: dimRoundingMode\n    }\n  });\n\n  if (bias) {\n    var resultOld = result;\n    result = add({\n      inputs: {\n        a: result,\n        b: bias\n      },\n      backend: backend\n    });\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    var _resultOld = result;\n    result = applyActivation(backend, result, activation, preluActivationWeights);\n    backend.disposeIntermediateTensorInfo(_resultOld);\n  }\n\n  return result;\n}\nexport var fusedConv2DConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D\n};","map":null,"metadata":{},"sourceType":"module"}