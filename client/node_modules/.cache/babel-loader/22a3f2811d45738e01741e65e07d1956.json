{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var DepthwiseConv2DDerFilterProgram = function DepthwiseConv2DDerFilterProgram(convInfo) {\n  _classCallCheck(this, DepthwiseConv2DDerFilterProgram);\n\n  this.variableNames = ['x', 'dy'];\n  this.outputShape = convInfo.filterShape;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var padTop = convInfo.padInfo.top;\n  var padLeft = convInfo.padInfo.left;\n  var channelMul = convInfo.outChannels / convInfo.inChannels;\n  this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int dm = coords.w;\\n        int d2 = d1 * \".concat(channelMul, \" + dm;\\n\\n        float dotProd = 0.0;\\n\\n        // TO DO: Vec4 over the batch size\\n        for (int b = 0; b < \").concat(convInfo.batchSize, \"; b++) {\\n          for (int yR = 0; yR < \").concat(convInfo.outHeight, \"; yR++) {\\n            int xR = wR + yR * \").concat(strideHeight, \" - \").concat(padTop, \";\\n\\n            if (xR < 0 || xR >= \").concat(convInfo.inHeight, \") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \").concat(convInfo.outWidth, \"; yC++) {\\n              int xC = wC + yC * \").concat(strideWidth, \" - \").concat(padLeft, \";\\n\\n              if (xC < 0 || xC >= \").concat(convInfo.inWidth, \") {\\n                continue;\\n              }\\n\\n              float dyValue = getDy(b, yR, yC, d2);\\n              float xValue = getX(b, xR, xC, d1);\\n              dotProd += (xValue * dyValue);\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n};\nexport var DepthwiseConv2DDerInputProgram = function DepthwiseConv2DDerInputProgram(convInfo) {\n  _classCallCheck(this, DepthwiseConv2DDerInputProgram);\n\n  this.variableNames = ['dy', 'W'];\n  this.outputShape = convInfo.inShape;\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var padTop = filterHeight - 1 - convInfo.padInfo.top;\n  var padLeft = filterWidth - 1 - convInfo.padInfo.left;\n  var channelMul = convInfo.outChannels / convInfo.inChannels;\n  this.userCode = \"\\n      const ivec2 pads = ivec2(\".concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n        ivec2 dyCorner = coords.yz - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        float dotProd = 0.0;\\n\\n        for (int wR = 0; wR < \").concat(filterHeight, \"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \").concat(strideHeight, \".0;\\n\\n          if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight, \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \").concat(filterHeight, \" - 1 - wR;\\n\\n          for (int wC = 0; wC < \").concat(filterWidth, \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \").concat(strideWidth, \".0;\\n\\n            if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth, \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \").concat(filterWidth, \" - 1 - wC;\\n\\n            // TO DO: Vec4 over the channelMul\\n            for (int dm = 0; dm < \").concat(channelMul, \"; dm++) {\\n              int d2 = d1 * \").concat(channelMul, \" + dm;\\n              float xValue = getDy(batch, idyR, idyC, d2);\\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\\n              dotProd += xValue * wValue;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n};","map":null,"metadata":{},"sourceType":"module"}