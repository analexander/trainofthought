{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { BaseConv, preprocessConv2DInput } from './convolutional';\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\n\nexport function depthwiseConv2d(x, depthwiseKernel) {\n  var strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [1, 1];\n  var padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  var dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  var dilationRate = arguments.length > 5 ? arguments[5] : undefined;\n  return tidy(function () {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n    var y = preprocessConv2DInput(x, dataFormat);\n\n    if (x.rank !== 4) {\n      throw new ValueError(\"Input for depthwiseConv2d is required to be 4-D, but is instead \" + \"\".concat(x.rank, \"-D\"));\n    }\n\n    if (depthwiseKernel.rank !== 4) {\n      throw new ValueError(\"depthwiseKernel is required to be 4-D, but is instead \" + \"\".concat(depthwiseKernel.rank, \"-D\"));\n    }\n\n    y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n\n    return y;\n  });\n}\nexport var DepthwiseConv2D = /*#__PURE__*/function (_BaseConv) {\n  _inherits(DepthwiseConv2D, _BaseConv);\n\n  function DepthwiseConv2D(args) {\n    var _this;\n\n    _classCallCheck(this, DepthwiseConv2D);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DepthwiseConv2D).call(this, 2, args));\n    _this.depthwiseKernel = null;\n    _this.depthMultiplier = args.depthMultiplier == null ? 1 : args.depthMultiplier;\n    _this.depthwiseInitializer = getInitializer(args.depthwiseInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n    _this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n    _this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n    return _this;\n  }\n\n  _createClass(DepthwiseConv2D, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n\n      if (inputShape.length < 4) {\n        throw new ValueError(\"Inputs to DepthwiseConv2D should have rank 4. \" + \"Received input shape: \".concat(JSON.stringify(inputShape), \".\"));\n      }\n\n      var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n\n      if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n        throw new ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' + \"be defined, but is not (\".concat(inputShape[channelAxis], \").\"));\n      }\n\n      var inputDim = inputShape[channelAxis];\n      var depthwiseKernelShape = [this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier];\n      this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n\n      if (this.useBias) {\n        this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n      } else {\n        this.bias = null;\n      }\n\n      this.built = true;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n\n      return tidy(function () {\n        inputs = getExactlyOneTensor(inputs);\n        var outputs = depthwiseConv2d(inputs, _this2.depthwiseKernel.read(), _this2.strides, _this2.padding, _this2.dataFormat, null); // TODO(cais): Add support for dilation.\n\n        if (_this2.useBias) {\n          outputs = K.biasAdd(outputs, _this2.bias.read(), _this2.dataFormat);\n        }\n\n        if (_this2.activation != null) {\n          outputs = _this2.activation.apply(outputs);\n        }\n\n        return outputs;\n      });\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n      var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n      var outFilters = this.dataFormat === 'channelsFirst' ? inputShape[1] * this.depthMultiplier : inputShape[3] * this.depthMultiplier;\n      var outRows = convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n      var outCols = convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n\n      if (this.dataFormat === 'channelsFirst') {\n        return [inputShape[0], outFilters, outRows, outCols];\n      } else {\n        // In this case, assume 'channelsLast'.\n        return [inputShape[0], outRows, outCols, outFilters];\n      }\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = _get(_getPrototypeOf(DepthwiseConv2D.prototype), \"getConfig\", this).call(this);\n\n      config['depthMultiplier'] = this.depthMultiplier;\n      config['depthwiseInitializer'] = serializeInitializer(this.depthwiseInitializer);\n      config['depthwiseRegularizer'] = serializeRegularizer(this.depthwiseRegularizer);\n      config['depthwiseConstraint'] = serializeConstraint(this.depthwiseRegularizer);\n      return config;\n    }\n  }]);\n\n  return DepthwiseConv2D;\n}(BaseConv);\n/** @nocollapse */\n\nDepthwiseConv2D.className = 'DepthwiseConv2D';\nserialization.registerClass(DepthwiseConv2D);","map":null,"metadata":{},"sourceType":"module"}