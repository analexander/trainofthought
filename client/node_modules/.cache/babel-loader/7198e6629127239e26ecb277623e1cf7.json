{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { extractConvParamsFactory, extractFCParamsFactory, extractWeightsFactory } from '../common';\n\nfunction extractorsFactory(extractWeights, paramMappings) {\n  var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);\n  var extractFCParams = extractFCParamsFactory(extractWeights, paramMappings);\n\n  function extractPReluParams(size, paramPath) {\n    var alpha = tf.tensor1d(extractWeights(size));\n    paramMappings.push({\n      paramPath: paramPath\n    });\n    return alpha;\n  }\n\n  function extractSharedParams(numFilters, mappedPrefix, isRnet) {\n    if (isRnet === void 0) {\n      isRnet = false;\n    }\n\n    var conv1 = extractConvParams(numFilters[0], numFilters[1], 3, mappedPrefix + \"/conv1\");\n    var prelu1_alpha = extractPReluParams(numFilters[1], mappedPrefix + \"/prelu1_alpha\");\n    var conv2 = extractConvParams(numFilters[1], numFilters[2], 3, mappedPrefix + \"/conv2\");\n    var prelu2_alpha = extractPReluParams(numFilters[2], mappedPrefix + \"/prelu2_alpha\");\n    var conv3 = extractConvParams(numFilters[2], numFilters[3], isRnet ? 2 : 3, mappedPrefix + \"/conv3\");\n    var prelu3_alpha = extractPReluParams(numFilters[3], mappedPrefix + \"/prelu3_alpha\");\n    return {\n      conv1: conv1,\n      prelu1_alpha: prelu1_alpha,\n      conv2: conv2,\n      prelu2_alpha: prelu2_alpha,\n      conv3: conv3,\n      prelu3_alpha: prelu3_alpha\n    };\n  }\n\n  function extractPNetParams() {\n    var sharedParams = extractSharedParams([3, 10, 16, 32], 'pnet');\n    var conv4_1 = extractConvParams(32, 2, 1, 'pnet/conv4_1');\n    var conv4_2 = extractConvParams(32, 4, 1, 'pnet/conv4_2');\n    return __assign(__assign({}, sharedParams), {\n      conv4_1: conv4_1,\n      conv4_2: conv4_2\n    });\n  }\n\n  function extractRNetParams() {\n    var sharedParams = extractSharedParams([3, 28, 48, 64], 'rnet', true);\n    var fc1 = extractFCParams(576, 128, 'rnet/fc1');\n    var prelu4_alpha = extractPReluParams(128, 'rnet/prelu4_alpha');\n    var fc2_1 = extractFCParams(128, 2, 'rnet/fc2_1');\n    var fc2_2 = extractFCParams(128, 4, 'rnet/fc2_2');\n    return __assign(__assign({}, sharedParams), {\n      fc1: fc1,\n      prelu4_alpha: prelu4_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2\n    });\n  }\n\n  function extractONetParams() {\n    var sharedParams = extractSharedParams([3, 32, 64, 64], 'onet');\n    var conv4 = extractConvParams(64, 128, 2, 'onet/conv4');\n    var prelu4_alpha = extractPReluParams(128, 'onet/prelu4_alpha');\n    var fc1 = extractFCParams(1152, 256, 'onet/fc1');\n    var prelu5_alpha = extractPReluParams(256, 'onet/prelu5_alpha');\n    var fc2_1 = extractFCParams(256, 2, 'onet/fc2_1');\n    var fc2_2 = extractFCParams(256, 4, 'onet/fc2_2');\n    var fc2_3 = extractFCParams(256, 10, 'onet/fc2_3');\n    return __assign(__assign({}, sharedParams), {\n      conv4: conv4,\n      prelu4_alpha: prelu4_alpha,\n      fc1: fc1,\n      prelu5_alpha: prelu5_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2,\n      fc2_3: fc2_3\n    });\n  }\n\n  return {\n    extractPNetParams: extractPNetParams,\n    extractRNetParams: extractRNetParams,\n    extractONetParams: extractONetParams\n  };\n}\n\nexport function extractParams(weights) {\n  var _a = extractWeightsFactory(weights),\n      extractWeights = _a.extractWeights,\n      getRemainingWeights = _a.getRemainingWeights;\n\n  var paramMappings = [];\n\n  var _b = extractorsFactory(extractWeights, paramMappings),\n      extractPNetParams = _b.extractPNetParams,\n      extractRNetParams = _b.extractRNetParams,\n      extractONetParams = _b.extractONetParams;\n\n  var pnet = extractPNetParams();\n  var rnet = extractRNetParams();\n  var onet = extractONetParams();\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\n  }\n\n  return {\n    params: {\n      pnet: pnet,\n      rnet: rnet,\n      onet: onet\n    },\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"sources":["../../../src/mtcnn/extractParams.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { extractConvParamsFactory, extractFCParamsFactory, extractWeightsFactory, } from '../common';\r\nfunction extractorsFactory(extractWeights, paramMappings) {\r\n    var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);\r\n    var extractFCParams = extractFCParamsFactory(extractWeights, paramMappings);\r\n    function extractPReluParams(size, paramPath) {\r\n        var alpha = tf.tensor1d(extractWeights(size));\r\n        paramMappings.push({ paramPath: paramPath });\r\n        return alpha;\r\n    }\r\n    function extractSharedParams(numFilters, mappedPrefix, isRnet) {\r\n        if (isRnet === void 0) { isRnet = false; }\r\n        var conv1 = extractConvParams(numFilters[0], numFilters[1], 3, mappedPrefix + \"/conv1\");\r\n        var prelu1_alpha = extractPReluParams(numFilters[1], mappedPrefix + \"/prelu1_alpha\");\r\n        var conv2 = extractConvParams(numFilters[1], numFilters[2], 3, mappedPrefix + \"/conv2\");\r\n        var prelu2_alpha = extractPReluParams(numFilters[2], mappedPrefix + \"/prelu2_alpha\");\r\n        var conv3 = extractConvParams(numFilters[2], numFilters[3], isRnet ? 2 : 3, mappedPrefix + \"/conv3\");\r\n        var prelu3_alpha = extractPReluParams(numFilters[3], mappedPrefix + \"/prelu3_alpha\");\r\n        return { conv1: conv1, prelu1_alpha: prelu1_alpha, conv2: conv2, prelu2_alpha: prelu2_alpha, conv3: conv3, prelu3_alpha: prelu3_alpha };\r\n    }\r\n    function extractPNetParams() {\r\n        var sharedParams = extractSharedParams([3, 10, 16, 32], 'pnet');\r\n        var conv4_1 = extractConvParams(32, 2, 1, 'pnet/conv4_1');\r\n        var conv4_2 = extractConvParams(32, 4, 1, 'pnet/conv4_2');\r\n        return __assign(__assign({}, sharedParams), { conv4_1: conv4_1, conv4_2: conv4_2 });\r\n    }\r\n    function extractRNetParams() {\r\n        var sharedParams = extractSharedParams([3, 28, 48, 64], 'rnet', true);\r\n        var fc1 = extractFCParams(576, 128, 'rnet/fc1');\r\n        var prelu4_alpha = extractPReluParams(128, 'rnet/prelu4_alpha');\r\n        var fc2_1 = extractFCParams(128, 2, 'rnet/fc2_1');\r\n        var fc2_2 = extractFCParams(128, 4, 'rnet/fc2_2');\r\n        return __assign(__assign({}, sharedParams), { fc1: fc1, prelu4_alpha: prelu4_alpha, fc2_1: fc2_1, fc2_2: fc2_2 });\r\n    }\r\n    function extractONetParams() {\r\n        var sharedParams = extractSharedParams([3, 32, 64, 64], 'onet');\r\n        var conv4 = extractConvParams(64, 128, 2, 'onet/conv4');\r\n        var prelu4_alpha = extractPReluParams(128, 'onet/prelu4_alpha');\r\n        var fc1 = extractFCParams(1152, 256, 'onet/fc1');\r\n        var prelu5_alpha = extractPReluParams(256, 'onet/prelu5_alpha');\r\n        var fc2_1 = extractFCParams(256, 2, 'onet/fc2_1');\r\n        var fc2_2 = extractFCParams(256, 4, 'onet/fc2_2');\r\n        var fc2_3 = extractFCParams(256, 10, 'onet/fc2_3');\r\n        return __assign(__assign({}, sharedParams), { conv4: conv4, prelu4_alpha: prelu4_alpha, fc1: fc1, prelu5_alpha: prelu5_alpha, fc2_1: fc2_1, fc2_2: fc2_2, fc2_3: fc2_3 });\r\n    }\r\n    return {\r\n        extractPNetParams: extractPNetParams,\r\n        extractRNetParams: extractRNetParams,\r\n        extractONetParams: extractONetParams\r\n    };\r\n}\r\nexport function extractParams(weights) {\r\n    var _a = extractWeightsFactory(weights), extractWeights = _a.extractWeights, getRemainingWeights = _a.getRemainingWeights;\r\n    var paramMappings = [];\r\n    var _b = extractorsFactory(extractWeights, paramMappings), extractPNetParams = _b.extractPNetParams, extractRNetParams = _b.extractRNetParams, extractONetParams = _b.extractONetParams;\r\n    var pnet = extractPNetParams();\r\n    var rnet = extractRNetParams();\r\n    var onet = extractONetParams();\r\n    if (getRemainingWeights().length !== 0) {\r\n        throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\r\n    }\r\n    return { params: { pnet: pnet, rnet: rnet, onet: onet }, paramMappings: paramMappings };\r\n}\r\n//# sourceMappingURL=extractParams.js.map"]},"metadata":{},"sourceType":"module"}