{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { eye, linalg, mul, ones, randomUniform, scalar, serialization, tidy, truncatedNormal, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { checkDataFormat } from './common';\nimport { NotImplementedError, ValueError } from './errors';\nimport { VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES } from './keras_format/initializer_config';\nimport { checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nimport { arrayProd } from './utils/math_utils';\nexport function checkFanMode(value) {\n  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\nexport function checkDistribution(value) {\n  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\n\nexport var Initializer = /*#__PURE__*/function (_serialization$Serial) {\n  _inherits(Initializer, _serialization$Serial);\n\n  function Initializer() {\n    _classCallCheck(this, Initializer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Initializer).apply(this, arguments));\n  }\n\n  _createClass(Initializer, [{\n    key: \"fromConfigUsesCustomObjects\",\n    value: function fromConfigUsesCustomObjects() {\n      return false;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {};\n    }\n  }]);\n\n  return Initializer;\n}(serialization.Serializable);\nexport var Zeros = /*#__PURE__*/function (_Initializer) {\n  _inherits(Zeros, _Initializer);\n\n  function Zeros() {\n    _classCallCheck(this, Zeros);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Zeros).apply(this, arguments));\n  }\n\n  _createClass(Zeros, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      return zeros(shape, dtype);\n    }\n  }]);\n\n  return Zeros;\n}(Initializer);\n/** @nocollapse */\n\nZeros.className = 'Zeros';\nserialization.registerClass(Zeros);\nexport var Ones = /*#__PURE__*/function (_Initializer2) {\n  _inherits(Ones, _Initializer2);\n\n  function Ones() {\n    _classCallCheck(this, Ones);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Ones).apply(this, arguments));\n  }\n\n  _createClass(Ones, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      return ones(shape, dtype);\n    }\n  }]);\n\n  return Ones;\n}(Initializer);\n/** @nocollapse */\n\nOnes.className = 'Ones';\nserialization.registerClass(Ones);\nexport var Constant = /*#__PURE__*/function (_Initializer3) {\n  _inherits(Constant, _Initializer3);\n\n  function Constant(args) {\n    var _this;\n\n    _classCallCheck(this, Constant);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Constant).call(this));\n\n    if (typeof args !== 'object') {\n      throw new ValueError(\"Expected argument of type ConstantConfig but got \".concat(args));\n    }\n\n    if (args.value === undefined) {\n      throw new ValueError(\"config must have value set but got \".concat(args));\n    }\n\n    _this.value = args.value;\n    return _this;\n  }\n\n  _createClass(Constant, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      var _this2 = this;\n\n      return tidy(function () {\n        return mul(scalar(_this2.value), ones(shape, dtype));\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        value: this.value\n      };\n    }\n  }]);\n\n  return Constant;\n}(Initializer);\n/** @nocollapse */\n\nConstant.className = 'Constant';\nserialization.registerClass(Constant);\nexport var RandomUniform = /*#__PURE__*/function (_Initializer4) {\n  _inherits(RandomUniform, _Initializer4);\n\n  function RandomUniform(args) {\n    var _this3;\n\n    _classCallCheck(this, RandomUniform);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(RandomUniform).call(this));\n    _this3.DEFAULT_MINVAL = -0.05;\n    _this3.DEFAULT_MAXVAL = 0.05;\n    _this3.minval = args.minval || _this3.DEFAULT_MINVAL;\n    _this3.maxval = args.maxval || _this3.DEFAULT_MAXVAL;\n    _this3.seed = args.seed;\n    return _this3;\n  }\n\n  _createClass(RandomUniform, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      return randomUniform(shape, this.minval, this.maxval, dtype);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        minval: this.minval,\n        maxval: this.maxval,\n        seed: this.seed\n      };\n    }\n  }]);\n\n  return RandomUniform;\n}(Initializer);\n/** @nocollapse */\n\nRandomUniform.className = 'RandomUniform';\nserialization.registerClass(RandomUniform);\nexport var RandomNormal = /*#__PURE__*/function (_Initializer5) {\n  _inherits(RandomNormal, _Initializer5);\n\n  function RandomNormal(args) {\n    var _this4;\n\n    _classCallCheck(this, RandomNormal);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(RandomNormal).call(this));\n    _this4.DEFAULT_MEAN = 0.;\n    _this4.DEFAULT_STDDEV = 0.05;\n    _this4.mean = args.mean || _this4.DEFAULT_MEAN;\n    _this4.stddev = args.stddev || _this4.DEFAULT_STDDEV;\n    _this4.seed = args.seed;\n    return _this4;\n  }\n\n  _createClass(RandomNormal, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      dtype = dtype || 'float32';\n\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(\"randomNormal does not support dType \".concat(dtype, \".\"));\n      }\n\n      return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        mean: this.mean,\n        stddev: this.stddev,\n        seed: this.seed\n      };\n    }\n  }]);\n\n  return RandomNormal;\n}(Initializer);\n/** @nocollapse */\n\nRandomNormal.className = 'RandomNormal';\nserialization.registerClass(RandomNormal);\nexport var TruncatedNormal = /*#__PURE__*/function (_Initializer6) {\n  _inherits(TruncatedNormal, _Initializer6);\n\n  function TruncatedNormal(args) {\n    var _this5;\n\n    _classCallCheck(this, TruncatedNormal);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(TruncatedNormal).call(this));\n    _this5.DEFAULT_MEAN = 0.;\n    _this5.DEFAULT_STDDEV = 0.05;\n    _this5.mean = args.mean || _this5.DEFAULT_MEAN;\n    _this5.stddev = args.stddev || _this5.DEFAULT_STDDEV;\n    _this5.seed = args.seed;\n    return _this5;\n  }\n\n  _createClass(TruncatedNormal, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      dtype = dtype || 'float32';\n\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(\"truncatedNormal does not support dType \".concat(dtype, \".\"));\n      }\n\n      return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        mean: this.mean,\n        stddev: this.stddev,\n        seed: this.seed\n      };\n    }\n  }]);\n\n  return TruncatedNormal;\n}(Initializer);\n/** @nocollapse */\n\nTruncatedNormal.className = 'TruncatedNormal';\nserialization.registerClass(TruncatedNormal);\nexport var Identity = /*#__PURE__*/function (_Initializer7) {\n  _inherits(Identity, _Initializer7);\n\n  function Identity(args) {\n    var _this6;\n\n    _classCallCheck(this, Identity);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Identity).call(this));\n    _this6.gain = args.gain != null ? args.gain : 1.0;\n    return _this6;\n  }\n\n  _createClass(Identity, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      var _this7 = this;\n\n      return tidy(function () {\n        if (shape.length !== 2 || shape[0] !== shape[1]) {\n          throw new ValueError('Identity matrix initializer can only be used for' + ' 2D square matrices.');\n        } else {\n          return mul(_this7.gain, eye(shape[0]));\n        }\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        gain: this.gain\n      };\n    }\n  }]);\n\n  return Identity;\n}(Initializer);\n/** @nocollapse */\n\nIdentity.className = 'Identity';\nserialization.registerClass(Identity);\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\n\nfunction computeFans(shape) {\n  var dataFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'channelsLast';\n  var fanIn;\n  var fanOut;\n  checkDataFormat(dataFormat);\n\n  if (shape.length === 2) {\n    fanIn = shape[0];\n    fanOut = shape[1];\n  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n    if (dataFormat === 'channelsFirst') {\n      var receptiveFieldSize = arrayProd(shape, 2);\n      fanIn = shape[1] * receptiveFieldSize;\n      fanOut = shape[0] * receptiveFieldSize;\n    } else if (dataFormat === 'channelsLast') {\n      var _receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n\n      fanIn = shape[shape.length - 2] * _receptiveFieldSize;\n      fanOut = shape[shape.length - 1] * _receptiveFieldSize;\n    }\n  } else {\n    var shapeProd = arrayProd(shape);\n    fanIn = Math.sqrt(shapeProd);\n    fanOut = Math.sqrt(shapeProd);\n  }\n\n  return [fanIn, fanOut];\n}\n\nexport var VarianceScaling = /*#__PURE__*/function (_Initializer8) {\n  _inherits(VarianceScaling, _Initializer8);\n\n  /**\n   * Constructor of VarianceScaling.\n   * @throws ValueError for invalid value in scale.\n   */\n  function VarianceScaling(args) {\n    var _this8;\n\n    _classCallCheck(this, VarianceScaling);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(VarianceScaling).call(this));\n\n    if (args.scale < 0.0) {\n      throw new ValueError(\"scale must be a positive float. Got: \".concat(args.scale));\n    }\n\n    _this8.scale = args.scale == null ? 1.0 : args.scale;\n    _this8.mode = args.mode == null ? 'fanIn' : args.mode;\n    checkFanMode(_this8.mode);\n    _this8.distribution = args.distribution == null ? 'normal' : args.distribution;\n    checkDistribution(_this8.distribution);\n    _this8.seed = args.seed;\n    return _this8;\n  }\n\n  _createClass(VarianceScaling, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      var fans = computeFans(shape);\n      var fanIn = fans[0];\n      var fanOut = fans[1];\n      var scale = this.scale;\n\n      if (this.mode === 'fanIn') {\n        scale /= Math.max(1, fanIn);\n      } else if (this.mode === 'fanOut') {\n        scale /= Math.max(1, fanOut);\n      } else {\n        scale /= Math.max(1, (fanIn + fanOut) / 2);\n      }\n\n      if (this.distribution === 'normal') {\n        var stddev = Math.sqrt(scale);\n        dtype = dtype || 'float32';\n\n        if (dtype !== 'float32' && dtype !== 'int32') {\n          throw new NotImplementedError(\"\".concat(this.getClassName(), \" does not support dType \").concat(dtype, \".\"));\n        }\n\n        return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n      } else {\n        var limit = Math.sqrt(3 * scale);\n        return randomUniform(shape, -limit, limit, dtype);\n      }\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        scale: this.scale,\n        mode: this.mode,\n        distribution: this.distribution,\n        seed: this.seed\n      };\n    }\n  }]);\n\n  return VarianceScaling;\n}(Initializer);\n/** @nocollapse */\n\nVarianceScaling.className = 'VarianceScaling';\nserialization.registerClass(VarianceScaling);\nexport var GlorotUniform = /*#__PURE__*/function (_VarianceScaling) {\n  _inherits(GlorotUniform, _VarianceScaling);\n\n  /**\n   * Constructor of GlorotUniform\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  function GlorotUniform(args) {\n    _classCallCheck(this, GlorotUniform);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GlorotUniform).call(this, {\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    }));\n  }\n\n  _createClass(GlorotUniform, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, GlorotUniform is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n\n  return GlorotUniform;\n}(VarianceScaling);\n/** @nocollapse */\n\nGlorotUniform.className = 'GlorotUniform';\nserialization.registerClass(GlorotUniform);\nexport var GlorotNormal = /*#__PURE__*/function (_VarianceScaling2) {\n  _inherits(GlorotNormal, _VarianceScaling2);\n\n  /**\n   * Constructor of GlorotNormal.\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  function GlorotNormal(args) {\n    _classCallCheck(this, GlorotNormal);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GlorotNormal).call(this, {\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    }));\n  }\n\n  _createClass(GlorotNormal, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, GlorotNormal is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n\n  return GlorotNormal;\n}(VarianceScaling);\n/** @nocollapse */\n\nGlorotNormal.className = 'GlorotNormal';\nserialization.registerClass(GlorotNormal);\nexport var HeNormal = /*#__PURE__*/function (_VarianceScaling3) {\n  _inherits(HeNormal, _VarianceScaling3);\n\n  function HeNormal(args) {\n    _classCallCheck(this, HeNormal);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HeNormal).call(this, {\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    }));\n  }\n\n  _createClass(HeNormal, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, HeNormal is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n\n  return HeNormal;\n}(VarianceScaling);\n/** @nocollapse */\n\nHeNormal.className = 'HeNormal';\nserialization.registerClass(HeNormal);\nexport var HeUniform = /*#__PURE__*/function (_VarianceScaling4) {\n  _inherits(HeUniform, _VarianceScaling4);\n\n  function HeUniform(args) {\n    _classCallCheck(this, HeUniform);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HeUniform).call(this, {\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    }));\n  }\n\n  _createClass(HeUniform, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, HeUniform is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n\n  return HeUniform;\n}(VarianceScaling);\n/** @nocollapse */\n\nHeUniform.className = 'HeUniform';\nserialization.registerClass(HeUniform);\nexport var LeCunNormal = /*#__PURE__*/function (_VarianceScaling5) {\n  _inherits(LeCunNormal, _VarianceScaling5);\n\n  function LeCunNormal(args) {\n    _classCallCheck(this, LeCunNormal);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LeCunNormal).call(this, {\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    }));\n  }\n\n  _createClass(LeCunNormal, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, LeCunNormal is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n\n  return LeCunNormal;\n}(VarianceScaling);\n/** @nocollapse */\n\nLeCunNormal.className = 'LeCunNormal';\nserialization.registerClass(LeCunNormal);\nexport var LeCunUniform = /*#__PURE__*/function (_VarianceScaling6) {\n  _inherits(LeCunUniform, _VarianceScaling6);\n\n  function LeCunUniform(args) {\n    _classCallCheck(this, LeCunUniform);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LeCunUniform).call(this, {\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    }));\n  }\n\n  _createClass(LeCunUniform, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      // In Python Keras, LeCunUniform is not a class, but a helper method\n      // that creates a VarianceScaling object. Use 'VarianceScaling' as\n      // class name to be compatible with that.\n      return VarianceScaling.className;\n    }\n  }]);\n\n  return LeCunUniform;\n}(VarianceScaling);\n/** @nocollapse */\n\nLeCunUniform.className = 'LeCunNormal';\nserialization.registerClass(LeCunUniform);\nexport var Orthogonal = /*#__PURE__*/function (_Initializer9) {\n  _inherits(Orthogonal, _Initializer9);\n\n  function Orthogonal(args) {\n    var _this9;\n\n    _classCallCheck(this, Orthogonal);\n\n    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(Orthogonal).call(this));\n    _this9.DEFAULT_GAIN = 1;\n    _this9.gain = args.gain == null ? _this9.DEFAULT_GAIN : args.gain;\n    _this9.seed = args.seed;\n\n    if (_this9.seed != null) {\n      throw new NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n    }\n\n    return _this9;\n  }\n\n  _createClass(Orthogonal, [{\n    key: \"apply\",\n    value: function apply(shape, dtype) {\n      var _this10 = this;\n\n      return tidy(function () {\n        if (shape.length < 2) {\n          throw new NotImplementedError('Shape must be at least 2D.');\n        }\n\n        if (shape[0] * shape[1] > 2000) {\n          console.warn(\"Orthogonal initializer is being called on a matrix with more \" + \"than 2000 (\".concat(shape[0] * shape[1], \") elements: \") + \"Slowness may result.\");\n        } // TODO(cais): Add seed support.\n\n\n        var normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n        var a = K.randomNormal(normalizedShape, 0, 1, 'float32');\n        var q = linalg.gramSchmidt(a);\n\n        if (shape[0] > shape[1]) {\n          q = q.transpose();\n        }\n\n        return mul(_this10.gain, q);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        gain: this.gain,\n        seed: this.seed\n      };\n    }\n  }]);\n\n  return Orthogonal;\n}(Initializer);\n/** @nocollapse */\n\nOrthogonal.className = 'Orthogonal';\nserialization.registerClass(Orthogonal); // Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\n\nexport var INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'constant': 'Constant',\n  'glorotNormal': 'GlorotNormal',\n  'glorotUniform': 'GlorotUniform',\n  'heNormal': 'HeNormal',\n  'heUniform': 'HeUniform',\n  'identity': 'Identity',\n  'leCunNormal': 'LeCunNormal',\n  'leCunUniform': 'LeCunUniform',\n  'ones': 'Ones',\n  'orthogonal': 'Orthogonal',\n  'randomNormal': 'RandomNormal',\n  'randomUniform': 'RandomUniform',\n  'truncatedNormal': 'TruncatedNormal',\n  'varianceScaling': 'VarianceScaling',\n  'zeros': 'Zeros'\n};\n\nfunction deserializeInitializer(config) {\n  var customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');\n}\n\nexport function serializeInitializer(initializer) {\n  return serializeKerasObject(initializer);\n}\nexport function getInitializer(identifier) {\n  if (typeof identifier === 'string') {\n    var className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    /* We have four 'helper' classes for common initializers that\n    all get serialized as 'VarianceScaling' and shouldn't go through\n    the deserializeInitializer pathway. */\n\n    if (className === 'GlorotNormal') {\n      return new GlorotNormal();\n    } else if (className === 'GlorotUniform') {\n      return new GlorotUniform();\n    } else if (className === 'HeNormal') {\n      return new HeNormal();\n    } else if (className === 'HeUniform') {\n      return new HeUniform();\n    } else if (className === 'LeCunNormal') {\n      return new LeCunNormal();\n    } else if (className === 'LeCunUniform') {\n      return new LeCunUniform();\n    } else {\n      var config = {};\n      config['className'] = className;\n      config['config'] = {};\n      return deserializeInitializer(config);\n    }\n  } else if (identifier instanceof Initializer) {\n    return identifier;\n  } else {\n    return deserializeInitializer(identifier);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}