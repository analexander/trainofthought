{"ast":null,"code":"import _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropInput(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var dy = inputs.dy,\n      filter = inputs.filter;\n  var inputShape = attrs.inputShape,\n      strides = attrs.strides,\n      pad = attrs.pad,\n      dataFormat = attrs.dataFormat,\n      dimRoundingMode = attrs.dimRoundingMode;\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n  var filterStrides = util.computeStrides(filter.shape);\n  var dyStrides = util.computeStrides(dy.shape);\n  var $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  var convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode, false, $dataFormat);\n  var dx = new TensorBuffer(convInfo.inShape, 'float32');\n  var dxValues = dx.values;\n  var dyValues = backend.data.get(dy.dataId).values;\n  var fltValues = backend.data.get(filter.dataId).values;\n\n  var _filterStrides = _slicedToArray(filterStrides, 3),\n      fltS0 = _filterStrides[0],\n      fltS1 = _filterStrides[1],\n      fltS2 = _filterStrides[2];\n\n  var batchSize = convInfo.batchSize,\n      filterHeight = convInfo.filterHeight,\n      filterWidth = convInfo.filterWidth,\n      inChannels = convInfo.inChannels,\n      inHeight = convInfo.inHeight,\n      inWidth = convInfo.inWidth,\n      outChannels = convInfo.outChannels,\n      outHeight = convInfo.outHeight,\n      outWidth = convInfo.outWidth,\n      strideHeight = convInfo.strideHeight,\n      strideWidth = convInfo.strideWidth;\n  $dataFormat = convInfo.dataFormat;\n  var topPad = filterHeight - 1 - convInfo.padInfo.top;\n  var leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  var isChannelsLast = $dataFormat === 'channelsLast';\n  var xBatchStride = dx.strides[0];\n  var xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  var xColStride = isChannelsLast ? dx.strides[2] : 1;\n  var xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  var yBatchStride = dyStrides[0];\n  var yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  var yColStride = isChannelsLast ? dyStrides[2] : 1;\n  var yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (var b = 0; b < batchSize; ++b) {\n    for (var d1 = 0; d1 < inChannels; ++d1) {\n      for (var xR = 0; xR < inHeight; ++xR) {\n        var xRCorner = xR - topPad;\n        var xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        var yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (var xC = 0; xC < inWidth; ++xC) {\n          var xCCorner = xC - leftPad;\n          var xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          var yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n          var dotProd = 0;\n\n          for (var yR = xRMin; yR < yRMax; ++yR) {\n            var wR = yR * strideHeight - xRCorner;\n\n            for (var yC = xCMin; yC < yCMax; ++yC) {\n              var wC = yC * strideWidth - xCCorner;\n              var dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n              var fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (var d2 = 0; d2 < outChannels; ++d2) {\n                var pixel = dyValues[dyOffset + yChannelStride * d2];\n                var weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n\n          var dxOffset = xBatchStride * b + xRowStride * xR + xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport var conv2DBackpropInputConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput\n};","map":null,"metadata":{},"sourceType":"module"}