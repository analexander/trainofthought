{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { FaceDetection } from '../classes';\nimport { TinyYolov2Base } from '../tinyYolov2/TinyYolov2Base';\nimport { BOX_ANCHORS, IOU_THRESHOLD, MEAN_RGB } from './const';\n\nvar TinyFaceDetector =\n/** @class */\nfunction (_super) {\n  __extends(TinyFaceDetector, _super);\n\n  function TinyFaceDetector() {\n    var _this = this;\n\n    var config = {\n      withSeparableConvs: true,\n      iouThreshold: IOU_THRESHOLD,\n      classes: ['face'],\n      anchors: BOX_ANCHORS,\n      meanRgb: MEAN_RGB,\n      isFirstLayerConv2d: true,\n      filterSizes: [3, 16, 32, 64, 128, 256, 512]\n    };\n    _this = _super.call(this, config) || this;\n    return _this;\n  }\n\n  Object.defineProperty(TinyFaceDetector.prototype, \"anchors\", {\n    get: function get() {\n      return this.config.anchors;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TinyFaceDetector.prototype.locateFaces = function (input, forwardParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var objectDetections;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.detect(input, forwardParams)];\n\n          case 1:\n            objectDetections = _a.sent();\n            return [2\n            /*return*/\n            , objectDetections.map(function (det) {\n              return new FaceDetection(det.score, det.relativeBox, {\n                width: det.imageWidth,\n                height: det.imageHeight\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  TinyFaceDetector.prototype.getDefaultModelName = function () {\n    return 'tiny_face_detector_model';\n  };\n\n  TinyFaceDetector.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return _super.prototype.extractParamsFromWeigthMap.call(this, weightMap);\n  };\n\n  return TinyFaceDetector;\n}(TinyYolov2Base);\n\nexport { TinyFaceDetector };","map":null,"metadata":{},"sourceType":"module"}