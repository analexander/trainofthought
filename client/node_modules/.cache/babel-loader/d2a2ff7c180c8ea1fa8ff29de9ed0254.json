{"ast":null,"code":"var isWindows = process.platform === 'win32';\n\nvar path = require('path');\n\nvar exec = require('child_process').exec;\n\nvar osTmpdir = require('os-tmpdir');\n\nvar osHomedir = require('os-homedir'); // looking up envs is a bit costly.\n// Also, sometimes we want to have a fallback\n// Pass in a callback to wait for the fallback on failures\n// After the first lookup, always returns the same thing.\n\n\nfunction memo(key, lookup, fallback) {\n  var fell = false;\n  var falling = false;\n\n  exports[key] = function (cb) {\n    var val = lookup();\n\n    if (!val && !fell && !falling && fallback) {\n      fell = true;\n      falling = true;\n      exec(fallback, function (er, output, stderr) {\n        falling = false;\n        if (er) return; // oh well, we tried\n\n        val = output.trim();\n      });\n    }\n\n    exports[key] = function (cb) {\n      if (cb) process.nextTick(cb.bind(null, null, val));\n      return val;\n    };\n\n    if (cb && !falling) process.nextTick(cb.bind(null, null, val));\n    return val;\n  };\n}\n\nmemo('user', function () {\n  return isWindows ? process.env.USERDOMAIN + '\\\\' + process.env.USERNAME : process.env.USER;\n}, 'whoami');\nmemo('prompt', function () {\n  return isWindows ? process.env.PROMPT : process.env.PS1;\n});\nmemo('hostname', function () {\n  return isWindows ? process.env.COMPUTERNAME : process.env.HOSTNAME;\n}, 'hostname');\nmemo('tmpdir', function () {\n  return osTmpdir();\n});\nmemo('home', function () {\n  return osHomedir();\n});\nmemo('path', function () {\n  return (process.env.PATH || process.env.Path || process.env.path).split(isWindows ? ';' : ':');\n});\nmemo('editor', function () {\n  return process.env.EDITOR || process.env.VISUAL || (isWindows ? 'notepad.exe' : 'vi');\n});\nmemo('shell', function () {\n  return isWindows ? process.env.ComSpec || 'cmd' : process.env.SHELL || 'bash';\n});","map":null,"metadata":{},"sourceType":"script"}