{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport var ExecutionContext = /*#__PURE__*/function () {\n  function ExecutionContext() {\n    var weightMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var tensorArrayMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var tensorListMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var functionMap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    _classCallCheck(this, ExecutionContext);\n\n    this.weightMap = weightMap;\n    this.tensorArrayMap = tensorArrayMap;\n    this.tensorListMap = tensorListMap;\n    this.functionMap = functionMap;\n    this.rootContext = {\n      id: 0,\n      frameName: '',\n      iterationId: 0\n    };\n    this.contexts = [this.rootContext];\n    this.lastId = 0;\n    this.generateCurrentContextIds();\n  }\n\n  _createClass(ExecutionContext, [{\n    key: \"newFrame\",\n    value: function newFrame(id, frameName) {\n      return {\n        id: id,\n        frameName: frameName,\n        iterationId: 0\n      };\n    }\n    /**\n     * Set the current context\n     * @param contexts: ExecutionContextInfo[] the current path of execution\n     * frames\n     */\n\n  }, {\n    key: \"generateCurrentContextIds\",\n    value: function generateCurrentContextIds() {\n      var names = [];\n\n      for (var i = 0; i < this.contexts.length - 1; i++) {\n        var contexts = this.contexts.slice(0, this.contexts.length - i);\n        names.push(this.contextIdforContexts(contexts));\n      }\n\n      names.push('');\n      this._currentContextIds = names;\n    }\n  }, {\n    key: \"contextIdforContexts\",\n    value: function contextIdforContexts(contexts) {\n      return contexts ? contexts.map(function (context) {\n        return context.id === 0 && context.iterationId === 0 ? '' : \"\".concat(context.frameName, \"-\").concat(context.iterationId);\n      }).join('/') : '';\n    }\n    /**\n     * Enter a new frame, a new context is pushed on the current context list.\n     * @param frameId new frame id\n     */\n\n  }, {\n    key: \"enterFrame\",\n    value: function enterFrame(frameId) {\n      if (this.contexts) {\n        this.lastId++;\n        this.contexts = this.contexts.slice();\n        this.contexts.push(this.newFrame(this.lastId, frameId));\n\n        this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n      }\n    }\n    /**\n     * Exit the current frame, the last context is removed from the current\n     * context list.\n     */\n\n  }, {\n    key: \"exitFrame\",\n    value: function exitFrame() {\n      if (this.contexts && this.contexts.length > 1) {\n        this.contexts = this.contexts.slice();\n        this.contexts.splice(-1);\n        this.currentContextIds.shift();\n      } else {\n        throw new Error('Cannot exit frame, the context is empty');\n      }\n    }\n    /**\n     * Enter the next iteration of a loop, the iteration id of last context is\n     * increased.\n     */\n\n  }, {\n    key: \"nextIteration\",\n    value: function nextIteration() {\n      if (this.contexts && this.contexts.length > 0) {\n        this.contexts = this.contexts.slice();\n        this.lastId++;\n        var context = Object.assign({}, this.contexts[this.contexts.length - 1]);\n        context.iterationId += 1;\n        context.id = this.lastId;\n        this.contexts.splice(-1, 1, context);\n\n        this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\n      } else {\n        throw new Error('Cannot increase frame iteration, the context is empty');\n      }\n    }\n  }, {\n    key: \"getWeight\",\n    value: function getWeight(name) {\n      return this.weightMap[name];\n    }\n  }, {\n    key: \"addTensorArray\",\n    value: function addTensorArray(tensorArray) {\n      this.tensorArrayMap[tensorArray.id] = tensorArray;\n    }\n  }, {\n    key: \"getTensorArray\",\n    value: function getTensorArray(id) {\n      return this.tensorArrayMap[id];\n    }\n  }, {\n    key: \"addTensorList\",\n    value: function addTensorList(tensorList) {\n      this.tensorListMap[tensorList.id] = tensorList;\n    }\n  }, {\n    key: \"getTensorList\",\n    value: function getTensorList(id) {\n      return this.tensorListMap[id];\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose(keepIds) {\n      for (var key in this.tensorArrayMap) {\n        this.tensorArrayMap[key].clearAndClose(keepIds);\n      }\n\n      for (var _key in this.tensorListMap) {\n        this.tensorListMap[_key].clearAndClose(keepIds);\n      }\n    }\n  }, {\n    key: \"currentContext\",\n    set: function set(contexts) {\n      if (this.contexts !== contexts) {\n        this.contexts = contexts;\n        this.generateCurrentContextIds();\n      }\n    },\n    get: function get() {\n      return this.contexts;\n    }\n    /**\n     * Returns the current context in string format.\n     */\n\n  }, {\n    key: \"currentContextId\",\n    get: function get() {\n      return this._currentContextIds[0];\n    }\n    /**\n     * Returns the current context and all parent contexts in string format.\n     * This allow access to the nodes in the current and parent frames.\n     */\n\n  }, {\n    key: \"currentContextIds\",\n    get: function get() {\n      return this._currentContextIds;\n    }\n  }]);\n\n  return ExecutionContext;\n}();","map":null,"metadata":{},"sourceType":"module"}