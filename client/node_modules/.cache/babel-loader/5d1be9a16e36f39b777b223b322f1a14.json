{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MirrorPad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Pads a `tf.Tensor` using mirror padding.\n *\n * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.\n *\n * ```js\n * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);\n * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();\n * ```\n * @param x The tensor to pad.\n * @param paddings An array of length `R` (the rank of the tensor), where\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\n * specifying how much to pad along each dimension of the tensor.\n * In \"reflect\" mode, the padded regions do not include the borders,\n * while in \"symmetric\" mode the padded regions do include the borders.\n * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,\n * then the output is `[1, 2, 3, 2, 1]` in \"reflect\" mode, and\n * `[1, 2, 3, 3, 2]` in \"symmetric\" mode.\n * If `mode` is \"reflect\" then both `paddings[D, 0]` and `paddings[D, 1]`\n * must be no greater than `x.shape[D] - 1`. If mode is \"symmetric\"\n * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than\n * `x.shape[D]`\n * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`\n */\n\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\n\nfunction mirrorPad_(x, paddings, mode) {\n  util.assert(mode === 'reflect' || mode === 'symmetric', function () {\n    return \"Invalid mode. Mode must be either reflect or symmetric. \" + \"Got \".concat(mode, \".\");\n  });\n  var $x = convertToTensor(x, 'x', 'mirrorPad');\n\n  if ($x.rank === 0) {\n    throw new Error('mirrorPad(scalar) is not defined. ' + 'Pass non-scalar to mirrorPad');\n  }\n\n  util.assert(paddings.length === $x.rank, function () {\n    return \"Padding doesn't match input. Must be \".concat($x.rank, \". \") + \"Got \".concat(paddings.length, \".\");\n  });\n  var shapeOffset = mode === 'reflect' ? 1 : 0;\n\n  var _loop = function _loop(i) {\n    util.assert(paddings[i].length === 2, function () {\n      return \"Invalid number of paddings. Must be length of 2 each.\";\n    });\n    util.assert(paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset && paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset, function () {\n      return \"Padding in dimension \".concat(i, \" cannot be greater than or equal \") + \"to \".concat($x.shape[i] - shapeOffset, \" or less than 0 for input of \") + \"shape \".concat($x.shape);\n    });\n  };\n\n  for (var i = 0; i < $x.rank; i++) {\n    _loop(i);\n  }\n\n  var attrs = {\n    paddings: paddings,\n    mode: mode\n  };\n  var inputs = {\n    x: $x\n  };\n  return ENGINE.runKernel(MirrorPad, inputs, attrs);\n}\n\nexport var mirrorPad = op({\n  mirrorPad_: mirrorPad_\n});","map":null,"metadata":{},"sourceType":"module"}