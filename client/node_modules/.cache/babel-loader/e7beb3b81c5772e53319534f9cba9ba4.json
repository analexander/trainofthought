{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Concat } from '../kernel_names';\nimport { convertToTensorArray } from '../tensor_util_env';\nimport { assert, parseAxisParam, sizeFromShape } from '../util';\nimport { assertParamsConsistent, computeOutShape } from './concat_util';\nimport { op } from './operation';\nimport { tensor } from './tensor';\n/**\n * Concatenates a list of `tf.Tensor`s along a given axis.\n *\n * The tensors ranks and types must match, and their sizes must match in all\n * dimensions except `axis`.\n *\n * Also available are stricter rank-specific methods that assert that\n * `tensors` are of the given rank:\n *   - `tf.concat1d`\n *   - `tf.concat2d`\n *   - `tf.concat3d`\n *   - `tf.concat4d`\n *\n * Except `tf.concat1d` (which does not have axis param), all methods have\n * same signature as this method.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * a.concat(b).print();  // or a.concat(b)\n * ```\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.concat([a, b, c]).print();\n * ```\n *\n * ```js\n * const a = tf.tensor2d([[1, 2], [10, 20]]);\n * const b = tf.tensor2d([[3, 4], [30, 40]]);\n * const axis = 1;\n * tf.concat([a, b], axis).print();\n * ```\n * @param tensors A list of tensors to concatenate.\n * @param axis The axis to concate along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\n\nfunction concat_(tensors) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  assert(tensors.length >= 1, function () {\n    return 'Pass at least one tensor to concat';\n  });\n  var $tensors = convertToTensorArray(tensors, 'tensors', 'concat');\n\n  if ($tensors[0].dtype === 'complex64') {\n    $tensors.forEach(function (tensor) {\n      if (tensor.dtype !== 'complex64') {\n        throw new Error(\"Cannot concatenate complex64 tensors with a tensor\\n          with dtype \".concat(tensor.dtype, \". \"));\n      }\n    });\n  }\n\n  var forward = function forward(backend, save) {\n    var $axis = parseAxisParam(axis, $tensors[0].shape)[0];\n    var outShape = computeOutShape($tensors.map(function (t) {\n      return t.shape;\n    }), $axis);\n\n    if (sizeFromShape(outShape) === 0) {\n      return tensor([], outShape);\n    } // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n\n\n    $tensors = $tensors.filter(function (t) {\n      return t.size > 0;\n    });\n\n    if ($tensors.length === 1) {\n      return $tensors[0];\n    }\n\n    var shapes = $tensors.map(function (t) {\n      return t.shape;\n    });\n    assertParamsConsistent(shapes, $axis);\n    var res = backend.concat($tensors, $axis);\n    save($tensors);\n    return res;\n  };\n\n  var inputs = $tensors;\n  var attr = {\n    axis: axis\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Concat, attr);\n}\n\nexport var concat = op({\n  concat_: concat_\n});","map":null,"metadata":{},"sourceType":"module"}