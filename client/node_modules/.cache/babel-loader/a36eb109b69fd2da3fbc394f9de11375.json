{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { env } from './environment';\nimport { Tensor } from './tensor';\nimport { assert, flatten, inferDtype, isTypedArray, toTypedArray } from './util';\nexport function inferShape(val, dtype) {\n  var firstElem = val;\n\n  if (isTypedArray(val)) {\n    return dtype === 'string' ? [] : [val.length];\n  }\n\n  if (!Array.isArray(val)) {\n    return []; // Scalar.\n  }\n\n  var shape = [];\n\n  while (Array.isArray(firstElem) || isTypedArray(firstElem) && dtype !== 'string') {\n    shape.push(firstElem.length);\n    firstElem = firstElem[0];\n  }\n\n  if (Array.isArray(val) && env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {\n    deepAssertShapeConsistency(val, shape, []);\n  }\n\n  return shape;\n}\n\nfunction deepAssertShapeConsistency(val, shape, indices) {\n  indices = indices || [];\n\n  if (!Array.isArray(val) && !isTypedArray(val)) {\n    assert(shape.length === 0, function () {\n      return \"Element arr[\".concat(indices.join(']['), \"] is a primitive, \") + \"but should be an array/TypedArray of \".concat(shape[0], \" elements\");\n    });\n    return;\n  }\n\n  assert(shape.length > 0, function () {\n    return \"Element arr[\".concat(indices.join(']['), \"] should be a primitive, \") + \"but is an array of \".concat(val.length, \" elements\");\n  });\n  assert(val.length === shape[0], function () {\n    return \"Element arr[\".concat(indices.join(']['), \"] should have \").concat(shape[0], \" \") + \"elements, but has \".concat(val.length, \" elements\");\n  });\n  var subShape = shape.slice(1);\n\n  for (var i = 0; i < val.length; ++i) {\n    deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n  }\n}\n\nfunction assertDtype(expectedDtype, actualDType, argName, functionName) {\n  if (expectedDtype == null) {\n    return;\n  }\n\n  if (expectedDtype !== 'numeric' && expectedDtype !== actualDType || expectedDtype === 'numeric' && actualDType === 'string') {\n    throw new Error(\"Argument '\".concat(argName, \"' passed to '\").concat(functionName, \"' must \") + \"be \".concat(expectedDtype, \" tensor, but got \").concat(actualDType, \" tensor\"));\n  }\n}\n\nexport function convertToTensor(x, argName, functionName) {\n  var parseAsDtype = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'numeric';\n\n  if (x instanceof Tensor) {\n    assertDtype(parseAsDtype, x.dtype, argName, functionName);\n    return x;\n  }\n\n  var inferredDtype = inferDtype(x); // If the user expects a bool/int/float, use that info to update the\n  // inferredDtype when it is not a string.\n\n  if (inferredDtype !== 'string' && ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {\n    inferredDtype = parseAsDtype;\n  }\n\n  assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n\n  if (x == null || !isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' && typeof x !== 'boolean' && typeof x !== 'string') {\n    var type = x == null ? 'null' : x.constructor.name;\n    throw new Error(\"Argument '\".concat(argName, \"' passed to '\").concat(functionName, \"' must be a \") + \"Tensor or TensorLike, but got '\".concat(type, \"'\"));\n  }\n\n  var inferredShape = inferShape(x, inferredDtype);\n\n  if (!isTypedArray(x) && !Array.isArray(x)) {\n    x = [x];\n  }\n\n  var skipTypedArray = true;\n  var values = inferredDtype !== 'string' ? toTypedArray(x, inferredDtype) : flatten(x, [], skipTypedArray);\n  return ENGINE.makeTensor(values, inferredShape, inferredDtype);\n}\nexport function convertToTensorArray(arg, argName, functionName) {\n  var parseAsDtype = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'numeric';\n\n  if (!Array.isArray(arg)) {\n    throw new Error(\"Argument \".concat(argName, \" passed to \").concat(functionName, \" must be a \") + '`Tensor[]` or `TensorLike[]`');\n  }\n\n  var tensors = arg;\n  return tensors.map(function (t, i) {\n    return convertToTensor(t, \"\".concat(argName, \"[\").concat(i, \"]\"), functionName);\n  }, parseAsDtype);\n}","map":null,"metadata":{},"sourceType":"module"}