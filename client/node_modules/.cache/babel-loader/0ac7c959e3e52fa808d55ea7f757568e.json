{"ast":null,"code":"import _toConsumableArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { OneHot } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\n * value `onValue` (defaults to 1), while all other locations take value\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\n * `R+1` with the last axis of size `depth`.\n *\n * ```js\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\n * ```\n *\n * @param indices `tf.Tensor` of indices with dtype `int32`.\n * @param depth The depth of the one hot dimension.\n * @param onValue A number used to fill in the output when the index matches\n * the location.\n * @param offValue A number used to fill in the output when the index does\n *     not match the location.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\n\nfunction oneHot_(indices, depth) {\n  var onValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var offValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (depth < 2) {\n    throw new Error(\"Error in oneHot: depth must be >=2, but it is \".concat(depth));\n  }\n\n  var $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n  var outShape = [].concat(_toConsumableArray($indices.shape), [depth]);\n\n  var forward = function forward(backend, save) {\n    save([$indices]);\n    return reshape(backend.oneHot(reshape($indices, [$indices.size]), depth, onValue, offValue), outShape);\n  };\n\n  var inputs = {\n    indices: $indices\n  };\n  var attrs = {\n    depth: depth,\n    onValue: onValue,\n    offValue: offValue\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , OneHot, attrs);\n}\n\nexport var oneHot = op({\n  oneHot_: oneHot_\n});","map":null,"metadata":{},"sourceType":"module"}