{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar os_1 = require(\"os\");\n\nvar INT32_MAX = 2147483648;\n/**\n * Node.js-specific tensor type: int64-type scalar.\n *\n * This class is created for a specific purpose: to support\n * writing `step`s to TensorBoard via op-kernel bindings.\n * `step` is required to have an int64 dtype, but TensorFlow.js\n * (tfjs-core) doesn't have a built-in int64 dtype. This is\n * related to a lack of `Int64Array` or `Uint64Array` typed\n * array in basic JavaScript.\n *\n * This class is introduced as a workaround.\n */\n\nvar Int64Scalar =\n/** @class */\nfunction () {\n  function Int64Scalar(value) {\n    this.value = value;\n    this.dtype = 'int64';\n    this.rank = 1; // The reason why we need to check endianness of the machine here is\n    // negative int64 values and the way in which we represent them\n    // using Int32Arrays in JavaScript. We represent each int64 value with\n    // two consecutive elements of an Int32Array. For positive values,\n    // the high part is simply zero; for negative values, the high part\n    // should be -1. The ordering of the low and high parts assumes\n    // little endian (i.e., least significant digits appear first).\n    // This assumption is checked by the lines below.\n\n    if (Int64Scalar.endiannessOkay_ == null) {\n      if (os_1.endianness() !== 'LE') {\n        throw new Error(\"Int64Scalar does not support endianness of this machine: \" + (\"\" + os_1.endianness()));\n      }\n\n      Int64Scalar.endiannessOkay_ = true;\n    }\n\n    tfjs_1.util.assert(value > -INT32_MAX && value < INT32_MAX - 1, function () {\n      return \"Got a value outside of the bound of values supported for int64 \" + (\"dtype ([-\" + INT32_MAX + \", \" + (INT32_MAX - 1) + \"]): \" + value);\n    });\n    tfjs_1.util.assert(Number.isInteger(value), function () {\n      return \"Expected value to be an integer, but got \" + value;\n    }); // We use two int32 elements to represent a int64 value. This assumes\n    // little endian, which is checked above.\n\n    var highPart = value >= 0 ? 0 : -1;\n    var lowPart = value % INT32_MAX;\n    this.valueArray_ = new Int32Array([lowPart, highPart]);\n  }\n\n  Object.defineProperty(Int64Scalar.prototype, \"shape\", {\n    get: function get() {\n      return [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Int64Scalar.prototype, \"valueArray\", {\n    /** Get the Int32Array that represents the int64 value. */\n    get: function get() {\n      return this.valueArray_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Int64Scalar;\n}();\n\nexports.Int64Scalar = Int64Scalar;\n/**\n * This method encodes a Int32Array as Int64 layout in order to create TF_INT64\n * tensor through binding.\n */\n\nfunction encodeInt32ArrayAsInt64(value) {\n  if (os_1.endianness() !== 'LE') {\n    throw new Error(\"Int64Scalar does not support endianness of this machine: \" + (\"\" + os_1.endianness()));\n  }\n\n  var buffer = new Int32Array(value.length * 2);\n\n  for (var i = 0; i < value.length; i++) {\n    buffer[i * 2] = value[i];\n  }\n\n  return buffer;\n}\n\nexports.encodeInt32ArrayAsInt64 = encodeInt32ArrayAsInt64;","map":null,"metadata":{},"sourceType":"script"}