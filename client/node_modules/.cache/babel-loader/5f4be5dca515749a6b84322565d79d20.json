{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = publish;\nexports.usage = 'Publishes pre-built binary (requires aws-sdk)';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar log = require('npmlog');\n\nvar versioning = require('./util/versioning.js');\n\nvar napi = require('./util/napi.js');\n\nvar s3_setup = require('./util/s3_setup.js');\n\nvar existsAsync = fs.exists || path.exists;\n\nvar url = require('url');\n\nvar config = require('rc')(\"node_pre_gyp\", {\n  acl: \"public-read\"\n});\n\nfunction publish(gyp, argv, callback) {\n  var AWS = require(\"aws-sdk\");\n\n  var package_json = JSON.parse(fs.readFileSync('./package.json'));\n  var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  var tarball = opts.staged_tarball;\n  existsAsync(tarball, function (found) {\n    if (!found) {\n      return callback(new Error(\"Cannot publish because \" + tarball + \" missing: run `node-pre-gyp package` first\"));\n    }\n\n    log.info('publish', 'Detecting s3 credentials');\n    s3_setup.detect(opts.hosted_path, config);\n    var key_name = url.resolve(config.prefix, opts.package_name);\n    log.info('publish', 'Authenticating with s3');\n    AWS.config.update(config);\n    var s3 = new AWS.S3();\n    var s3_opts = {\n      Bucket: config.bucket,\n      Key: key_name\n    };\n    var remote_package = 'https://' + s3_opts.Bucket + '.s3.amazonaws.com/' + s3_opts.Key;\n    log.info('publish', 'Checking for existing binary at ' + remote_package);\n    s3.headObject(s3_opts, function (err, meta) {\n      if (meta) log.info('publish', JSON.stringify(meta));\n\n      if (err && err.code == 'NotFound') {\n        // we are safe to publish because\n        // the object does not already exist\n        log.info('publish', 'Preparing to put object');\n        var s3_put = new AWS.S3();\n        var s3_put_opts = {\n          ACL: config.acl,\n          Body: fs.createReadStream(tarball),\n          Bucket: config.bucket,\n          Key: key_name\n        };\n        log.info('publish', 'Putting object');\n\n        try {\n          s3_put.putObject(s3_put_opts, function (err, resp) {\n            log.info('publish', 'returned from putting object');\n\n            if (err) {\n              log.info('publish', 's3 putObject error: \"' + err + '\"');\n              return callback(err);\n            }\n\n            if (resp) log.info('publish', 's3 putObject response: \"' + JSON.stringify(resp) + '\"');\n            log.info('publish', 'successfully put object');\n            console.log('[' + package_json.name + '] published to ' + remote_package);\n            return callback();\n          });\n        } catch (err) {\n          log.info('publish', 's3 putObject error: \"' + err + '\"');\n          return callback(err);\n        }\n      } else if (err) {\n        log.info('publish', 's3 headObject error: \"' + err + '\"');\n        return callback(err);\n      } else {\n        log.error('publish', 'Cannot publish over existing version');\n        log.error('publish', \"Update the 'version' field in package.json and try again\");\n        log.error('publish', 'If the previous version was published in error see:');\n        log.error('publish', '\\t node-pre-gyp unpublish');\n        return callback(new Error('Failed publishing to ' + remote_package));\n      }\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}