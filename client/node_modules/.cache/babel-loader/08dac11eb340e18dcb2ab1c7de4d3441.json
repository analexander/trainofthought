{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { serialization } from '@tensorflow/tfjs-core';\nimport { getUid } from '../backend/state';\nimport { ValueError } from '../errors';\nimport { Layer, Node, SymbolicTensor } from './topology';\nexport var InputLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(InputLayer, _Layer);\n\n  function InputLayer(args) {\n    var _this;\n\n    _classCallCheck(this, InputLayer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InputLayer).call(this, {\n      dtype: args.dtype,\n      name: args.name != null ? args.name : getUid('input').toString()\n    })); // Normalize config.batchSize and config.sparse\n\n    if (args.batchSize == null) {\n      args.batchSize = null;\n    }\n\n    if (args.sparse == null) {\n      args.sparse = false;\n    }\n\n    _this.trainable = false;\n    _this.built = true;\n    _this.sparse = args.sparse;\n\n    if (args.inputShape != null && args.batchInputShape != null) {\n      throw new ValueError('Only provide the inputShape OR ' + 'batchInputShape argument to inputLayer, not both at the same time.');\n    }\n\n    var batchInputShape = args.batchInputShape;\n\n    if (batchInputShape == null) {\n      if (args.inputShape == null) {\n        throw new ValueError('An InputLayer should be passed either a ' + '`batchInputShape` or an `inputShape`.');\n      } else {\n        batchInputShape = [args.batchSize].concat(args.inputShape);\n      }\n    } else {\n      // TODO(michaelterry): Backport to PyKeras\n      if (args.batchSize != null) {\n        throw new ValueError('Cannot specify batchSize if batchInputShape is ' + 'specified when creating an InputLayer.');\n      }\n    }\n\n    var dtype = args.dtype || 'float32';\n    _this.batchInputShape = batchInputShape;\n    _this.dtype = dtype; // TODO(michaelterry): Backport this to PyKeras?\n\n    _this.inputSpec = [{\n      shape: batchInputShape\n    }];\n    var inputTensor = new SymbolicTensor(_this.dtype, _this.batchInputShape, _assertThisInitialized(_assertThisInitialized(_this)), [], {}, _this.name);\n    inputTensor.nodeIndex = 0;\n    inputTensor.tensorIndex = 0; // Create an input node to add to this.outboundNode.\n    // (This call has side effects.)\n    // tslint:disable-next-line:no-unused-expression\n\n    new Node({\n      outboundLayer: _assertThisInitialized(_assertThisInitialized(_this)),\n      inboundLayers: [],\n      nodeIndices: [],\n      tensorIndices: [],\n      inputTensors: [inputTensor],\n      outputTensors: [inputTensor],\n      inputMasks: [null],\n      outputMasks: [null],\n      inputShapes: [batchInputShape],\n      outputShapes: [batchInputShape]\n    });\n    return _this;\n  }\n\n  _createClass(InputLayer, [{\n    key: \"apply\",\n    value: function apply(inputs, kwargs) {\n      throw new ValueError('Cannot pass any input to an ' + \"InputLayer's apply() method. InputLayer name: \".concat(this.name));\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      // dispose() for InputLayer is overridden as no-op.\n      return {\n        refCountAfterDispose: this._refCount,\n        numDisposedVariables: 0\n      };\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        batchInputShape: this.batchInputShape,\n        dtype: this.dtype,\n        sparse: this.sparse,\n        name: this.name\n      };\n    }\n  }]);\n\n  return InputLayer;\n}(Layer);\n/** @nocollapse */\n\nInputLayer.className = 'InputLayer';\nserialization.registerClass(InputLayer);\nexport function Input(config) {\n  if (config.batchShape == null && config.shape == null) {\n    throw new Error('Please provide to Input either a `shape`' + ' or a `batchShape` argument. Note that ' + '`shape` does not include the batch ' + 'dimension.');\n  }\n\n  if (config.batchShape != null && config.shape != null) {\n    // TODO(michaelterry): Backport to PyKeras.\n    throw new ValueError('Please provide either a `shape` or `batchShape` ' + 'argument to Input, but not both.');\n  }\n\n  var batchShape = config.batchShape;\n\n  if (config.shape != null && batchShape == null) {\n    batchShape = [null].concat(config.shape);\n  }\n\n  var dtype = config.dtype;\n\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n\n  var inputLayer = new InputLayer({\n    batchInputShape: batchShape,\n    name: config.name,\n    dtype: dtype,\n    sparse: config.sparse\n  });\n  var outputs = inputLayer.inboundNodes[0].outputTensors;\n  return outputs[0];\n}","map":null,"metadata":{},"sourceType":"module"}