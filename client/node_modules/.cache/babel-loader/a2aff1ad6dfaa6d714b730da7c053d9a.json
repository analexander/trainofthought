{"ast":null,"code":"import { convertToTensor, convertToTensorArray } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the next states and outputs of a stack of LSTMCells.\n *\n * Each cell output is used as input to the next cell.\n *\n * Returns `[cellState, cellOutput]`.\n *\n * Derived from tf.contrib.rn.MultiRNNCell.\n *\n * @param lstmCells Array of LSTMCell functions.\n * @param data The input to the cell.\n * @param c Array of previous cell states.\n * @param h Array of previous cell outputs.\n *\n * @doc {heading: 'Operations', subheading: 'RNN'}\n */\n\nfunction multiRNNCell_(lstmCells, data, c, h) {\n  var $data = convertToTensor(data, 'data', 'multiRNNCell');\n  var $c = convertToTensorArray(c, 'c', 'multiRNNCell');\n  var $h = convertToTensorArray(h, 'h', 'multiRNNCell');\n  var input = $data;\n  var newStates = [];\n\n  for (var i = 0; i < lstmCells.length; i++) {\n    var output = lstmCells[i](input, $c[i], $h[i]);\n    newStates.push(output[0]);\n    newStates.push(output[1]);\n    input = output[1];\n  }\n\n  var newC = [];\n  var newH = [];\n\n  for (var _i = 0; _i < newStates.length; _i += 2) {\n    newC.push(newStates[_i]);\n    newH.push(newStates[_i + 1]);\n  }\n\n  return [newC, newH];\n}\n\nexport var multiRNNCell = op({\n  multiRNNCell_: multiRNNCell_\n});","map":null,"metadata":{},"sourceType":"module"}