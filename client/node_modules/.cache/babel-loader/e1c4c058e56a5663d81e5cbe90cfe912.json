{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/**\n * A ring buffer, providing O(1) FIFO, LIFO, and related operations.\n */\nexport var RingBuffer = /*#__PURE__*/function () {\n  /**\n   * Constructs a `RingBuffer`.\n   * @param capacity The number of items that the buffer can accomodate.\n   */\n  function RingBuffer(capacity) {\n    _classCallCheck(this, RingBuffer);\n\n    this.capacity = capacity; // Note we store the indices in the range 0 <= index < 2*capacity.\n    // This allows us to distinguish the full from the empty case.\n    // See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/\n\n    this.begin = 0; // inclusive\n\n    this.end = 0; // exclusive\n\n    if (capacity == null) {\n      throw new RangeError('Can\\'t create a ring buffer of unknown capacity.');\n    }\n\n    if (capacity < 1) {\n      throw new RangeError('Can\\'t create ring buffer of capacity < 1.');\n    }\n\n    this.data = new Array(capacity);\n    this.doubledCapacity = 2 * capacity;\n  }\n  /**\n   * Map any index into the range 0 <= index < 2*capacity.\n   */\n\n\n  _createClass(RingBuffer, [{\n    key: \"wrap\",\n    value: function wrap(index) {\n      // don't trust % on negative numbers\n      while (index < 0) {\n        index += this.doubledCapacity;\n      }\n\n      return index % this.doubledCapacity;\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      if (index < 0) {\n        throw new RangeError('Can\\'t get item at a negative index.');\n      }\n\n      return this.data[index % this.capacity];\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      if (index < 0) {\n        throw new RangeError('Can\\'t set item at a negative index.');\n      }\n\n      this.data[index % this.capacity] = value;\n    }\n    /**\n     * Returns the current number of items in the buffer.\n     */\n\n  }, {\n    key: \"length\",\n    value: function length() {\n      var length = this.end - this.begin;\n\n      if (length < 0) {\n        length = this.doubledCapacity + length;\n      }\n\n      return length;\n    }\n    /**\n     * Reports whether the buffer is full.\n     * @returns true if the number of items in the buffer equals its capacity, and\n     *   false otherwise.\n     */\n\n  }, {\n    key: \"isFull\",\n    value: function isFull() {\n      return this.length() === this.capacity;\n    }\n    /**\n     * Reports whether the buffer is empty.\n     * @returns true if the number of items in the buffer equals zero, and\n     *   false otherwise.\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.length() === 0;\n    }\n    /**\n     * Adds an item to the end of the buffer.\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(value) {\n      if (this.isFull()) {\n        throw new RangeError('Ring buffer is full.');\n      }\n\n      this.set(this.end, value);\n      this.end = this.wrap(this.end + 1);\n    }\n    /**\n     * Adds many items to the end of the buffer, in order.\n     */\n\n  }, {\n    key: \"pushAll\",\n    value: function pushAll(values) {\n      var _iterator = _createForOfIteratorHelper(values),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var value = _step.value;\n          this.push(value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Removes and returns the last item in the buffer.\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      if (this.isEmpty()) {\n        throw new RangeError('Ring buffer is empty.');\n      }\n\n      this.end = this.wrap(this.end - 1);\n      var result = this.get(this.end);\n      this.set(this.end, undefined);\n      return result;\n    }\n    /**\n     * Adds an item to the beginning of the buffer.\n     */\n\n  }, {\n    key: \"unshift\",\n    value: function unshift(value) {\n      if (this.isFull()) {\n        throw new RangeError('Ring buffer is full.');\n      }\n\n      this.begin = this.wrap(this.begin - 1);\n      this.set(this.begin, value);\n    }\n    /**\n     * Removes and returns the first item in the buffer.\n     */\n\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.isEmpty()) {\n        throw new RangeError('Ring buffer is empty.');\n      }\n\n      var result = this.get(this.begin);\n      this.set(this.begin, undefined);\n      this.begin = this.wrap(this.begin + 1);\n      return result;\n    }\n    /**\n     * Removes and returns a specific item in the buffer, and moves the last item\n     * to the vacated slot.  This is useful for implementing a shuffling stream.\n     * Note that this operation necessarily scrambles the original order.\n     *\n     * @param relativeIndex: the index of the item to remove, relative to the\n     *   first item in the buffer (e.g., hiding the ring nature of the underlying\n     *   storage).\n     */\n\n  }, {\n    key: \"shuffleExcise\",\n    value: function shuffleExcise(relativeIndex) {\n      if (this.isEmpty()) {\n        throw new RangeError('Ring buffer is empty.');\n      }\n\n      var index = this.wrap(this.begin + relativeIndex);\n      var result = this.get(index);\n      this.set(index, this.pop());\n      return result;\n    }\n  }]);\n\n  return RingBuffer;\n}();","map":null,"metadata":{},"sourceType":"module"}