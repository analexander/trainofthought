{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensorArray } from '../tensor_util_env';\nimport * as util from '../util';\nimport { concat } from './concat';\nimport { expandDims } from './expand_dims';\nimport { op } from './operation';\n/**\n * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n * tf.stack([a, b, c]).print();\n * ```\n *\n * @param tensors A list of tensor objects with the same shape and dtype.\n * @param axis The axis to stack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\n\nfunction stack_(tensors) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var $tensors = convertToTensorArray(tensors, 'tensors', 'stack');\n  util.assert($tensors.length >= 1, function () {\n    return 'Pass at least one tensor to tf.stack';\n  });\n\n  if ($tensors.length === 1) {\n    return expandDims($tensors[0], axis);\n  }\n\n  var rank = $tensors[0].rank;\n  var shape = $tensors[0].shape;\n  var dtype = $tensors[0].dtype;\n  util.assert(axis <= rank, function () {\n    return 'Axis must be <= rank of the tensor';\n  });\n  $tensors.forEach(function (t) {\n    util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n    util.assert(dtype === t.dtype, function () {\n      return 'All tensors passed to stack must have matching dtypes';\n    });\n  });\n  var expandedTensors = $tensors.map(function (t) {\n    return expandDims(t, axis);\n  }); // Stack exists in the TensorFlow C++ API\n  // (https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/stack) but not\n  // in\n  // https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/core/ops/ops.pbtxt.\n  // Therefore we are treating it like a high-level op rather than\n  // creating a dedicated stack kernel.\n\n  return concat(expandedTensors, axis);\n}\n\nexport var stack = op({\n  stack_: stack_\n});","map":null,"metadata":{},"sourceType":"module"}