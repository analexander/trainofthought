{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util';\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\n\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  var resolvedPromise = 0;\n\n  var registerMonitor = function registerMonitor(promise) {\n    promise.then(function (value) {\n      var fraction = startFraction + ++resolvedPromise / promises.length * (endFraction - startFraction); // pass fraction as parameter to callback function.\n\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n\n  function checkPromises(promises) {\n    assert(promises != null && Array.isArray(promises) && promises.length > 0, function () {\n      return 'promises must be a none empty array';\n    });\n  }\n\n  function checkFraction(startFraction, endFraction) {\n    assert(startFraction >= 0 && startFraction <= 1, function () {\n      return \"Progress fraction must be in range [0, 1], but \" + \"got startFraction \".concat(startFraction);\n    });\n    assert(endFraction >= 0 && endFraction <= 1, function () {\n      return \"Progress fraction must be in range [0, 1], but \" + \"got endFraction \".concat(endFraction);\n    });\n    assert(endFraction >= startFraction, function () {\n      return \"startFraction must be no more than endFraction, but \" + \"got startFraction \".concat(startFraction, \" and endFraction \") + \"\".concat(endFraction);\n    });\n  }\n\n  return Promise.all(promises.map(registerMonitor));\n}","map":null,"metadata":{},"sourceType":"module"}