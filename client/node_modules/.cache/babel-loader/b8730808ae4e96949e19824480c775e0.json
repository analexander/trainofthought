{"ast":null,"code":"import _regeneratorRuntime from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { gather } from './gather';\nimport { reshape } from './reshape';\nimport { squeeze } from './squeeze';\nimport { whereAsync } from './where_async';\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\n\nfunction booleanMaskAsync_(_x, _x2, _x3) {\n  return _booleanMaskAsync_.apply(this, arguments);\n}\n\nfunction _booleanMaskAsync_() {\n  _booleanMaskAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tensor, mask, axis) {\n    var $tensor, $mask, axisFrom, maskDim, tensorShape, leadingSize, i, targetTensorShape, reshapedTensor, reshapedMask, positivePositions, indices, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n            $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n            axisFrom = axis == null ? 0 : axis;\n            maskDim = $mask.rank;\n            tensorShape = $tensor.shape;\n            util.assert(maskDim > 0, function () {\n              return 'mask cannot be scalar';\n            });\n            util.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, \"mask's shape must match the first K dimensions of tensor's shape,\");\n            leadingSize = 1;\n\n            for (i = axisFrom; i < axisFrom + maskDim; i++) {\n              leadingSize *= tensorShape[i];\n            }\n\n            targetTensorShape = tensorShape.slice(0, axisFrom).concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n            reshapedTensor = reshape($tensor, targetTensorShape);\n            reshapedMask = reshape($mask, [-1]);\n            _context.next = 14;\n            return whereAsync(reshapedMask);\n\n          case 14:\n            positivePositions = _context.sent;\n            indices = squeeze(positivePositions, [1]);\n            res = gather(reshapedTensor, indices, axisFrom); // Ensure no memory leak.\n\n            if (tensor !== $tensor) {\n              $tensor.dispose();\n            }\n\n            if (mask !== $mask) {\n              $mask.dispose();\n            }\n\n            indices.dispose();\n            reshapedTensor.dispose();\n            reshapedMask.dispose();\n            positivePositions.dispose();\n            return _context.abrupt(\"return\", res);\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _booleanMaskAsync_.apply(this, arguments);\n}\n\nexport var booleanMaskAsync = booleanMaskAsync_;","map":null,"metadata":{},"sourceType":"module"}