{"ast":null,"code":"import _regeneratorRuntime from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose as _dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { SGDOptimizer } from './sgd_optimizer';\n/** @doclink Optimizer */\n\nexport var MomentumOptimizer = /*#__PURE__*/function (_SGDOptimizer) {\n  _inherits(MomentumOptimizer, _SGDOptimizer);\n\n  function MomentumOptimizer(learningRate, momentum) {\n    var _this;\n\n    var useNesterov = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    _classCallCheck(this, MomentumOptimizer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MomentumOptimizer).call(this, learningRate));\n    _this.learningRate = learningRate;\n    _this.momentum = momentum;\n    _this.useNesterov = useNesterov;\n    _this.accumulations = [];\n    _this.m = scalar(_this.momentum);\n    return _this;\n  }\n\n  _createClass(MomentumOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n\n      var variableNames = Array.isArray(variableGradients) ? variableGradients.map(function (item) {\n        return item.name;\n      }) : Object.keys(variableGradients);\n      variableNames.forEach(function (name, i) {\n        var value = ENGINE.registeredVariables[name];\n\n        if (_this2.accumulations[i] == null) {\n          var trainable = false;\n          _this2.accumulations[i] = {\n            originalName: \"\".concat(name, \"/momentum\"),\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n\n        var accumulation = _this2.accumulations[i].variable;\n        var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n        if (gradient == null) {\n          return;\n        }\n\n        tidy(function () {\n          var newValue;\n          var newAccumulation = add(mul(_this2.m, accumulation), gradient);\n\n          if (_this2.useNesterov) {\n            newValue = add(mul(_this2.c, add(gradient, mul(newAccumulation, _this2.m))), value);\n          } else {\n            newValue = add(mul(_this2.c, newAccumulation), value);\n          }\n\n          accumulation.assign(newAccumulation);\n          value.assign(newValue);\n        });\n      });\n      this.incrementIterations();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.m.dispose();\n\n      if (this.accumulations != null) {\n        _dispose(this.accumulations.map(function (v) {\n          return v.variable;\n        }));\n      }\n    }\n    /**\n     * Sets the momentum of the optimizer.\n     *\n     * @param momentum\n     */\n\n  }, {\n    key: \"setMomentum\",\n    value: function setMomentum(momentum) {\n      this.momentum = momentum;\n    }\n  }, {\n    key: \"getWeights\",\n    value: function () {\n      var _getWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.saveIterations();\n\n              case 2:\n                _context.t0 = _context.sent;\n                return _context.abrupt(\"return\", [_context.t0].concat(this.accumulations.map(function (v) {\n                  return {\n                    name: v.originalName,\n                    tensor: v.variable\n                  };\n                })));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getWeights() {\n        return _getWeights.apply(this, arguments);\n      }\n\n      return getWeights;\n    }()\n  }, {\n    key: \"setWeights\",\n    value: function () {\n      var _setWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(weightValues) {\n        var trainable;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.extractIterations(weightValues);\n\n              case 2:\n                weightValues = _context2.sent;\n                trainable = false;\n                this.accumulations = weightValues.map(function (v) {\n                  return {\n                    originalName: v.name,\n                    variable: v.tensor.variable(trainable)\n                  };\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setWeights(_x) {\n        return _setWeights.apply(this, arguments);\n      }\n\n      return setWeights;\n    }()\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate,\n        'momentum': this.momentum,\n        'useNesterov': this.useNesterov\n      };\n    }\n    /** @nocollapse */\n\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate'], config['momentum'], config['useNesterov']);\n    }\n  }]);\n\n  return MomentumOptimizer;\n}(SGDOptimizer);\n/** @nocollapse */\n\nMomentumOptimizer.className = 'Momentum'; // Name matters for Python compatibility.\n\nregisterClass(MomentumOptimizer);","map":null,"metadata":{},"sourceType":"module"}