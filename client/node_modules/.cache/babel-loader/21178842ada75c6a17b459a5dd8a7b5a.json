{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3DBackpropFilterV2 } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the filter of a 3D convolution.\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is\n *     assumed.\n * @param dy The dy image, of rank 5 or rank 4, of shape\n *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is\n *     assumed.\n * @param filterShape The shape of the filter, length 5,\n *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideDepth, strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n */\n\nfunction conv3DBackpropFilter_(x, dy, filterShape, strides, pad) {\n  var x5D = x;\n\n  if (x.rank === 4) {\n    x5D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);\n  }\n\n  var dy5D = dy;\n\n  if (dy5D.rank === 4) {\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n  }\n\n  util.assert(x5D.rank === 5, function () {\n    return \"Error in conv3dDerFilter: input must be rank 5, but got shape \" + \"\".concat(x5D.shape, \".\");\n  });\n  util.assert(dy5D.rank === 5, function () {\n    return \"Error in conv3dDerFilter: dy must be rank 5, but got shape \" + \"\".concat(dy5D.shape, \".\");\n  });\n  util.assert(filterShape.length === 5, function () {\n    return \"Error in conv3dDerFilter: filterShape must be length 5, but got \" + \"\".concat(filterShape, \".\");\n  });\n  util.assert(x5D.shape[4] === filterShape[3], function () {\n    return \"Error in conv3dDerFilter: depth of input \".concat(x5D.shape[4], \") must \") + \"match input depth in filter (\".concat(filterShape[3], \".\");\n  });\n  util.assert(dy5D.shape[4] === filterShape[4], function () {\n    return \"Error in conv3dDerFilter: depth of dy (\".concat(dy5D.shape[4], \") must \") + \"match output depth for filter (\".concat(filterShape[4], \").\");\n  });\n\n  var forward = function forward(backend) {\n    var dilations = 1;\n    var convInfo = conv_util.computeConv3DInfo(x5D.shape, filterShape, strides, dilations, pad);\n    return backend.conv3dDerFilter(x5D, dy5D, convInfo);\n  };\n\n  var inputs = {\n    x: x5D,\n    dy: dy5D\n  };\n  var attrs = {\n    strides: strides,\n    pad: pad,\n    filterShape: filterShape\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null, Conv3DBackpropFilterV2, attrs);\n}\n\nexport var conv3DBackpropFilter = op({\n  conv3DBackpropFilter_: conv3DBackpropFilter_\n});","map":null,"metadata":{},"sourceType":"module"}