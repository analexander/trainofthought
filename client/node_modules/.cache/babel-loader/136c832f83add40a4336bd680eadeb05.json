{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport var ReversePackedProgram = function ReversePackedProgram(xShape, axis) {\n  _classCallCheck(this, ReversePackedProgram);\n\n  this.variableNames = ['x'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  var rank = xShape.length;\n\n  if (rank > 4) {\n    throw new Error(\"WebGL backend: Reverse of rank-\".concat(rank, \" tensor is not yet supported\"));\n  }\n\n  this.outputShape = xShape;\n  var channels = getChannels('rc', rank);\n  var nextColumn = \"\".concat(channels[rank - 1], \" + 1 < \").concat(this.outputShape[rank - 1]);\n  var nextRow = \"\".concat(channels[rank - 2], \" + 1 < \").concat(this.outputShape[rank - 2]);\n  var type = getCoordsDataType(rank);\n\n  if (rank === 1) {\n    this.userCode = \"\\n        void main(){\\n          int rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = getChannel(getX(\".concat(xShape[0], \" - rc - 1),\\n            \").concat(xShape[0], \" - rc - 1);\\n          if(\").concat(nextColumn, \"){\\n              result.g = getChannel(getX(\").concat(xShape[0], \" - (rc  + 1) - 1),\\n                \").concat(xShape[0], \" - (rc  + 1) - 1);\\n          }\\n          setOutput(result);\\n        }\\n      \");\n  } else {\n    this.userCode = \"\\n        void main() {\\n          \".concat(type, \" rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = \").concat(getR(channels.slice()), \";\\n          if(\").concat(nextColumn, \"){\\n            result.g = \").concat(getG(channels.slice()), \";\\n          }\\n          if(\").concat(nextRow, \") {\\n            result.b = \").concat(getB(channels.slice()), \";\\n            if(\").concat(nextColumn, \") {\\n              result.a = \").concat(getA(channels.slice()), \";\\n            }\\n          }\\n          setOutput(result);\\n        }\\n    \");\n  }\n\n  function getR(channels) {\n    return getChannel(channels);\n  }\n\n  function getG(channels) {\n    channels[rank - 1] = '(' + channels[rank - 1] + \" + 1)\";\n    return getChannel(channels);\n  }\n\n  function getB(channels) {\n    channels[rank - 2] = '(' + channels[rank - 2] + \" + 1)\";\n    return getChannel(channels);\n  }\n\n  function getA(channels) {\n    channels[rank - 1] = '(' + channels[rank - 1] + \" + 1)\";\n    channels[rank - 2] = '(' + channels[rank - 2] + \" + 1)\";\n    return getChannel(channels);\n  }\n\n  function getChannel(channels) {\n    var inCoordsArray = xShape.map(function (_, i) {\n      return getInCoord(i, channels);\n    });\n    var inCoords = inCoordsArray.join(',');\n    var innerDims = inCoordsArray.slice(-2).join(',');\n    return \"getChannel(getX(\".concat(inCoords, \"), vec2(\").concat(innerDims, \"))\");\n  }\n\n  function getInCoord(i, channels1) {\n    if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n      return \"\".concat(xShape[i], \" - \").concat(channels1[i], \" - 1\");\n    } else {\n      return \"\".concat(channels1[i]);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}