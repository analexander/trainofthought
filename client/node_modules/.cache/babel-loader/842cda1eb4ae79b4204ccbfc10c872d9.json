{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { getModelUris } from './common/getModelUris';\nimport { loadWeightMap } from './dom';\nimport { env } from './env';\n\nvar NeuralNetwork =\n/** @class */\nfunction () {\n  function NeuralNetwork(_name) {\n    this._name = _name;\n    this._params = undefined;\n    this._paramMappings = [];\n  }\n\n  Object.defineProperty(NeuralNetwork.prototype, \"params\", {\n    get: function get() {\n      return this._params;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NeuralNetwork.prototype, \"paramMappings\", {\n    get: function get() {\n      return this._paramMappings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NeuralNetwork.prototype, \"isLoaded\", {\n    get: function get() {\n      return !!this.params;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  NeuralNetwork.prototype.getParamFromPath = function (paramPath) {\n    var _a = this.traversePropertyPath(paramPath),\n        obj = _a.obj,\n        objProp = _a.objProp;\n\n    return obj[objProp];\n  };\n\n  NeuralNetwork.prototype.reassignParamFromPath = function (paramPath, tensor) {\n    var _a = this.traversePropertyPath(paramPath),\n        obj = _a.obj,\n        objProp = _a.objProp;\n\n    obj[objProp].dispose();\n    obj[objProp] = tensor;\n  };\n\n  NeuralNetwork.prototype.getParamList = function () {\n    var _this = this;\n\n    return this._paramMappings.map(function (_a) {\n      var paramPath = _a.paramPath;\n      return {\n        path: paramPath,\n        tensor: _this.getParamFromPath(paramPath)\n      };\n    });\n  };\n\n  NeuralNetwork.prototype.getTrainableParams = function () {\n    return this.getParamList().filter(function (param) {\n      return param.tensor instanceof tf.Variable;\n    });\n  };\n\n  NeuralNetwork.prototype.getFrozenParams = function () {\n    return this.getParamList().filter(function (param) {\n      return !(param.tensor instanceof tf.Variable);\n    });\n  };\n\n  NeuralNetwork.prototype.variable = function () {\n    var _this = this;\n\n    this.getFrozenParams().forEach(function (_a) {\n      var path = _a.path,\n          tensor = _a.tensor;\n\n      _this.reassignParamFromPath(path, tensor.variable());\n    });\n  };\n\n  NeuralNetwork.prototype.freeze = function () {\n    var _this = this;\n\n    this.getTrainableParams().forEach(function (_a) {\n      var path = _a.path,\n          variable = _a.tensor;\n      var tensor = tf.tensor(variable.dataSync());\n      variable.dispose();\n\n      _this.reassignParamFromPath(path, tensor);\n    });\n  };\n\n  NeuralNetwork.prototype.dispose = function (throwOnRedispose) {\n    if (throwOnRedispose === void 0) {\n      throwOnRedispose = true;\n    }\n\n    this.getParamList().forEach(function (param) {\n      if (throwOnRedispose && param.tensor.isDisposed) {\n        throw new Error(\"param tensor has already been disposed for path \" + param.path);\n      }\n\n      param.tensor.dispose();\n    });\n    this._params = undefined;\n  };\n\n  NeuralNetwork.prototype.serializeParams = function () {\n    return new Float32Array(this.getParamList().map(function (_a) {\n      var tensor = _a.tensor;\n      return Array.from(tensor.dataSync());\n    }).reduce(function (flat, arr) {\n      return flat.concat(arr);\n    }));\n  };\n\n  NeuralNetwork.prototype.load = function (weightsOrUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (weightsOrUrl instanceof Float32Array) {\n              this.extractWeights(weightsOrUrl);\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , this.loadFromUri(weightsOrUrl)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  NeuralNetwork.prototype.loadFromUri = function (uri) {\n    return __awaiter(this, void 0, void 0, function () {\n      var weightMap;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (uri && typeof uri !== 'string') {\n              throw new Error(this._name + \".loadFromUri - expected model uri\");\n            }\n\n            return [4\n            /*yield*/\n            , loadWeightMap(uri, this.getDefaultModelName())];\n\n          case 1:\n            weightMap = _a.sent();\n            this.loadFromWeightMap(weightMap);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  NeuralNetwork.prototype.loadFromDisk = function (filePath) {\n    return __awaiter(this, void 0, void 0, function () {\n      var readFile, _a, manifestUri, modelBaseUri, fetchWeightsFromDisk, loadWeights, manifest, _b, _c, weightMap;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (filePath && typeof filePath !== 'string') {\n              throw new Error(this._name + \".loadFromDisk - expected model file path\");\n            }\n\n            readFile = env.getEnv().readFile;\n            _a = getModelUris(filePath, this.getDefaultModelName()), manifestUri = _a.manifestUri, modelBaseUri = _a.modelBaseUri;\n\n            fetchWeightsFromDisk = function fetchWeightsFromDisk(filePaths) {\n              return Promise.all(filePaths.map(function (filePath) {\n                return readFile(filePath).then(function (buf) {\n                  return buf.buffer;\n                });\n              }));\n            };\n\n            loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk);\n            _c = (_b = JSON).parse;\n            return [4\n            /*yield*/\n            , readFile(manifestUri)];\n\n          case 1:\n            manifest = _c.apply(_b, [_d.sent().toString()]);\n            return [4\n            /*yield*/\n            , loadWeights(manifest, modelBaseUri)];\n\n          case 2:\n            weightMap = _d.sent();\n            this.loadFromWeightMap(weightMap);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  NeuralNetwork.prototype.loadFromWeightMap = function (weightMap) {\n    var _a = this.extractParamsFromWeigthMap(weightMap),\n        paramMappings = _a.paramMappings,\n        params = _a.params;\n\n    this._paramMappings = paramMappings;\n    this._params = params;\n  };\n\n  NeuralNetwork.prototype.extractWeights = function (weights) {\n    var _a = this.extractParams(weights),\n        paramMappings = _a.paramMappings,\n        params = _a.params;\n\n    this._paramMappings = paramMappings;\n    this._params = params;\n  };\n\n  NeuralNetwork.prototype.traversePropertyPath = function (paramPath) {\n    if (!this.params) {\n      throw new Error(\"traversePropertyPath - model has no loaded params\");\n    }\n\n    var result = paramPath.split('/').reduce(function (res, objProp) {\n      if (!res.nextObj.hasOwnProperty(objProp)) {\n        throw new Error(\"traversePropertyPath - object does not have property \" + objProp + \", for path \" + paramPath);\n      }\n\n      return {\n        obj: res.nextObj,\n        objProp: objProp,\n        nextObj: res.nextObj[objProp]\n      };\n    }, {\n      nextObj: this.params\n    });\n    var obj = result.obj,\n        objProp = result.objProp;\n\n    if (!obj || !objProp || !(obj[objProp] instanceof tf.Tensor)) {\n      throw new Error(\"traversePropertyPath - parameter is not a tensor, for path \" + paramPath);\n    }\n\n    return {\n      obj: obj,\n      objProp: objProp\n    };\n  };\n\n  return NeuralNetwork;\n}();\n\nexport { NeuralNetwork };","map":{"version":3,"sources":["../../src/NeuralNetwork.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { getModelUris } from './common/getModelUris';\r\nimport { loadWeightMap } from './dom';\r\nimport { env } from './env';\r\nvar NeuralNetwork = /** @class */ (function () {\r\n    function NeuralNetwork(_name) {\r\n        this._name = _name;\r\n        this._params = undefined;\r\n        this._paramMappings = [];\r\n    }\r\n    Object.defineProperty(NeuralNetwork.prototype, \"params\", {\r\n        get: function () { return this._params; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NeuralNetwork.prototype, \"paramMappings\", {\r\n        get: function () { return this._paramMappings; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NeuralNetwork.prototype, \"isLoaded\", {\r\n        get: function () { return !!this.params; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    NeuralNetwork.prototype.getParamFromPath = function (paramPath) {\r\n        var _a = this.traversePropertyPath(paramPath), obj = _a.obj, objProp = _a.objProp;\r\n        return obj[objProp];\r\n    };\r\n    NeuralNetwork.prototype.reassignParamFromPath = function (paramPath, tensor) {\r\n        var _a = this.traversePropertyPath(paramPath), obj = _a.obj, objProp = _a.objProp;\r\n        obj[objProp].dispose();\r\n        obj[objProp] = tensor;\r\n    };\r\n    NeuralNetwork.prototype.getParamList = function () {\r\n        var _this = this;\r\n        return this._paramMappings.map(function (_a) {\r\n            var paramPath = _a.paramPath;\r\n            return ({\r\n                path: paramPath,\r\n                tensor: _this.getParamFromPath(paramPath)\r\n            });\r\n        });\r\n    };\r\n    NeuralNetwork.prototype.getTrainableParams = function () {\r\n        return this.getParamList().filter(function (param) { return param.tensor instanceof tf.Variable; });\r\n    };\r\n    NeuralNetwork.prototype.getFrozenParams = function () {\r\n        return this.getParamList().filter(function (param) { return !(param.tensor instanceof tf.Variable); });\r\n    };\r\n    NeuralNetwork.prototype.variable = function () {\r\n        var _this = this;\r\n        this.getFrozenParams().forEach(function (_a) {\r\n            var path = _a.path, tensor = _a.tensor;\r\n            _this.reassignParamFromPath(path, tensor.variable());\r\n        });\r\n    };\r\n    NeuralNetwork.prototype.freeze = function () {\r\n        var _this = this;\r\n        this.getTrainableParams().forEach(function (_a) {\r\n            var path = _a.path, variable = _a.tensor;\r\n            var tensor = tf.tensor(variable.dataSync());\r\n            variable.dispose();\r\n            _this.reassignParamFromPath(path, tensor);\r\n        });\r\n    };\r\n    NeuralNetwork.prototype.dispose = function (throwOnRedispose) {\r\n        if (throwOnRedispose === void 0) { throwOnRedispose = true; }\r\n        this.getParamList().forEach(function (param) {\r\n            if (throwOnRedispose && param.tensor.isDisposed) {\r\n                throw new Error(\"param tensor has already been disposed for path \" + param.path);\r\n            }\r\n            param.tensor.dispose();\r\n        });\r\n        this._params = undefined;\r\n    };\r\n    NeuralNetwork.prototype.serializeParams = function () {\r\n        return new Float32Array(this.getParamList()\r\n            .map(function (_a) {\r\n            var tensor = _a.tensor;\r\n            return Array.from(tensor.dataSync());\r\n        })\r\n            .reduce(function (flat, arr) { return flat.concat(arr); }));\r\n    };\r\n    NeuralNetwork.prototype.load = function (weightsOrUrl) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (weightsOrUrl instanceof Float32Array) {\r\n                            this.extractWeights(weightsOrUrl);\r\n                            return [2 /*return*/];\r\n                        }\r\n                        return [4 /*yield*/, this.loadFromUri(weightsOrUrl)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    NeuralNetwork.prototype.loadFromUri = function (uri) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var weightMap;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (uri && typeof uri !== 'string') {\r\n                            throw new Error(this._name + \".loadFromUri - expected model uri\");\r\n                        }\r\n                        return [4 /*yield*/, loadWeightMap(uri, this.getDefaultModelName())];\r\n                    case 1:\r\n                        weightMap = _a.sent();\r\n                        this.loadFromWeightMap(weightMap);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    NeuralNetwork.prototype.loadFromDisk = function (filePath) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var readFile, _a, manifestUri, modelBaseUri, fetchWeightsFromDisk, loadWeights, manifest, _b, _c, weightMap;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        if (filePath && typeof filePath !== 'string') {\r\n                            throw new Error(this._name + \".loadFromDisk - expected model file path\");\r\n                        }\r\n                        readFile = env.getEnv().readFile;\r\n                        _a = getModelUris(filePath, this.getDefaultModelName()), manifestUri = _a.manifestUri, modelBaseUri = _a.modelBaseUri;\r\n                        fetchWeightsFromDisk = function (filePaths) { return Promise.all(filePaths.map(function (filePath) { return readFile(filePath).then(function (buf) { return buf.buffer; }); })); };\r\n                        loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk);\r\n                        _c = (_b = JSON).parse;\r\n                        return [4 /*yield*/, readFile(manifestUri)];\r\n                    case 1:\r\n                        manifest = _c.apply(_b, [(_d.sent()).toString()]);\r\n                        return [4 /*yield*/, loadWeights(manifest, modelBaseUri)];\r\n                    case 2:\r\n                        weightMap = _d.sent();\r\n                        this.loadFromWeightMap(weightMap);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    NeuralNetwork.prototype.loadFromWeightMap = function (weightMap) {\r\n        var _a = this.extractParamsFromWeigthMap(weightMap), paramMappings = _a.paramMappings, params = _a.params;\r\n        this._paramMappings = paramMappings;\r\n        this._params = params;\r\n    };\r\n    NeuralNetwork.prototype.extractWeights = function (weights) {\r\n        var _a = this.extractParams(weights), paramMappings = _a.paramMappings, params = _a.params;\r\n        this._paramMappings = paramMappings;\r\n        this._params = params;\r\n    };\r\n    NeuralNetwork.prototype.traversePropertyPath = function (paramPath) {\r\n        if (!this.params) {\r\n            throw new Error(\"traversePropertyPath - model has no loaded params\");\r\n        }\r\n        var result = paramPath.split('/').reduce(function (res, objProp) {\r\n            if (!res.nextObj.hasOwnProperty(objProp)) {\r\n                throw new Error(\"traversePropertyPath - object does not have property \" + objProp + \", for path \" + paramPath);\r\n            }\r\n            return { obj: res.nextObj, objProp: objProp, nextObj: res.nextObj[objProp] };\r\n        }, { nextObj: this.params });\r\n        var obj = result.obj, objProp = result.objProp;\r\n        if (!obj || !objProp || !(obj[objProp] instanceof tf.Tensor)) {\r\n            throw new Error(\"traversePropertyPath - parameter is not a tensor, for path \" + paramPath);\r\n        }\r\n        return { obj: obj, objProp: objProp };\r\n    };\r\n    return NeuralNetwork;\r\n}());\r\nexport { NeuralNetwork };\r\n//# sourceMappingURL=NeuralNetwork.js.map"]},"metadata":{},"sourceType":"module"}