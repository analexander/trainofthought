{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { getModelUris } from './common/getModelUris';\nimport { loadWeightMap } from './dom';\nimport { env } from './env';\n\nvar NeuralNetwork =\n/** @class */\nfunction () {\n  function NeuralNetwork(_name) {\n    this._name = _name;\n    this._params = undefined;\n    this._paramMappings = [];\n  }\n\n  Object.defineProperty(NeuralNetwork.prototype, \"params\", {\n    get: function get() {\n      return this._params;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NeuralNetwork.prototype, \"paramMappings\", {\n    get: function get() {\n      return this._paramMappings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NeuralNetwork.prototype, \"isLoaded\", {\n    get: function get() {\n      return !!this.params;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  NeuralNetwork.prototype.getParamFromPath = function (paramPath) {\n    var _a = this.traversePropertyPath(paramPath),\n        obj = _a.obj,\n        objProp = _a.objProp;\n\n    return obj[objProp];\n  };\n\n  NeuralNetwork.prototype.reassignParamFromPath = function (paramPath, tensor) {\n    var _a = this.traversePropertyPath(paramPath),\n        obj = _a.obj,\n        objProp = _a.objProp;\n\n    obj[objProp].dispose();\n    obj[objProp] = tensor;\n  };\n\n  NeuralNetwork.prototype.getParamList = function () {\n    var _this = this;\n\n    return this._paramMappings.map(function (_a) {\n      var paramPath = _a.paramPath;\n      return {\n        path: paramPath,\n        tensor: _this.getParamFromPath(paramPath)\n      };\n    });\n  };\n\n  NeuralNetwork.prototype.getTrainableParams = function () {\n    return this.getParamList().filter(function (param) {\n      return param.tensor instanceof tf.Variable;\n    });\n  };\n\n  NeuralNetwork.prototype.getFrozenParams = function () {\n    return this.getParamList().filter(function (param) {\n      return !(param.tensor instanceof tf.Variable);\n    });\n  };\n\n  NeuralNetwork.prototype.variable = function () {\n    var _this = this;\n\n    this.getFrozenParams().forEach(function (_a) {\n      var path = _a.path,\n          tensor = _a.tensor;\n\n      _this.reassignParamFromPath(path, tensor.variable());\n    });\n  };\n\n  NeuralNetwork.prototype.freeze = function () {\n    var _this = this;\n\n    this.getTrainableParams().forEach(function (_a) {\n      var path = _a.path,\n          variable = _a.tensor;\n      var tensor = tf.tensor(variable.dataSync());\n      variable.dispose();\n\n      _this.reassignParamFromPath(path, tensor);\n    });\n  };\n\n  NeuralNetwork.prototype.dispose = function (throwOnRedispose) {\n    if (throwOnRedispose === void 0) {\n      throwOnRedispose = true;\n    }\n\n    this.getParamList().forEach(function (param) {\n      if (throwOnRedispose && param.tensor.isDisposed) {\n        throw new Error(\"param tensor has already been disposed for path \" + param.path);\n      }\n\n      param.tensor.dispose();\n    });\n    this._params = undefined;\n  };\n\n  NeuralNetwork.prototype.serializeParams = function () {\n    return new Float32Array(this.getParamList().map(function (_a) {\n      var tensor = _a.tensor;\n      return Array.from(tensor.dataSync());\n    }).reduce(function (flat, arr) {\n      return flat.concat(arr);\n    }));\n  };\n\n  NeuralNetwork.prototype.load = function (weightsOrUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (weightsOrUrl instanceof Float32Array) {\n              this.extractWeights(weightsOrUrl);\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , this.loadFromUri(weightsOrUrl)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  NeuralNetwork.prototype.loadFromUri = function (uri) {\n    return __awaiter(this, void 0, void 0, function () {\n      var weightMap;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (uri && typeof uri !== 'string') {\n              throw new Error(this._name + \".loadFromUri - expected model uri\");\n            }\n\n            return [4\n            /*yield*/\n            , loadWeightMap(uri, this.getDefaultModelName())];\n\n          case 1:\n            weightMap = _a.sent();\n            this.loadFromWeightMap(weightMap);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  NeuralNetwork.prototype.loadFromDisk = function (filePath) {\n    return __awaiter(this, void 0, void 0, function () {\n      var readFile, _a, manifestUri, modelBaseUri, fetchWeightsFromDisk, loadWeights, manifest, _b, _c, weightMap;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (filePath && typeof filePath !== 'string') {\n              throw new Error(this._name + \".loadFromDisk - expected model file path\");\n            }\n\n            readFile = env.getEnv().readFile;\n            _a = getModelUris(filePath, this.getDefaultModelName()), manifestUri = _a.manifestUri, modelBaseUri = _a.modelBaseUri;\n\n            fetchWeightsFromDisk = function fetchWeightsFromDisk(filePaths) {\n              return Promise.all(filePaths.map(function (filePath) {\n                return readFile(filePath).then(function (buf) {\n                  return buf.buffer;\n                });\n              }));\n            };\n\n            loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk);\n            _c = (_b = JSON).parse;\n            return [4\n            /*yield*/\n            , readFile(manifestUri)];\n\n          case 1:\n            manifest = _c.apply(_b, [_d.sent().toString()]);\n            return [4\n            /*yield*/\n            , loadWeights(manifest, modelBaseUri)];\n\n          case 2:\n            weightMap = _d.sent();\n            this.loadFromWeightMap(weightMap);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  NeuralNetwork.prototype.loadFromWeightMap = function (weightMap) {\n    var _a = this.extractParamsFromWeigthMap(weightMap),\n        paramMappings = _a.paramMappings,\n        params = _a.params;\n\n    this._paramMappings = paramMappings;\n    this._params = params;\n  };\n\n  NeuralNetwork.prototype.extractWeights = function (weights) {\n    var _a = this.extractParams(weights),\n        paramMappings = _a.paramMappings,\n        params = _a.params;\n\n    this._paramMappings = paramMappings;\n    this._params = params;\n  };\n\n  NeuralNetwork.prototype.traversePropertyPath = function (paramPath) {\n    if (!this.params) {\n      throw new Error(\"traversePropertyPath - model has no loaded params\");\n    }\n\n    var result = paramPath.split('/').reduce(function (res, objProp) {\n      if (!res.nextObj.hasOwnProperty(objProp)) {\n        throw new Error(\"traversePropertyPath - object does not have property \" + objProp + \", for path \" + paramPath);\n      }\n\n      return {\n        obj: res.nextObj,\n        objProp: objProp,\n        nextObj: res.nextObj[objProp]\n      };\n    }, {\n      nextObj: this.params\n    });\n    var obj = result.obj,\n        objProp = result.objProp;\n\n    if (!obj || !objProp || !(obj[objProp] instanceof tf.Tensor)) {\n      throw new Error(\"traversePropertyPath - parameter is not a tensor, for path \" + paramPath);\n    }\n\n    return {\n      obj: obj,\n      objProp: objProp\n    };\n  };\n\n  return NeuralNetwork;\n}();\n\nexport { NeuralNetwork };","map":null,"metadata":{},"sourceType":"module"}