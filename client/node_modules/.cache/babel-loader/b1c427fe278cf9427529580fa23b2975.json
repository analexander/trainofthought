{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nearestDivisor } from '../util';\nimport { PARALLELIZE_THRESHOLD } from './reduce_util';\nexport function segOpComputeOptimalWindowSize(inSize, numSegments) {\n  var done = false;\n  var res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n\n  return res;\n}\nexport function computeOutShape(aShape, axis, numSegments) {\n  var outShape = [];\n  var rank = aShape.length;\n\n  for (var dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n\n  return outShape;\n}\nexport function collectGatherOpShapeInfo(x, indices, axis) {\n  var dimSize = x.shape[axis];\n  var outputShape = [];\n  var batchSize = 1;\n  var sliceSize = 1;\n\n  for (var i = 0; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n\n  for (var _i = 0; _i < indices.rank; _i++) {\n    outputShape.push(indices.shape[_i]);\n  }\n\n  for (var _i2 = axis + 1; _i2 < x.rank; _i2++) {\n    outputShape.push(x.shape[_i2]);\n    sliceSize *= x.shape[_i2];\n  }\n\n  return {\n    batchSize: batchSize,\n    sliceSize: sliceSize,\n    dimSize: dimSize,\n    outputShape: outputShape\n  };\n}","map":null,"metadata":{},"sourceType":"module"}