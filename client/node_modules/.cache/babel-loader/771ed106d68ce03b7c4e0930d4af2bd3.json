{"ast":null,"code":"import { Point } from '../classes';\nimport { FaceExpressions } from '../faceExpressionNet';\nimport { isWithFaceDetection } from '../factories/WithFaceDetection';\nimport { isWithFaceExpressions } from '../factories/WithFaceExpressions';\nimport { round } from '../utils';\nimport { DrawTextField } from './DrawTextField';\nexport function drawFaceExpressions(canvasArg, faceExpressions, minConfidence, textFieldAnchor) {\n  if (minConfidence === void 0) {\n    minConfidence = 0.1;\n  }\n\n  var faceExpressionsArray = Array.isArray(faceExpressions) ? faceExpressions : [faceExpressions];\n  faceExpressionsArray.forEach(function (e) {\n    var expr = e instanceof FaceExpressions ? e : isWithFaceExpressions(e) ? e.expressions : undefined;\n\n    if (!expr) {\n      throw new Error('drawFaceExpressions - expected faceExpressions to be FaceExpressions | WithFaceExpressions<{}> or array thereof');\n    }\n\n    var sorted = expr.asSortedArray();\n    var resultsToDisplay = sorted.filter(function (expr) {\n      return expr.probability > minConfidence;\n    });\n    var anchor = isWithFaceDetection(e) ? e.detection.box.bottomLeft : textFieldAnchor || new Point(0, 0);\n    var drawTextField = new DrawTextField(resultsToDisplay.map(function (expr) {\n      return expr.expression + \" (\" + round(expr.probability) + \")\";\n    }), anchor);\n    drawTextField.draw(canvasArg);\n  });\n}","map":{"version":3,"sources":["../../../src/draw/drawFaceExpressions.ts"],"names":[],"mappings":"AAAA,SAAiB,KAAjB,QAA8B,YAA9B;AACA,SAAS,eAAT,QAAgC,sBAAhC;AACA,SAAS,mBAAT,QAAoC,gCAApC;AACA,SAAS,qBAAT,QAA2D,kCAA3D;AACA,SAAS,KAAT,QAAsB,UAAtB;AACA,SAAS,aAAT,QAA8B,iBAA9B;AAIA,OAAM,SAAU,mBAAV,CACJ,SADI,EAEJ,eAFI,EAGJ,aAHI,EAIJ,eAJI,EAIoB;AADxB,MAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,GAAA;AAAmB;;AAGnB,MAAM,oBAAoB,GAAG,KAAK,CAAC,OAAN,CAAc,eAAd,IAAiC,eAAjC,GAAmD,CAAC,eAAD,CAAhF;AAEA,EAAA,oBAAoB,CAAC,OAArB,CAA6B,UAAA,CAAA,EAAC;AAC5B,QAAM,IAAI,GAAG,CAAC,YAAY,eAAb,GACT,CADS,GAER,qBAAqB,CAAC,CAAD,CAArB,GAA2B,CAAC,CAAC,WAA7B,GAA2C,SAFhD;;AAGA,QAAI,CAAC,IAAL,EAAW;AACT,YAAM,IAAI,KAAJ,CAAU,iHAAV,CAAN;AACD;;AAED,QAAM,MAAM,GAAG,IAAI,CAAC,aAAL,EAAf;AACA,QAAM,gBAAgB,GAAG,MAAM,CAAC,MAAP,CAAc,UAAA,IAAA,EAAI;AAAI,aAAA,IAAI,CAAC,WAAL,GAAA,aAAA;AAAgC,KAAtD,CAAzB;AAEA,QAAM,MAAM,GAAG,mBAAmB,CAAC,CAAD,CAAnB,GACX,CAAC,CAAC,SAAF,CAAY,GAAZ,CAAgB,UADL,GAEV,eAAe,IAAI,IAAI,KAAJ,CAAU,CAAV,EAAa,CAAb,CAFxB;AAIA,QAAM,aAAa,GAAG,IAAI,aAAJ,CACpB,gBAAgB,CAAC,GAAjB,CAAqB,UAAA,IAAA,EAAI;AAAI,aAAG,IAAI,CAAC,UAAL,GAAe,IAAf,GAAoB,KAAK,CAAC,IAAI,CAAC,WAAN,CAAzB,GAAH,GAAA;AAAiD,KAA9E,CADoB,EAEpB,MAFoB,CAAtB;AAIA,IAAA,aAAa,CAAC,IAAd,CAAmB,SAAnB;AACD,GApBD;AAqBD","sourceRoot":"","sourcesContent":["import { Point } from '../classes';\r\nimport { FaceExpressions } from '../faceExpressionNet';\r\nimport { isWithFaceDetection } from '../factories/WithFaceDetection';\r\nimport { isWithFaceExpressions } from '../factories/WithFaceExpressions';\r\nimport { round } from '../utils';\r\nimport { DrawTextField } from './DrawTextField';\r\nexport function drawFaceExpressions(canvasArg, faceExpressions, minConfidence, textFieldAnchor) {\r\n    if (minConfidence === void 0) { minConfidence = 0.1; }\r\n    var faceExpressionsArray = Array.isArray(faceExpressions) ? faceExpressions : [faceExpressions];\r\n    faceExpressionsArray.forEach(function (e) {\r\n        var expr = e instanceof FaceExpressions\r\n            ? e\r\n            : (isWithFaceExpressions(e) ? e.expressions : undefined);\r\n        if (!expr) {\r\n            throw new Error('drawFaceExpressions - expected faceExpressions to be FaceExpressions | WithFaceExpressions<{}> or array thereof');\r\n        }\r\n        var sorted = expr.asSortedArray();\r\n        var resultsToDisplay = sorted.filter(function (expr) { return expr.probability > minConfidence; });\r\n        var anchor = isWithFaceDetection(e)\r\n            ? e.detection.box.bottomLeft\r\n            : (textFieldAnchor || new Point(0, 0));\r\n        var drawTextField = new DrawTextField(resultsToDisplay.map(function (expr) { return expr.expression + \" (\" + round(expr.probability) + \")\"; }), anchor);\r\n        drawTextField.draw(canvasArg);\r\n    });\r\n}\r\n//# sourceMappingURL=drawFaceExpressions.js.map"]},"metadata":{},"sourceType":"module"}