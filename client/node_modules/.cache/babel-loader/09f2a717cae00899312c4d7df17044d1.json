{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = _package;\nexports.usage = 'Packs binary (and enclosing directory) into locally staged tarball';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar log = require('npmlog');\n\nvar versioning = require('./util/versioning.js');\n\nvar napi = require('./util/napi.js');\n\nvar write = require('fs').createWriteStream;\n\nvar existsAsync = fs.exists || path.exists;\n\nvar mkdirp = require('mkdirp');\n\nvar tar = require('tar');\n\nfunction _package(gyp, argv, callback) {\n  var packlist = require('npm-packlist');\n\n  var package_json = JSON.parse(fs.readFileSync('./package.json'));\n  var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  var from = opts.module_path;\n  var binary_module = path.join(from, opts.module_name + '.node');\n  existsAsync(binary_module, function (found) {\n    if (!found) {\n      return callback(new Error(\"Cannot package because \" + binary_module + \" missing: run `node-pre-gyp rebuild` first\"));\n    }\n\n    var tarball = opts.staged_tarball;\n\n    var filter_func = function filter_func(entry) {\n      // ensure directories are +x\n      // https://github.com/mapnik/node-mapnik/issues/262\n      log.info('package', 'packing ' + entry.path);\n      return true;\n    };\n\n    mkdirp(path.dirname(tarball), function (err) {\n      if (err) return callback(err);\n      packlist({\n        path: from\n      }).then(function (files) {\n        var base = path.basename(from);\n        files = files.map(function (file) {\n          return path.join(base, file);\n        });\n        tar.create({\n          portable: true,\n          gzip: true,\n          onentry: filter_func,\n          file: tarball,\n          cwd: path.dirname(from)\n        }, files, function (err) {\n          if (err) console.error('[' + package_json.name + '] ' + err.message);else log.info('package', 'Binary staged at \"' + tarball + '\"');\n          return callback(err);\n        });\n      }, callback);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}