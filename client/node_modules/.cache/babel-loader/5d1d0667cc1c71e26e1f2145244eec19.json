{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { extractWeightsFactory } from '../common';\n\nfunction extractorsFactory(extractWeights, paramMappings) {\n  function extractDepthwiseConvParams(numChannels, mappedPrefix) {\n    var filters = tf.tensor4d(extractWeights(3 * 3 * numChannels), [3, 3, numChannels, 1]);\n    var batch_norm_scale = tf.tensor1d(extractWeights(numChannels));\n    var batch_norm_offset = tf.tensor1d(extractWeights(numChannels));\n    var batch_norm_mean = tf.tensor1d(extractWeights(numChannels));\n    var batch_norm_variance = tf.tensor1d(extractWeights(numChannels));\n    paramMappings.push({\n      paramPath: mappedPrefix + \"/filters\"\n    }, {\n      paramPath: mappedPrefix + \"/batch_norm_scale\"\n    }, {\n      paramPath: mappedPrefix + \"/batch_norm_offset\"\n    }, {\n      paramPath: mappedPrefix + \"/batch_norm_mean\"\n    }, {\n      paramPath: mappedPrefix + \"/batch_norm_variance\"\n    });\n    return {\n      filters: filters,\n      batch_norm_scale: batch_norm_scale,\n      batch_norm_offset: batch_norm_offset,\n      batch_norm_mean: batch_norm_mean,\n      batch_norm_variance: batch_norm_variance\n    };\n  }\n\n  function extractConvParams(channelsIn, channelsOut, filterSize, mappedPrefix, isPointwiseConv) {\n    var filters = tf.tensor4d(extractWeights(channelsIn * channelsOut * filterSize * filterSize), [filterSize, filterSize, channelsIn, channelsOut]);\n    var bias = tf.tensor1d(extractWeights(channelsOut));\n    paramMappings.push({\n      paramPath: mappedPrefix + \"/filters\"\n    }, {\n      paramPath: mappedPrefix + \"/\" + (isPointwiseConv ? 'batch_norm_offset' : 'bias')\n    });\n    return {\n      filters: filters,\n      bias: bias\n    };\n  }\n\n  function extractPointwiseConvParams(channelsIn, channelsOut, filterSize, mappedPrefix) {\n    var _a = extractConvParams(channelsIn, channelsOut, filterSize, mappedPrefix, true),\n        filters = _a.filters,\n        bias = _a.bias;\n\n    return {\n      filters: filters,\n      batch_norm_offset: bias\n    };\n  }\n\n  function extractConvPairParams(channelsIn, channelsOut, mappedPrefix) {\n    var depthwise_conv = extractDepthwiseConvParams(channelsIn, mappedPrefix + \"/depthwise_conv\");\n    var pointwise_conv = extractPointwiseConvParams(channelsIn, channelsOut, 1, mappedPrefix + \"/pointwise_conv\");\n    return {\n      depthwise_conv: depthwise_conv,\n      pointwise_conv: pointwise_conv\n    };\n  }\n\n  function extractMobilenetV1Params() {\n    var conv_0 = extractPointwiseConvParams(3, 32, 3, 'mobilenetv1/conv_0');\n    var conv_1 = extractConvPairParams(32, 64, 'mobilenetv1/conv_1');\n    var conv_2 = extractConvPairParams(64, 128, 'mobilenetv1/conv_2');\n    var conv_3 = extractConvPairParams(128, 128, 'mobilenetv1/conv_3');\n    var conv_4 = extractConvPairParams(128, 256, 'mobilenetv1/conv_4');\n    var conv_5 = extractConvPairParams(256, 256, 'mobilenetv1/conv_5');\n    var conv_6 = extractConvPairParams(256, 512, 'mobilenetv1/conv_6');\n    var conv_7 = extractConvPairParams(512, 512, 'mobilenetv1/conv_7');\n    var conv_8 = extractConvPairParams(512, 512, 'mobilenetv1/conv_8');\n    var conv_9 = extractConvPairParams(512, 512, 'mobilenetv1/conv_9');\n    var conv_10 = extractConvPairParams(512, 512, 'mobilenetv1/conv_10');\n    var conv_11 = extractConvPairParams(512, 512, 'mobilenetv1/conv_11');\n    var conv_12 = extractConvPairParams(512, 1024, 'mobilenetv1/conv_12');\n    var conv_13 = extractConvPairParams(1024, 1024, 'mobilenetv1/conv_13');\n    return {\n      conv_0: conv_0,\n      conv_1: conv_1,\n      conv_2: conv_2,\n      conv_3: conv_3,\n      conv_4: conv_4,\n      conv_5: conv_5,\n      conv_6: conv_6,\n      conv_7: conv_7,\n      conv_8: conv_8,\n      conv_9: conv_9,\n      conv_10: conv_10,\n      conv_11: conv_11,\n      conv_12: conv_12,\n      conv_13: conv_13\n    };\n  }\n\n  function extractPredictionLayerParams() {\n    var conv_0 = extractPointwiseConvParams(1024, 256, 1, 'prediction_layer/conv_0');\n    var conv_1 = extractPointwiseConvParams(256, 512, 3, 'prediction_layer/conv_1');\n    var conv_2 = extractPointwiseConvParams(512, 128, 1, 'prediction_layer/conv_2');\n    var conv_3 = extractPointwiseConvParams(128, 256, 3, 'prediction_layer/conv_3');\n    var conv_4 = extractPointwiseConvParams(256, 128, 1, 'prediction_layer/conv_4');\n    var conv_5 = extractPointwiseConvParams(128, 256, 3, 'prediction_layer/conv_5');\n    var conv_6 = extractPointwiseConvParams(256, 64, 1, 'prediction_layer/conv_6');\n    var conv_7 = extractPointwiseConvParams(64, 128, 3, 'prediction_layer/conv_7');\n    var box_encoding_0_predictor = extractConvParams(512, 12, 1, 'prediction_layer/box_predictor_0/box_encoding_predictor');\n    var class_predictor_0 = extractConvParams(512, 9, 1, 'prediction_layer/box_predictor_0/class_predictor');\n    var box_encoding_1_predictor = extractConvParams(1024, 24, 1, 'prediction_layer/box_predictor_1/box_encoding_predictor');\n    var class_predictor_1 = extractConvParams(1024, 18, 1, 'prediction_layer/box_predictor_1/class_predictor');\n    var box_encoding_2_predictor = extractConvParams(512, 24, 1, 'prediction_layer/box_predictor_2/box_encoding_predictor');\n    var class_predictor_2 = extractConvParams(512, 18, 1, 'prediction_layer/box_predictor_2/class_predictor');\n    var box_encoding_3_predictor = extractConvParams(256, 24, 1, 'prediction_layer/box_predictor_3/box_encoding_predictor');\n    var class_predictor_3 = extractConvParams(256, 18, 1, 'prediction_layer/box_predictor_3/class_predictor');\n    var box_encoding_4_predictor = extractConvParams(256, 24, 1, 'prediction_layer/box_predictor_4/box_encoding_predictor');\n    var class_predictor_4 = extractConvParams(256, 18, 1, 'prediction_layer/box_predictor_4/class_predictor');\n    var box_encoding_5_predictor = extractConvParams(128, 24, 1, 'prediction_layer/box_predictor_5/box_encoding_predictor');\n    var class_predictor_5 = extractConvParams(128, 18, 1, 'prediction_layer/box_predictor_5/class_predictor');\n    var box_predictor_0 = {\n      box_encoding_predictor: box_encoding_0_predictor,\n      class_predictor: class_predictor_0\n    };\n    var box_predictor_1 = {\n      box_encoding_predictor: box_encoding_1_predictor,\n      class_predictor: class_predictor_1\n    };\n    var box_predictor_2 = {\n      box_encoding_predictor: box_encoding_2_predictor,\n      class_predictor: class_predictor_2\n    };\n    var box_predictor_3 = {\n      box_encoding_predictor: box_encoding_3_predictor,\n      class_predictor: class_predictor_3\n    };\n    var box_predictor_4 = {\n      box_encoding_predictor: box_encoding_4_predictor,\n      class_predictor: class_predictor_4\n    };\n    var box_predictor_5 = {\n      box_encoding_predictor: box_encoding_5_predictor,\n      class_predictor: class_predictor_5\n    };\n    return {\n      conv_0: conv_0,\n      conv_1: conv_1,\n      conv_2: conv_2,\n      conv_3: conv_3,\n      conv_4: conv_4,\n      conv_5: conv_5,\n      conv_6: conv_6,\n      conv_7: conv_7,\n      box_predictor_0: box_predictor_0,\n      box_predictor_1: box_predictor_1,\n      box_predictor_2: box_predictor_2,\n      box_predictor_3: box_predictor_3,\n      box_predictor_4: box_predictor_4,\n      box_predictor_5: box_predictor_5\n    };\n  }\n\n  return {\n    extractMobilenetV1Params: extractMobilenetV1Params,\n    extractPredictionLayerParams: extractPredictionLayerParams\n  };\n}\n\nexport function extractParams(weights) {\n  var paramMappings = [];\n\n  var _a = extractWeightsFactory(weights),\n      extractWeights = _a.extractWeights,\n      getRemainingWeights = _a.getRemainingWeights;\n\n  var _b = extractorsFactory(extractWeights, paramMappings),\n      extractMobilenetV1Params = _b.extractMobilenetV1Params,\n      extractPredictionLayerParams = _b.extractPredictionLayerParams;\n\n  var mobilenetv1 = extractMobilenetV1Params();\n  var prediction_layer = extractPredictionLayerParams();\n  var extra_dim = tf.tensor3d(extractWeights(5118 * 4), [1, 5118, 4]);\n  var output_layer = {\n    extra_dim: extra_dim\n  };\n  paramMappings.push({\n    paramPath: 'output_layer/extra_dim'\n  });\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\n  }\n\n  return {\n    params: {\n      mobilenetv1: mobilenetv1,\n      prediction_layer: prediction_layer,\n      output_layer: output_layer\n    },\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"sources":["../../../src/ssdMobilenetv1/extractParams.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { extractWeightsFactory } from '../common';\r\nfunction extractorsFactory(extractWeights, paramMappings) {\r\n    function extractDepthwiseConvParams(numChannels, mappedPrefix) {\r\n        var filters = tf.tensor4d(extractWeights(3 * 3 * numChannels), [3, 3, numChannels, 1]);\r\n        var batch_norm_scale = tf.tensor1d(extractWeights(numChannels));\r\n        var batch_norm_offset = tf.tensor1d(extractWeights(numChannels));\r\n        var batch_norm_mean = tf.tensor1d(extractWeights(numChannels));\r\n        var batch_norm_variance = tf.tensor1d(extractWeights(numChannels));\r\n        paramMappings.push({ paramPath: mappedPrefix + \"/filters\" }, { paramPath: mappedPrefix + \"/batch_norm_scale\" }, { paramPath: mappedPrefix + \"/batch_norm_offset\" }, { paramPath: mappedPrefix + \"/batch_norm_mean\" }, { paramPath: mappedPrefix + \"/batch_norm_variance\" });\r\n        return {\r\n            filters: filters,\r\n            batch_norm_scale: batch_norm_scale,\r\n            batch_norm_offset: batch_norm_offset,\r\n            batch_norm_mean: batch_norm_mean,\r\n            batch_norm_variance: batch_norm_variance\r\n        };\r\n    }\r\n    function extractConvParams(channelsIn, channelsOut, filterSize, mappedPrefix, isPointwiseConv) {\r\n        var filters = tf.tensor4d(extractWeights(channelsIn * channelsOut * filterSize * filterSize), [filterSize, filterSize, channelsIn, channelsOut]);\r\n        var bias = tf.tensor1d(extractWeights(channelsOut));\r\n        paramMappings.push({ paramPath: mappedPrefix + \"/filters\" }, { paramPath: mappedPrefix + \"/\" + (isPointwiseConv ? 'batch_norm_offset' : 'bias') });\r\n        return { filters: filters, bias: bias };\r\n    }\r\n    function extractPointwiseConvParams(channelsIn, channelsOut, filterSize, mappedPrefix) {\r\n        var _a = extractConvParams(channelsIn, channelsOut, filterSize, mappedPrefix, true), filters = _a.filters, bias = _a.bias;\r\n        return {\r\n            filters: filters,\r\n            batch_norm_offset: bias\r\n        };\r\n    }\r\n    function extractConvPairParams(channelsIn, channelsOut, mappedPrefix) {\r\n        var depthwise_conv = extractDepthwiseConvParams(channelsIn, mappedPrefix + \"/depthwise_conv\");\r\n        var pointwise_conv = extractPointwiseConvParams(channelsIn, channelsOut, 1, mappedPrefix + \"/pointwise_conv\");\r\n        return { depthwise_conv: depthwise_conv, pointwise_conv: pointwise_conv };\r\n    }\r\n    function extractMobilenetV1Params() {\r\n        var conv_0 = extractPointwiseConvParams(3, 32, 3, 'mobilenetv1/conv_0');\r\n        var conv_1 = extractConvPairParams(32, 64, 'mobilenetv1/conv_1');\r\n        var conv_2 = extractConvPairParams(64, 128, 'mobilenetv1/conv_2');\r\n        var conv_3 = extractConvPairParams(128, 128, 'mobilenetv1/conv_3');\r\n        var conv_4 = extractConvPairParams(128, 256, 'mobilenetv1/conv_4');\r\n        var conv_5 = extractConvPairParams(256, 256, 'mobilenetv1/conv_5');\r\n        var conv_6 = extractConvPairParams(256, 512, 'mobilenetv1/conv_6');\r\n        var conv_7 = extractConvPairParams(512, 512, 'mobilenetv1/conv_7');\r\n        var conv_8 = extractConvPairParams(512, 512, 'mobilenetv1/conv_8');\r\n        var conv_9 = extractConvPairParams(512, 512, 'mobilenetv1/conv_9');\r\n        var conv_10 = extractConvPairParams(512, 512, 'mobilenetv1/conv_10');\r\n        var conv_11 = extractConvPairParams(512, 512, 'mobilenetv1/conv_11');\r\n        var conv_12 = extractConvPairParams(512, 1024, 'mobilenetv1/conv_12');\r\n        var conv_13 = extractConvPairParams(1024, 1024, 'mobilenetv1/conv_13');\r\n        return {\r\n            conv_0: conv_0,\r\n            conv_1: conv_1,\r\n            conv_2: conv_2,\r\n            conv_3: conv_3,\r\n            conv_4: conv_4,\r\n            conv_5: conv_5,\r\n            conv_6: conv_6,\r\n            conv_7: conv_7,\r\n            conv_8: conv_8,\r\n            conv_9: conv_9,\r\n            conv_10: conv_10,\r\n            conv_11: conv_11,\r\n            conv_12: conv_12,\r\n            conv_13: conv_13\r\n        };\r\n    }\r\n    function extractPredictionLayerParams() {\r\n        var conv_0 = extractPointwiseConvParams(1024, 256, 1, 'prediction_layer/conv_0');\r\n        var conv_1 = extractPointwiseConvParams(256, 512, 3, 'prediction_layer/conv_1');\r\n        var conv_2 = extractPointwiseConvParams(512, 128, 1, 'prediction_layer/conv_2');\r\n        var conv_3 = extractPointwiseConvParams(128, 256, 3, 'prediction_layer/conv_3');\r\n        var conv_4 = extractPointwiseConvParams(256, 128, 1, 'prediction_layer/conv_4');\r\n        var conv_5 = extractPointwiseConvParams(128, 256, 3, 'prediction_layer/conv_5');\r\n        var conv_6 = extractPointwiseConvParams(256, 64, 1, 'prediction_layer/conv_6');\r\n        var conv_7 = extractPointwiseConvParams(64, 128, 3, 'prediction_layer/conv_7');\r\n        var box_encoding_0_predictor = extractConvParams(512, 12, 1, 'prediction_layer/box_predictor_0/box_encoding_predictor');\r\n        var class_predictor_0 = extractConvParams(512, 9, 1, 'prediction_layer/box_predictor_0/class_predictor');\r\n        var box_encoding_1_predictor = extractConvParams(1024, 24, 1, 'prediction_layer/box_predictor_1/box_encoding_predictor');\r\n        var class_predictor_1 = extractConvParams(1024, 18, 1, 'prediction_layer/box_predictor_1/class_predictor');\r\n        var box_encoding_2_predictor = extractConvParams(512, 24, 1, 'prediction_layer/box_predictor_2/box_encoding_predictor');\r\n        var class_predictor_2 = extractConvParams(512, 18, 1, 'prediction_layer/box_predictor_2/class_predictor');\r\n        var box_encoding_3_predictor = extractConvParams(256, 24, 1, 'prediction_layer/box_predictor_3/box_encoding_predictor');\r\n        var class_predictor_3 = extractConvParams(256, 18, 1, 'prediction_layer/box_predictor_3/class_predictor');\r\n        var box_encoding_4_predictor = extractConvParams(256, 24, 1, 'prediction_layer/box_predictor_4/box_encoding_predictor');\r\n        var class_predictor_4 = extractConvParams(256, 18, 1, 'prediction_layer/box_predictor_4/class_predictor');\r\n        var box_encoding_5_predictor = extractConvParams(128, 24, 1, 'prediction_layer/box_predictor_5/box_encoding_predictor');\r\n        var class_predictor_5 = extractConvParams(128, 18, 1, 'prediction_layer/box_predictor_5/class_predictor');\r\n        var box_predictor_0 = {\r\n            box_encoding_predictor: box_encoding_0_predictor,\r\n            class_predictor: class_predictor_0\r\n        };\r\n        var box_predictor_1 = {\r\n            box_encoding_predictor: box_encoding_1_predictor,\r\n            class_predictor: class_predictor_1\r\n        };\r\n        var box_predictor_2 = {\r\n            box_encoding_predictor: box_encoding_2_predictor,\r\n            class_predictor: class_predictor_2\r\n        };\r\n        var box_predictor_3 = {\r\n            box_encoding_predictor: box_encoding_3_predictor,\r\n            class_predictor: class_predictor_3\r\n        };\r\n        var box_predictor_4 = {\r\n            box_encoding_predictor: box_encoding_4_predictor,\r\n            class_predictor: class_predictor_4\r\n        };\r\n        var box_predictor_5 = {\r\n            box_encoding_predictor: box_encoding_5_predictor,\r\n            class_predictor: class_predictor_5\r\n        };\r\n        return {\r\n            conv_0: conv_0,\r\n            conv_1: conv_1,\r\n            conv_2: conv_2,\r\n            conv_3: conv_3,\r\n            conv_4: conv_4,\r\n            conv_5: conv_5,\r\n            conv_6: conv_6,\r\n            conv_7: conv_7,\r\n            box_predictor_0: box_predictor_0,\r\n            box_predictor_1: box_predictor_1,\r\n            box_predictor_2: box_predictor_2,\r\n            box_predictor_3: box_predictor_3,\r\n            box_predictor_4: box_predictor_4,\r\n            box_predictor_5: box_predictor_5\r\n        };\r\n    }\r\n    return {\r\n        extractMobilenetV1Params: extractMobilenetV1Params,\r\n        extractPredictionLayerParams: extractPredictionLayerParams\r\n    };\r\n}\r\nexport function extractParams(weights) {\r\n    var paramMappings = [];\r\n    var _a = extractWeightsFactory(weights), extractWeights = _a.extractWeights, getRemainingWeights = _a.getRemainingWeights;\r\n    var _b = extractorsFactory(extractWeights, paramMappings), extractMobilenetV1Params = _b.extractMobilenetV1Params, extractPredictionLayerParams = _b.extractPredictionLayerParams;\r\n    var mobilenetv1 = extractMobilenetV1Params();\r\n    var prediction_layer = extractPredictionLayerParams();\r\n    var extra_dim = tf.tensor3d(extractWeights(5118 * 4), [1, 5118, 4]);\r\n    var output_layer = {\r\n        extra_dim: extra_dim\r\n    };\r\n    paramMappings.push({ paramPath: 'output_layer/extra_dim' });\r\n    if (getRemainingWeights().length !== 0) {\r\n        throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\r\n    }\r\n    return {\r\n        params: {\r\n            mobilenetv1: mobilenetv1,\r\n            prediction_layer: prediction_layer,\r\n            output_layer: output_layer\r\n        },\r\n        paramMappings: paramMappings\r\n    };\r\n}\r\n//# sourceMappingURL=extractParams.js.map"]},"metadata":{},"sourceType":"module"}