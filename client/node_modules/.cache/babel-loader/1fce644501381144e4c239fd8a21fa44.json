{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Padding Layers.\n */\n// Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Pads the middle dimension of a 3D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\n *   end of the middle dimension (i.e., dimension 1).\n * @return A padded 3D `tf.Tensor`.\n */\n\nexport function temporalPadding(x, padding) {\n  return tidy(function () {\n    if (x.rank !== 3) {\n      throw new ValueError(\"temporalPadding expects input tensor to be 3-D, but received a \" + \"\".concat(x.rank, \"-D tensor.\"));\n    }\n\n    if (padding == null) {\n      padding = [1, 1];\n    }\n\n    if (padding.length !== 2) {\n      throw new ValueError(\"temporalPadding expects input padding pattern to be a length-2 \" + \"array, but received a length-\".concat(padding.length, \" array.\"));\n    }\n\n    var pattern = [[0, 0], padding, [0, 0]];\n    return tfc.pad(x, pattern);\n  });\n}\n/**\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\n *   dimensions, respectively.\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\n * @return Padded 4D `tf.Tensor`.\n */\n\nexport function spatial2dPadding(x, padding, dataFormat) {\n  return tidy(function () {\n    if (x.rank !== 4) {\n      throw new ValueError(\"temporalPadding expects input tensor to be 4-D, but received a \" + \"\".concat(x.rank, \"-D tensor.\"));\n    }\n\n    if (padding == null) {\n      padding = [[1, 1], [1, 1]];\n    }\n\n    if (padding.length !== 2 || padding[0].length !== 2 || padding[1].length !== 2) {\n      throw new ValueError('spatial2dPadding expects `padding` to be an Array of two Arrays, ' + 'each of which is an Array of two integers.');\n    }\n\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {\n      throw new ValueError(\"Unknown data format: \".concat(dataFormat, \". \") + \"Supported data formats are 'channelsLast' and 'channelsFirst.\");\n    }\n\n    var pattern;\n\n    if (dataFormat === 'channelsFirst') {\n      pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n    } else {\n      pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n    }\n\n    return tfc.pad(x, pattern);\n  });\n}\nexport var ZeroPadding2D = /*#__PURE__*/function (_Layer) {\n  _inherits(ZeroPadding2D, _Layer);\n\n  function ZeroPadding2D(args) {\n    var _this;\n\n    _classCallCheck(this, ZeroPadding2D);\n\n    if (args == null) {\n      args = {};\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ZeroPadding2D).call(this, args));\n    _this.dataFormat = args.dataFormat == null ? imageDataFormat() : args.dataFormat; // TODO(cais): Maybe refactor the following logic surrounding `padding`\n    //   into a helper method.\n\n    if (args.padding == null) {\n      _this.padding = [[1, 1], [1, 1]];\n    } else if (typeof args.padding === 'number') {\n      _this.padding = [[args.padding, args.padding], [args.padding, args.padding]];\n    } else {\n      args.padding = args.padding;\n\n      if (args.padding.length !== 2) {\n        throw new ValueError(\"ZeroPadding2D expects padding to be a length-2 array, but \" + \"received a length-\".concat(args.padding.length, \" array.\"));\n      }\n\n      var heightPadding;\n      var widthPadding;\n\n      if (typeof args.padding[0] === 'number') {\n        heightPadding = [args.padding[0], args.padding[0]];\n        widthPadding = [args.padding[1], args.padding[1]];\n      } else {\n        args.padding = args.padding;\n\n        if (args.padding[0].length !== 2) {\n          throw new ValueError(\"ZeroPadding2D expects height padding to be a length-2 array, \" + \"but received a length-\".concat(args.padding[0].length, \" array.\"));\n        }\n\n        heightPadding = args.padding[0];\n\n        if (args.padding[1].length !== 2) {\n          throw new ValueError(\"ZeroPadding2D expects width padding to be a length-2 array, \" + \"but received a length-\".concat(args.padding[1].length, \" array.\"));\n        }\n\n        widthPadding = args.padding[1];\n      }\n\n      _this.padding = [heightPadding, widthPadding];\n    }\n\n    _this.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n    return _this;\n  }\n\n  _createClass(ZeroPadding2D, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var rows;\n      var cols;\n\n      if (this.dataFormat === 'channelsFirst') {\n        if (inputShape[2] != null && inputShape[2] >= 0) {\n          rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n        } else {\n          rows = null;\n        }\n\n        if (inputShape[3] != null && inputShape[3] >= 0) {\n          cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n        } else {\n          cols = null;\n        }\n\n        return [inputShape[0], inputShape[1], rows, cols];\n      } else {\n        if (inputShape[1] != null && inputShape[1] >= 0) {\n          rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n        } else {\n          rows = null;\n        }\n\n        if (inputShape[2] != null && inputShape[2] >= 0) {\n          cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n        } else {\n          cols = null;\n        }\n\n        return [inputShape[0], rows, cols, inputShape[3]];\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n\n      return tidy(function () {\n        return spatial2dPadding(getExactlyOneTensor(inputs), _this2.padding, _this2.dataFormat);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        padding: this.padding,\n        dataFormat: this.dataFormat\n      };\n\n      var baseConfig = _get(_getPrototypeOf(ZeroPadding2D.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return ZeroPadding2D;\n}(Layer);\n/** @nocollapse */\n\nZeroPadding2D.className = 'ZeroPadding2D';\nserialization.registerClass(ZeroPadding2D);","map":null,"metadata":{},"sourceType":"module"}