{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nexport function assertParamsConsistent(shapes, axis) {\n  var rank = shapes[0].length;\n  shapes.forEach(function (shape, i) {\n    util.assert(shape.length === rank, function () {\n      return \"Error in concat\".concat(rank, \"D: rank of tensors[\").concat(i, \"] must be the same \") + \"as the rank of the rest (\".concat(rank, \")\");\n    });\n  });\n  util.assert(axis >= 0 && axis < rank, function () {\n    return \"Error in concat\".concat(rank, \"D: axis must be between 0 and \").concat(rank - 1, \".\");\n  });\n  var firstShape = shapes[0];\n  shapes.forEach(function (shape, i) {\n    for (var r = 0; r < rank; r++) {\n      util.assert(r === axis || shape[r] === firstShape[r], function () {\n        return \"Error in concat\".concat(rank, \"D: Shape of tensors[\").concat(i, \"] (\").concat(shape, \") \") + \"does not match the shape of the rest (\".concat(firstShape, \") \") + \"along the non-concatenated axis \".concat(i, \".\");\n      });\n    }\n  });\n}\nexport function computeOutShape(shapes, axis) {\n  var outputShape = shapes[0].slice();\n\n  for (var i = 1; i < shapes.length; i++) {\n    outputShape[axis] += shapes[i][axis];\n  }\n\n  return outputShape;\n}","map":null,"metadata":{},"sourceType":"module"}