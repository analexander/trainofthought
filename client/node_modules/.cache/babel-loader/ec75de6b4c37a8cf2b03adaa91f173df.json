{"ast":null,"code":"'use strict';\n\nvar objectAssign = require('object-assign');\n\nmodule.exports = function () {\n  return ThemeSetProto.newThemeSet();\n};\n\nvar ThemeSetProto = {};\nThemeSetProto.baseTheme = require('./base-theme.js');\n\nThemeSetProto.newTheme = function (parent, theme) {\n  if (!theme) {\n    theme = parent;\n    parent = this.baseTheme;\n  }\n\n  return objectAssign({}, parent, theme);\n};\n\nThemeSetProto.getThemeNames = function () {\n  return Object.keys(this.themes);\n};\n\nThemeSetProto.addTheme = function (name, parent, theme) {\n  this.themes[name] = this.newTheme(parent, theme);\n};\n\nThemeSetProto.addToAllThemes = function (theme) {\n  var themes = this.themes;\n  Object.keys(themes).forEach(function (name) {\n    objectAssign(themes[name], theme);\n  });\n  objectAssign(this.baseTheme, theme);\n};\n\nThemeSetProto.getTheme = function (name) {\n  if (!this.themes[name]) throw this.newMissingThemeError(name);\n  return this.themes[name];\n};\n\nThemeSetProto.setDefault = function (opts, name) {\n  if (name == null) {\n    name = opts;\n    opts = {};\n  }\n\n  var platform = opts.platform == null ? 'fallback' : opts.platform;\n  var hasUnicode = !!opts.hasUnicode;\n  var hasColor = !!opts.hasColor;\n  if (!this.defaults[platform]) this.defaults[platform] = {\n    true: {},\n    false: {}\n  };\n  this.defaults[platform][hasUnicode][hasColor] = name;\n};\n\nThemeSetProto.getDefault = function (opts) {\n  if (!opts) opts = {};\n  var platformName = opts.platform || process.platform;\n  var platform = this.defaults[platformName] || this.defaults.fallback;\n  var hasUnicode = !!opts.hasUnicode;\n  var hasColor = !!opts.hasColor;\n  if (!platform) throw this.newMissingDefaultThemeError(platformName, hasUnicode, hasColor);\n\n  if (!platform[hasUnicode][hasColor]) {\n    if (hasUnicode && hasColor && platform[!hasUnicode][hasColor]) {\n      hasUnicode = false;\n    } else if (hasUnicode && hasColor && platform[hasUnicode][!hasColor]) {\n      hasColor = false;\n    } else if (hasUnicode && hasColor && platform[!hasUnicode][!hasColor]) {\n      hasUnicode = false;\n      hasColor = false;\n    } else if (hasUnicode && !hasColor && platform[!hasUnicode][hasColor]) {\n      hasUnicode = false;\n    } else if (!hasUnicode && hasColor && platform[hasUnicode][!hasColor]) {\n      hasColor = false;\n    } else if (platform === this.defaults.fallback) {\n      throw this.newMissingDefaultThemeError(platformName, hasUnicode, hasColor);\n    }\n  }\n\n  if (platform[hasUnicode][hasColor]) {\n    return this.getTheme(platform[hasUnicode][hasColor]);\n  } else {\n    return this.getDefault(objectAssign({}, opts, {\n      platform: 'fallback'\n    }));\n  }\n};\n\nThemeSetProto.newMissingThemeError = function newMissingThemeError(name) {\n  var err = new Error('Could not find a gauge theme named \"' + name + '\"');\n  Error.captureStackTrace.call(err, newMissingThemeError);\n  err.theme = name;\n  err.code = 'EMISSINGTHEME';\n  return err;\n};\n\nThemeSetProto.newMissingDefaultThemeError = function newMissingDefaultThemeError(platformName, hasUnicode, hasColor) {\n  var err = new Error('Could not find a gauge theme for your platform/unicode/color use combo:\\n' + '    platform = ' + platformName + '\\n' + '    hasUnicode = ' + hasUnicode + '\\n' + '    hasColor = ' + hasColor);\n  Error.captureStackTrace.call(err, newMissingDefaultThemeError);\n  err.platform = platformName;\n  err.hasUnicode = hasUnicode;\n  err.hasColor = hasColor;\n  err.code = 'EMISSINGTHEME';\n  return err;\n};\n\nThemeSetProto.newThemeSet = function () {\n  var themeset = function themeset(opts) {\n    return themeset.getDefault(opts);\n  };\n\n  return objectAssign(themeset, ThemeSetProto, {\n    themes: objectAssign({}, this.themes),\n    baseTheme: objectAssign({}, this.baseTheme),\n    defaults: JSON.parse(JSON.stringify(this.defaults || {}))\n  });\n};","map":null,"metadata":{},"sourceType":"script"}