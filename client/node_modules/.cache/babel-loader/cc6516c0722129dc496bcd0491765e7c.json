{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = configure;\nexports.usage = 'Attempts to configure node-gyp or nw-gyp build';\n\nvar napi = require('./util/napi.js');\n\nvar compile = require('./util/compile.js');\n\nvar handle_gyp_opts = require('./util/handle_gyp_opts.js');\n\nfunction configure(gyp, argv, callback) {\n  handle_gyp_opts(gyp, argv, function (err, result) {\n    var final_args = result.gyp.concat(result.pre); // pull select node-gyp configure options out of the npm environ\n\n    var known_gyp_args = ['dist-url', 'python', 'nodedir', 'msvs_version'];\n    known_gyp_args.forEach(function (key) {\n      var val = gyp.opts[key] || gyp.opts[key.replace('-', '_')];\n\n      if (val) {\n        final_args.push('--' + key + '=' + val);\n      }\n    }); // --ensure=false tell node-gyp to re-install node development headers\n    // but it is only respected by node-gyp install, so we have to call install\n    // as a separate step if the user passes it\n\n    if (gyp.opts.ensure === false) {\n      var install_args = final_args.concat(['install', '--ensure=false']);\n      compile.run_gyp(install_args, result.opts, function (err) {\n        if (err) return callback(err);\n\n        if (result.unparsed.length > 0) {\n          final_args = final_args.concat(['--']).concat(result.unparsed);\n        }\n\n        compile.run_gyp(['configure'].concat(final_args), result.opts, function (err) {\n          return callback(err);\n        });\n      });\n    } else {\n      if (result.unparsed.length > 0) {\n        final_args = final_args.concat(['--']).concat(result.unparsed);\n      }\n\n      compile.run_gyp(['configure'].concat(final_args), result.opts, function (err) {\n        if (!err && result.opts.napi_build_version) {\n          napi.swap_build_dir_out(result.opts.napi_build_version);\n        }\n\n        return callback(err);\n      });\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script"}