{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\n\nfunction extractorsFactory(weightMap, paramMappings) {\n  var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  function extractConvParams(prefix) {\n    var filters = extractWeightEntry(prefix + \"/weights\", 4, prefix + \"/filters\");\n    var bias = extractWeightEntry(prefix + \"/bias\", 1);\n    return {\n      filters: filters,\n      bias: bias\n    };\n  }\n\n  function extractFCParams(prefix) {\n    var weights = extractWeightEntry(prefix + \"/weights\", 2);\n    var bias = extractWeightEntry(prefix + \"/bias\", 1);\n    return {\n      weights: weights,\n      bias: bias\n    };\n  }\n\n  function extractPReluParams(paramPath) {\n    return extractWeightEntry(paramPath, 1);\n  }\n\n  function extractSharedParams(prefix) {\n    var conv1 = extractConvParams(prefix + \"/conv1\");\n    var prelu1_alpha = extractPReluParams(prefix + \"/prelu1_alpha\");\n    var conv2 = extractConvParams(prefix + \"/conv2\");\n    var prelu2_alpha = extractPReluParams(prefix + \"/prelu2_alpha\");\n    var conv3 = extractConvParams(prefix + \"/conv3\");\n    var prelu3_alpha = extractPReluParams(prefix + \"/prelu3_alpha\");\n    return {\n      conv1: conv1,\n      prelu1_alpha: prelu1_alpha,\n      conv2: conv2,\n      prelu2_alpha: prelu2_alpha,\n      conv3: conv3,\n      prelu3_alpha: prelu3_alpha\n    };\n  }\n\n  function extractPNetParams() {\n    var sharedParams = extractSharedParams('pnet');\n    var conv4_1 = extractConvParams('pnet/conv4_1');\n    var conv4_2 = extractConvParams('pnet/conv4_2');\n    return __assign(__assign({}, sharedParams), {\n      conv4_1: conv4_1,\n      conv4_2: conv4_2\n    });\n  }\n\n  function extractRNetParams() {\n    var sharedParams = extractSharedParams('rnet');\n    var fc1 = extractFCParams('rnet/fc1');\n    var prelu4_alpha = extractPReluParams('rnet/prelu4_alpha');\n    var fc2_1 = extractFCParams('rnet/fc2_1');\n    var fc2_2 = extractFCParams('rnet/fc2_2');\n    return __assign(__assign({}, sharedParams), {\n      fc1: fc1,\n      prelu4_alpha: prelu4_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2\n    });\n  }\n\n  function extractONetParams() {\n    var sharedParams = extractSharedParams('onet');\n    var conv4 = extractConvParams('onet/conv4');\n    var prelu4_alpha = extractPReluParams('onet/prelu4_alpha');\n    var fc1 = extractFCParams('onet/fc1');\n    var prelu5_alpha = extractPReluParams('onet/prelu5_alpha');\n    var fc2_1 = extractFCParams('onet/fc2_1');\n    var fc2_2 = extractFCParams('onet/fc2_2');\n    var fc2_3 = extractFCParams('onet/fc2_3');\n    return __assign(__assign({}, sharedParams), {\n      conv4: conv4,\n      prelu4_alpha: prelu4_alpha,\n      fc1: fc1,\n      prelu5_alpha: prelu5_alpha,\n      fc2_1: fc2_1,\n      fc2_2: fc2_2,\n      fc2_3: fc2_3\n    });\n  }\n\n  return {\n    extractPNetParams: extractPNetParams,\n    extractRNetParams: extractRNetParams,\n    extractONetParams: extractONetParams\n  };\n}\n\nexport function extractParamsFromWeigthMap(weightMap) {\n  var paramMappings = [];\n\n  var _a = extractorsFactory(weightMap, paramMappings),\n      extractPNetParams = _a.extractPNetParams,\n      extractRNetParams = _a.extractRNetParams,\n      extractONetParams = _a.extractONetParams;\n\n  var pnet = extractPNetParams();\n  var rnet = extractRNetParams();\n  var onet = extractONetParams();\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n  return {\n    params: {\n      pnet: pnet,\n      rnet: rnet,\n      onet: onet\n    },\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"sources":["../../../src/mtcnn/extractParamsFromWeigthMap.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\r\nimport { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\r\nfunction extractorsFactory(weightMap, paramMappings) {\r\n    var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\r\n    function extractConvParams(prefix) {\r\n        var filters = extractWeightEntry(prefix + \"/weights\", 4, prefix + \"/filters\");\r\n        var bias = extractWeightEntry(prefix + \"/bias\", 1);\r\n        return { filters: filters, bias: bias };\r\n    }\r\n    function extractFCParams(prefix) {\r\n        var weights = extractWeightEntry(prefix + \"/weights\", 2);\r\n        var bias = extractWeightEntry(prefix + \"/bias\", 1);\r\n        return { weights: weights, bias: bias };\r\n    }\r\n    function extractPReluParams(paramPath) {\r\n        return extractWeightEntry(paramPath, 1);\r\n    }\r\n    function extractSharedParams(prefix) {\r\n        var conv1 = extractConvParams(prefix + \"/conv1\");\r\n        var prelu1_alpha = extractPReluParams(prefix + \"/prelu1_alpha\");\r\n        var conv2 = extractConvParams(prefix + \"/conv2\");\r\n        var prelu2_alpha = extractPReluParams(prefix + \"/prelu2_alpha\");\r\n        var conv3 = extractConvParams(prefix + \"/conv3\");\r\n        var prelu3_alpha = extractPReluParams(prefix + \"/prelu3_alpha\");\r\n        return { conv1: conv1, prelu1_alpha: prelu1_alpha, conv2: conv2, prelu2_alpha: prelu2_alpha, conv3: conv3, prelu3_alpha: prelu3_alpha };\r\n    }\r\n    function extractPNetParams() {\r\n        var sharedParams = extractSharedParams('pnet');\r\n        var conv4_1 = extractConvParams('pnet/conv4_1');\r\n        var conv4_2 = extractConvParams('pnet/conv4_2');\r\n        return __assign(__assign({}, sharedParams), { conv4_1: conv4_1, conv4_2: conv4_2 });\r\n    }\r\n    function extractRNetParams() {\r\n        var sharedParams = extractSharedParams('rnet');\r\n        var fc1 = extractFCParams('rnet/fc1');\r\n        var prelu4_alpha = extractPReluParams('rnet/prelu4_alpha');\r\n        var fc2_1 = extractFCParams('rnet/fc2_1');\r\n        var fc2_2 = extractFCParams('rnet/fc2_2');\r\n        return __assign(__assign({}, sharedParams), { fc1: fc1, prelu4_alpha: prelu4_alpha, fc2_1: fc2_1, fc2_2: fc2_2 });\r\n    }\r\n    function extractONetParams() {\r\n        var sharedParams = extractSharedParams('onet');\r\n        var conv4 = extractConvParams('onet/conv4');\r\n        var prelu4_alpha = extractPReluParams('onet/prelu4_alpha');\r\n        var fc1 = extractFCParams('onet/fc1');\r\n        var prelu5_alpha = extractPReluParams('onet/prelu5_alpha');\r\n        var fc2_1 = extractFCParams('onet/fc2_1');\r\n        var fc2_2 = extractFCParams('onet/fc2_2');\r\n        var fc2_3 = extractFCParams('onet/fc2_3');\r\n        return __assign(__assign({}, sharedParams), { conv4: conv4, prelu4_alpha: prelu4_alpha, fc1: fc1, prelu5_alpha: prelu5_alpha, fc2_1: fc2_1, fc2_2: fc2_2, fc2_3: fc2_3 });\r\n    }\r\n    return {\r\n        extractPNetParams: extractPNetParams,\r\n        extractRNetParams: extractRNetParams,\r\n        extractONetParams: extractONetParams\r\n    };\r\n}\r\nexport function extractParamsFromWeigthMap(weightMap) {\r\n    var paramMappings = [];\r\n    var _a = extractorsFactory(weightMap, paramMappings), extractPNetParams = _a.extractPNetParams, extractRNetParams = _a.extractRNetParams, extractONetParams = _a.extractONetParams;\r\n    var pnet = extractPNetParams();\r\n    var rnet = extractRNetParams();\r\n    var onet = extractONetParams();\r\n    disposeUnusedWeightTensors(weightMap, paramMappings);\r\n    return { params: { pnet: pnet, rnet: rnet, onet: onet }, paramMappings: paramMappings };\r\n}\r\n//# sourceMappingURL=extractParamsFromWeigthMap.js.map"]},"metadata":{},"sourceType":"module"}