{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { assert } from '../../util';\nimport { div } from '../div';\nimport { mul } from '../mul';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { split } from '../split';\nimport { squeeze } from '../squeeze';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\n/**\n * Gram-Schmidt orthogonalization.\n *\n * ```js\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\n * let y = tf.linalg.gramSchmidt(x);\n * y.print();\n * console.log('Othogonalized:');\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\n * console.log('First row direction maintained:');\n * const data = await y.array();\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\n * ```\n *\n * @param xs The vectors to be orthogonalized, in one of the two following\n *   formats:\n *   - An Array of `tf.Tensor1D`.\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\n *     of `xs`.\n *   In each case, all the vectors must have the same length and the length\n *   must be greater than or equal to the number of vectors.\n * @returns The orthogonalized and normalized vectors or matrix.\n *   Orthogonalization means that the vectors or the rows of the matrix\n *   are orthogonal (zero inner products). Normalization means that each\n *   vector or each row of the matrix has an L2 norm that equals `1`.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\n\nfunction gramSchmidt_(xs) {\n  var inputIsTensor2D;\n\n  if (Array.isArray(xs)) {\n    (function () {\n      inputIsTensor2D = false;\n      assert(xs != null && xs.length > 0, function () {\n        return 'Gram-Schmidt process: input must not be null, undefined, or ' + 'empty';\n      });\n      var dim = xs[0].shape[0];\n\n      var _loop = function _loop(i) {\n        assert(xs[i].shape[0] === dim, function () {\n          return 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' + \"(\".concat(xs[i].shape[0], \" vs. \").concat(dim, \")\");\n        });\n      };\n\n      for (var i = 1; i < xs.length; ++i) {\n        _loop(i);\n      }\n    })();\n  } else {\n    inputIsTensor2D = true;\n    xs = split(xs, xs.shape[0], 0).map(function (x) {\n      return squeeze(x, [0]);\n    });\n  }\n\n  assert(xs.length <= xs[0].shape[0], function () {\n    return \"Gram-Schmidt: Number of vectors (\".concat(xs.length, \") exceeds \") + \"number of dimensions (\".concat(xs[0].shape[0], \").\");\n  });\n  var ys = [];\n  var xs1d = xs;\n\n  var _loop2 = function _loop2(i) {\n    ys.push(ENGINE.tidy(function () {\n      var x = xs1d[i];\n\n      if (i > 0) {\n        for (var j = 0; j < i; ++j) {\n          var proj = mul(sum(mul(ys[j], x)), ys[j]);\n          x = sub(x, proj);\n        }\n      }\n\n      return div(x, norm(x, 'euclidean'));\n    }));\n  };\n\n  for (var i = 0; i < xs.length; ++i) {\n    _loop2(i);\n  }\n\n  if (inputIsTensor2D) {\n    return stack(ys, 0);\n  } else {\n    return ys;\n  }\n}\n\nexport var gramSchmidt = op({\n  gramSchmidt_: gramSchmidt_\n});","map":null,"metadata":{},"sourceType":"module"}