{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { conv2d } from './conv2d';\nimport { depthwiseConv2d } from './depthwise_conv2d';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * 2-D convolution with separable filters.\n *\n * Performs a depthwise convolution that acts separately on channels followed\n * by a pointwise convolution that mixes channels. Note that this is\n * separability between dimensions [1, 2] and 3, not spatial separability\n * between dimensions 1 and 2.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\n *     the filter used in the first step.\n * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape\n *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is\n *     the filter used in the second step.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\n\nfunction separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad) {\n  var dilation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1];\n  var dataFormat = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'NHWC';\n  var $x = convertToTensor(x, 'x', 'separableConv2d');\n  var $depthwiseFilter = convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');\n  var $pointwiseFilter = convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');\n  var x4D = $x;\n  var reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  if (dataFormat === 'NCHW') {\n    throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' + 'NHWC is supported');\n  }\n\n  util.assert(x4D.rank === 4, function () {\n    return \"Error in separableConv2d: input must be rank 4, but got \" + \"rank \".concat(x4D.rank, \".\");\n  });\n  util.assert($depthwiseFilter.rank === 4, function () {\n    return \"Error in separableConv2d: depthwise filter must be rank 4, but \" + \"got rank \".concat($depthwiseFilter.rank, \".\");\n  });\n  util.assert($pointwiseFilter.rank === 4, function () {\n    return \"Error in separableConv2d: pointwise filter must be rank 4, but \" + \"got rank \".concat($depthwiseFilter.rank, \".\");\n  });\n  util.assert($pointwiseFilter.shape[0] === 1, function () {\n    return \"Error in separableConv2d: the first dimension of pointwise filter \" + \" must be 1, but got \".concat($pointwiseFilter.shape[0], \".\");\n  });\n  util.assert($pointwiseFilter.shape[1] === 1, function () {\n    return \"Error in separableConv2d: the second dimension of pointwise \" + \"filter must be 1, but got \".concat($pointwiseFilter.shape[1], \".\");\n  });\n  var inChannels = $depthwiseFilter.shape[2];\n  var channelMultiplier = $depthwiseFilter.shape[3];\n  util.assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, function () {\n    return \"Error in separableConv2d: the third dimension of pointwise filter \" + \"must be \".concat(inChannels * channelMultiplier, \", \") + \"but got \".concat($pointwiseFilter.shape[2], \".\");\n  });\n  var depthwise = depthwiseConv2d(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);\n  var pointwiseStride = 1;\n  var res = conv2d(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport var separableConv2d = op({\n  separableConv2d_: separableConv2d_\n});","map":null,"metadata":{},"sourceType":"module"}