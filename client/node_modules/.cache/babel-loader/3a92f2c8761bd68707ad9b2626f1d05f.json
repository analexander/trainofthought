{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { Point } from '../classes';\nimport { Dimensions } from '../classes/Dimensions';\nexport function isTensor(tensor, dim) {\n  return tensor instanceof tf.Tensor && tensor.shape.length === dim;\n}\nexport function isTensor1D(tensor) {\n  return isTensor(tensor, 1);\n}\nexport function isTensor2D(tensor) {\n  return isTensor(tensor, 2);\n}\nexport function isTensor3D(tensor) {\n  return isTensor(tensor, 3);\n}\nexport function isTensor4D(tensor) {\n  return isTensor(tensor, 4);\n}\nexport function isFloat(num) {\n  return num % 1 !== 0;\n}\nexport function isEven(num) {\n  return num % 2 === 0;\n}\nexport function round(num, prec) {\n  if (prec === void 0) {\n    prec = 2;\n  }\n\n  var f = Math.pow(10, prec);\n  return Math.floor(num * f) / f;\n}\nexport function isDimensions(obj) {\n  return obj && obj.width && obj.height;\n}\nexport function computeReshapedDimensions(_a, inputSize) {\n  var width = _a.width,\n      height = _a.height;\n  var scale = inputSize / Math.max(height, width);\n  return new Dimensions(Math.round(width * scale), Math.round(height * scale));\n}\nexport function getCenterPoint(pts) {\n  return pts.reduce(function (sum, pt) {\n    return sum.add(pt);\n  }, new Point(0, 0)).div(new Point(pts.length, pts.length));\n}\nexport function range(num, start, step) {\n  return Array(num).fill(0).map(function (_, i) {\n    return start + i * step;\n  });\n}\nexport function isValidNumber(num) {\n  return !!num && num !== Infinity && num !== -Infinity && !isNaN(num) || num === 0;\n}\nexport function isValidProbablitiy(num) {\n  return isValidNumber(num) && 0 <= num && num <= 1.0;\n}","map":null,"metadata":{},"sourceType":"module"}