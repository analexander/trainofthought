{"ast":null,"code":"import _regeneratorRuntime from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\n\nexport var HashTable = /*#__PURE__*/function () {\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  function HashTable(keyDType, valueDType) {\n    _classCallCheck(this, HashTable);\n\n    this.keyDType = keyDType;\n    this.valueDType = valueDType;\n    this.handle = scalar(0); // tslint:disable-next-line: no-any\n\n    this.tensorMap = new Map();\n    keep(this.handle);\n  }\n\n  _createClass(HashTable, [{\n    key: \"clearAndClose\",\n\n    /**\n     * Dispose the tensors and handle and clear the hashtable.\n     */\n    value: function clearAndClose() {\n      this.tensorMap.forEach(function (value) {\n        return value.dispose();\n      });\n      this.tensorMap.clear();\n      this.handle.dispose();\n    }\n    /**\n     * The number of items in the hash table.\n     */\n\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.tensorMap.size;\n    }\n    /**\n     * Replaces the contents of the table with the specified keys and values.\n     * @param keys Keys to store in the hashtable.\n     * @param values Values to store in the hashtable.\n     */\n\n  }, {\n    key: \"import\",\n    value: function () {\n      var _import2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(keys, values) {\n        var _this = this;\n\n        var $keys;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.checkKeyAndValueTensor(keys, values); // We only store the primitive values of the keys, this allows lookup\n                // to be O(1).\n\n                _context.next = 3;\n                return keys.data();\n\n              case 3:\n                $keys = _context.sent;\n                // Clear the hashTable before inserting new values.\n                this.tensorMap.forEach(function (value) {\n                  return value.dispose();\n                });\n                this.tensorMap.clear();\n                return _context.abrupt(\"return\", tidy(function () {\n                  var $values = unstack(values);\n                  var keysLength = $keys.length;\n                  var valuesLength = $values.length;\n                  util.assert(keysLength === valuesLength, function () {\n                    return \"The number of elements doesn't match, keys has \" + \"\".concat(keysLength, \" elements, the values has \").concat(valuesLength, \" \") + \"elements.\";\n                  });\n\n                  for (var i = 0; i < keysLength; i++) {\n                    var key = $keys[i];\n                    var value = $values[i];\n                    keep(value);\n\n                    _this.tensorMap.set(key, value);\n                  }\n\n                  return _this.handle;\n                }));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _import(_x, _x2) {\n        return _import2.apply(this, arguments);\n      }\n\n      return _import;\n    }()\n    /**\n     * Looks up keys in a hash table, outputs the corresponding values.\n     *\n     * Performs batch lookups, for every element in the key tensor, `find`\n     * stacks the corresponding value into the return tensor.\n     *\n     * If an element is not present in the table, the given `defaultValue` is\n     * used.\n     *\n     * @param keys Keys to look up. Must have the same type as the keys of the\n     *     table.\n     * @param defaultValue The scalar `defaultValue` is the value output for keys\n     *     not present in the table. It must also be of the same type as the\n     *     table values.\n     */\n\n  }, {\n    key: \"find\",\n    value: function () {\n      var _find = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(keys, defaultValue) {\n        var _this2 = this;\n\n        var $keys;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.checkKeyAndValueTensor(keys, defaultValue);\n                _context2.next = 3;\n                return keys.data();\n\n              case 3:\n                $keys = _context2.sent;\n                return _context2.abrupt(\"return\", tidy(function () {\n                  var result = [];\n\n                  for (var i = 0; i < $keys.length; i++) {\n                    var key = $keys[i];\n\n                    var value = _this2.findWithDefault(key, defaultValue);\n\n                    result.push(value);\n                  }\n\n                  return stack(result);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function find(_x3, _x4) {\n        return _find.apply(this, arguments);\n      }\n\n      return find;\n    }() // tslint:disable-next-line: no-any\n\n  }, {\n    key: \"findWithDefault\",\n    value: function findWithDefault(key, defaultValue) {\n      var result = this.tensorMap.get(key);\n      return result != null ? result : defaultValue;\n    }\n  }, {\n    key: \"checkKeyAndValueTensor\",\n    value: function checkKeyAndValueTensor(key, value) {\n      if (key.dtype !== this.keyDType) {\n        throw new Error(\"Expect key dtype \".concat(this.keyDType, \", but got \") + \"\".concat(key.dtype));\n      }\n\n      if (value.dtype !== this.valueDType) {\n        throw new Error(\"Expect value dtype \".concat(this.valueDType, \", but got \") + \"\".concat(value.dtype));\n      }\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.handle.id;\n    }\n  }]);\n\n  return HashTable;\n}();","map":null,"metadata":{},"sourceType":"module"}