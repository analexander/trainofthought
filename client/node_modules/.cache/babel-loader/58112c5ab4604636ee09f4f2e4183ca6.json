{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { deprecationWarn } from '../globals';\nimport { MaxPool3D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the 3D max pooling.\n *\n * ```js\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\n * const result = tf.maxPool3d(x, 2, 1, 'valid');\n * result.print();\n * ```\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     `[batch, depth, height, width, inChannels]`.\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     If `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideDepth == strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations Deprecated, this field will be gone in v3.0.0.\n *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\n\nfunction maxPool3d_(x) {\n  var filterSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [1, 1, 1];\n  var strides = arguments.length > 2 ? arguments[2] : undefined;\n  var pad = arguments.length > 3 ? arguments[3] : undefined;\n  var dimRoundingMode = arguments.length > 4 ? arguments[4] : undefined;\n  var dataFormat = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'NDHWC';\n  var dilations = arguments.length > 6 ? arguments[6] : undefined;\n\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  } else {\n    deprecationWarn('dilations is deprecated, this field will be gone in ' + 'v3.0.0.');\n  }\n\n  var $x = convertToTensor(x, 'x', 'maxPool3d');\n  var x5D = $x;\n  var reshapedTo5D = false;\n\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n\n  util.assert(x5D.rank === 5, function () {\n    return \"Error in maxPool3d: x must be rank 5 but got rank \".concat(x5D.rank, \".\");\n  });\n  util.assert(dataFormat === 'NDHWC', function () {\n    return \"Error in maxPool3d: Only NDHWC is currently supported, \" + \"but got dataFormat of \".concat(dataFormat);\n  });\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), function () {\n    return 'Error in maxPool3d: Either strides or dilations must be 1. ' + \"Got strides \".concat(strides, \" and dilations '\").concat(dilations, \"'\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in maxPool3d: pad must be an integer when using, \" + \"dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\");\n    });\n  }\n\n  var forward = function forward(backend, save) {\n    if (dilations == null) {\n      dilations = [1, 1, 1];\n    }\n\n    var convInfo = conv_util.computePool3DInfo(x5D.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n    var y = backend.maxPool3d(x5D, convInfo);\n    save([x5D, y]);\n    return y;\n  };\n\n  var inputs = {\n    x: x5D\n  };\n  var attrs = {\n    filterSize: filterSize,\n    strides: strides,\n    pad: pad,\n    dimRoundingMode: dimRoundingMode,\n    dataFormat: dataFormat,\n    dilations: dilations\n  };\n  var res = ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , MaxPool3D, attrs);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport var maxPool3d = op({\n  maxPool3d_: maxPool3d_\n});","map":null,"metadata":{},"sourceType":"module"}