{"ast":null,"code":"//  Simple cookie handling implementation based on the standard RFC 6265.\n//\n//  This module just has two functionalities:\n//    - Parse a set-cookie-header as a key value object\n//    - Write a cookie-string from a key value object\n//\n//  All cookie attributes are ignored.\nvar unescape = require('querystring').unescape;\n\nvar COOKIE_PAIR = /^([^=\\s]+)\\s*=\\s*(\"?)\\s*(.*)\\s*\\2\\s*$/;\nvar EXCLUDED_CHARS = /[\\x00-\\x1F\\x7F\\x3B\\x3B\\s\\\"\\,\\\\\"%]/g;\nvar TRAILING_SEMICOLON = /\\x3B+$/;\nvar SEP_SEMICOLON = /\\s*\\x3B\\s*/; // i know these should be 'const', but I'd like to keep\n// supporting earlier node.js versions as long as I can. :)\n\nvar KEY_INDEX = 1; // index of key from COOKIE_PAIR match\n\nvar VALUE_INDEX = 3; // index of value from COOKIE_PAIR match\n// Returns a copy str trimmed and without trainling semicolon.\n\nfunction cleanCookieString(str) {\n  return str.trim().replace(/\\x3B+$/, '');\n}\n\nfunction getFirstPair(str) {\n  var index = str.indexOf('\\x3B');\n  return index === -1 ? str : str.substr(0, index);\n} // Returns a encoded copy of str based on RFC6265 S4.1.1.\n\n\nfunction encodeCookieComponent(str) {\n  return str.toString().replace(EXCLUDED_CHARS, encodeURIComponent);\n} // Parses a set-cookie-string based on the standard defined in RFC6265 S4.1.1.\n\n\nfunction parseSetCookieString(str) {\n  str = cleanCookieString(str);\n  str = getFirstPair(str);\n  var res = COOKIE_PAIR.exec(str);\n  if (!res || !res[VALUE_INDEX]) return null;\n  return {\n    name: unescape(res[KEY_INDEX]),\n    value: unescape(res[VALUE_INDEX])\n  };\n} // Parses a set-cookie-header and returns a key/value object.\n// Each key represents the name of a cookie.\n\n\nfunction parseSetCookieHeader(header) {\n  if (!header) return {};\n  header = Array.isArray(header) ? header : [header];\n  return header.reduce(function (res, str) {\n    var cookie = parseSetCookieString(str);\n    if (cookie) res[cookie.name] = cookie.value;\n    return res;\n  }, {});\n} // Writes a set-cookie-string based on the standard definded in RFC6265 S4.1.1.\n\n\nfunction writeCookieString(obj) {\n  return Object.keys(obj).reduce(function (str, name) {\n    var encodedName = encodeCookieComponent(name);\n    var encodedValue = encodeCookieComponent(obj[name]);\n    str += (str ? '; ' : '') + encodedName + '=' + encodedValue;\n    return str;\n  }, '');\n} // returns a key/val object from an array of cookie strings\n\n\nexports.read = parseSetCookieHeader; // writes a cookie string header\n\nexports.write = writeCookieString;","map":null,"metadata":{},"sourceType":"script"}