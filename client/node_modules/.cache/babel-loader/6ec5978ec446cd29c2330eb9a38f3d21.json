{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concat(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var axis = attrs.axis;\n  var $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  var outShape = backend_util.computeOutShape(inputs.map(function (t) {\n    return t.shape;\n  }), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  } // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n\n\n  var $inputs = inputs.filter(function (t) {\n    return util.sizeFromShape(t.shape) > 0;\n  });\n\n  if ($inputs.length === 1) {\n    return $inputs[0];\n  }\n\n  var shapes = $inputs.map(function (t) {\n    return t.shape;\n  });\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    var reals = $inputs.map(function (t) {\n      return real({\n        inputs: {\n          input: t\n        },\n        backend: backend\n      });\n    });\n    var imags = $inputs.map(function (t) {\n      return imag({\n        inputs: {\n          input: t\n        },\n        backend: backend\n      });\n    });\n    var realConcated = concat({\n      inputs: reals,\n      backend: backend,\n      attrs: {\n        axis: $axis\n      }\n    });\n    var imagConcated = concat({\n      inputs: imags,\n      backend: backend,\n      attrs: {\n        axis: $axis\n      }\n    });\n    var result = complex({\n      inputs: {\n        real: realConcated,\n        imag: imagConcated\n      },\n      backend: backend\n    });\n    reals.forEach(function (r) {\n      return backend.disposeIntermediateTensorInfo(r);\n    });\n    imags.forEach(function (i) {\n      return backend.disposeIntermediateTensorInfo(i);\n    });\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n    return result;\n  } // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n\n\n  var inputs2D = $inputs.map(function (t) {\n    var innerSize = util.sizeFromShape(t.shape.slice($axis));\n    var shape = [-1, innerSize];\n    return reshape({\n      inputs: {\n        x: t\n      },\n      backend: backend,\n      attrs: {\n        shape: shape\n      }\n    });\n  }); // Concats 2d tensors along axis=1.\n\n  outShape = backend_util.computeOutShape(inputs2D.map(function (t) {\n    return t.shape;\n  }), 1\n  /* axis */\n  );\n  var outVals = util.getTypedArrayFromDType($inputs[0].dtype, util.sizeFromShape(outShape));\n\n  if (inputs2D[0].shape[0] === 1) {\n    // Use built-in TypedArray.set() method for speed.\n    var offset = 0;\n    inputs2D.forEach(function (t) {\n      var val = backend.data.get(t.dataId).values;\n      var size = util.sizeFromShape(t.shape);\n      outVals.set(val, offset);\n      offset += size;\n    });\n  } else {\n    var colOffset = 0;\n    inputs2D.forEach(function (t) {\n      var tVals = backend.data.get(t.dataId).values;\n      var tIdx = 0;\n\n      for (var row = 0; row < t.shape[0]; ++row) {\n        var resIdx = row * outShape[1] + colOffset;\n\n        for (var col = 0; col < t.shape[1]; ++col) {\n          outVals[resIdx + col] = tVals[tIdx++];\n        }\n      }\n\n      colOffset += t.shape[1];\n    });\n  }\n\n  var finalOutShape = backend_util.computeOutShape($inputs.map(function (t) {\n    return t.shape;\n  }), $axis);\n  var outInfo = backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n  inputs2D.forEach(function (t) {\n    return backend.disposeIntermediateTensorInfo(t);\n  });\n  return outInfo;\n}\nexport var concatConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat\n};","map":null,"metadata":{},"sourceType":"module"}