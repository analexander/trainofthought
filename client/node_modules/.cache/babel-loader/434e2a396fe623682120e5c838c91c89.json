{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { extractWeightsFactory } from '../common';\nimport { isFloat } from '../utils';\n\nfunction extractorsFactory(extractWeights, paramMappings) {\n  function extractFilterValues(numFilterValues, numFilters, filterSize) {\n    var weights = extractWeights(numFilterValues);\n    var depth = weights.length / (numFilters * filterSize * filterSize);\n\n    if (isFloat(depth)) {\n      throw new Error(\"depth has to be an integer: \" + depth + \", weights.length: \" + weights.length + \", numFilters: \" + numFilters + \", filterSize: \" + filterSize);\n    }\n\n    return tf.tidy(function () {\n      return tf.transpose(tf.tensor4d(weights, [numFilters, depth, filterSize, filterSize]), [2, 3, 1, 0]);\n    });\n  }\n\n  function extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix) {\n    var filters = extractFilterValues(numFilterValues, numFilters, filterSize);\n    var bias = tf.tensor1d(extractWeights(numFilters));\n    paramMappings.push({\n      paramPath: mappedPrefix + \"/filters\"\n    }, {\n      paramPath: mappedPrefix + \"/bias\"\n    });\n    return {\n      filters: filters,\n      bias: bias\n    };\n  }\n\n  function extractScaleLayerParams(numWeights, mappedPrefix) {\n    var weights = tf.tensor1d(extractWeights(numWeights));\n    var biases = tf.tensor1d(extractWeights(numWeights));\n    paramMappings.push({\n      paramPath: mappedPrefix + \"/weights\"\n    }, {\n      paramPath: mappedPrefix + \"/biases\"\n    });\n    return {\n      weights: weights,\n      biases: biases\n    };\n  }\n\n  function extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix) {\n    var conv = extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv\");\n    var scale = extractScaleLayerParams(numFilters, mappedPrefix + \"/scale\");\n    return {\n      conv: conv,\n      scale: scale\n    };\n  }\n\n  function extractResidualLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix, isDown) {\n    if (isDown === void 0) {\n      isDown = false;\n    }\n\n    var conv1 = extractConvLayerParams((isDown ? 0.5 : 1) * numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv1\");\n    var conv2 = extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv2\");\n    return {\n      conv1: conv1,\n      conv2: conv2\n    };\n  }\n\n  return {\n    extractConvLayerParams: extractConvLayerParams,\n    extractResidualLayerParams: extractResidualLayerParams\n  };\n}\n\nexport function extractParams(weights) {\n  var _a = extractWeightsFactory(weights),\n      extractWeights = _a.extractWeights,\n      getRemainingWeights = _a.getRemainingWeights;\n\n  var paramMappings = [];\n\n  var _b = extractorsFactory(extractWeights, paramMappings),\n      extractConvLayerParams = _b.extractConvLayerParams,\n      extractResidualLayerParams = _b.extractResidualLayerParams;\n\n  var conv32_down = extractConvLayerParams(4704, 32, 7, 'conv32_down');\n  var conv32_1 = extractResidualLayerParams(9216, 32, 3, 'conv32_1');\n  var conv32_2 = extractResidualLayerParams(9216, 32, 3, 'conv32_2');\n  var conv32_3 = extractResidualLayerParams(9216, 32, 3, 'conv32_3');\n  var conv64_down = extractResidualLayerParams(36864, 64, 3, 'conv64_down', true);\n  var conv64_1 = extractResidualLayerParams(36864, 64, 3, 'conv64_1');\n  var conv64_2 = extractResidualLayerParams(36864, 64, 3, 'conv64_2');\n  var conv64_3 = extractResidualLayerParams(36864, 64, 3, 'conv64_3');\n  var conv128_down = extractResidualLayerParams(147456, 128, 3, 'conv128_down', true);\n  var conv128_1 = extractResidualLayerParams(147456, 128, 3, 'conv128_1');\n  var conv128_2 = extractResidualLayerParams(147456, 128, 3, 'conv128_2');\n  var conv256_down = extractResidualLayerParams(589824, 256, 3, 'conv256_down', true);\n  var conv256_1 = extractResidualLayerParams(589824, 256, 3, 'conv256_1');\n  var conv256_2 = extractResidualLayerParams(589824, 256, 3, 'conv256_2');\n  var conv256_down_out = extractResidualLayerParams(589824, 256, 3, 'conv256_down_out');\n  var fc = tf.tidy(function () {\n    return tf.transpose(tf.tensor2d(extractWeights(256 * 128), [128, 256]), [1, 0]);\n  });\n  paramMappings.push({\n    paramPath: \"fc\"\n  });\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\n  }\n\n  var params = {\n    conv32_down: conv32_down,\n    conv32_1: conv32_1,\n    conv32_2: conv32_2,\n    conv32_3: conv32_3,\n    conv64_down: conv64_down,\n    conv64_1: conv64_1,\n    conv64_2: conv64_2,\n    conv64_3: conv64_3,\n    conv128_down: conv128_down,\n    conv128_1: conv128_1,\n    conv128_2: conv128_2,\n    conv256_down: conv256_down,\n    conv256_1: conv256_1,\n    conv256_2: conv256_2,\n    conv256_down_out: conv256_down_out,\n    fc: fc\n  };\n  return {\n    params: params,\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"sources":["../../../src/faceRecognitionNet/extractParams.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { extractWeightsFactory } from '../common';\r\nimport { isFloat } from '../utils';\r\nfunction extractorsFactory(extractWeights, paramMappings) {\r\n    function extractFilterValues(numFilterValues, numFilters, filterSize) {\r\n        var weights = extractWeights(numFilterValues);\r\n        var depth = weights.length / (numFilters * filterSize * filterSize);\r\n        if (isFloat(depth)) {\r\n            throw new Error(\"depth has to be an integer: \" + depth + \", weights.length: \" + weights.length + \", numFilters: \" + numFilters + \", filterSize: \" + filterSize);\r\n        }\r\n        return tf.tidy(function () { return tf.transpose(tf.tensor4d(weights, [numFilters, depth, filterSize, filterSize]), [2, 3, 1, 0]); });\r\n    }\r\n    function extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix) {\r\n        var filters = extractFilterValues(numFilterValues, numFilters, filterSize);\r\n        var bias = tf.tensor1d(extractWeights(numFilters));\r\n        paramMappings.push({ paramPath: mappedPrefix + \"/filters\" }, { paramPath: mappedPrefix + \"/bias\" });\r\n        return { filters: filters, bias: bias };\r\n    }\r\n    function extractScaleLayerParams(numWeights, mappedPrefix) {\r\n        var weights = tf.tensor1d(extractWeights(numWeights));\r\n        var biases = tf.tensor1d(extractWeights(numWeights));\r\n        paramMappings.push({ paramPath: mappedPrefix + \"/weights\" }, { paramPath: mappedPrefix + \"/biases\" });\r\n        return {\r\n            weights: weights,\r\n            biases: biases\r\n        };\r\n    }\r\n    function extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix) {\r\n        var conv = extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv\");\r\n        var scale = extractScaleLayerParams(numFilters, mappedPrefix + \"/scale\");\r\n        return { conv: conv, scale: scale };\r\n    }\r\n    function extractResidualLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix, isDown) {\r\n        if (isDown === void 0) { isDown = false; }\r\n        var conv1 = extractConvLayerParams((isDown ? 0.5 : 1) * numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv1\");\r\n        var conv2 = extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix + \"/conv2\");\r\n        return { conv1: conv1, conv2: conv2 };\r\n    }\r\n    return {\r\n        extractConvLayerParams: extractConvLayerParams,\r\n        extractResidualLayerParams: extractResidualLayerParams\r\n    };\r\n}\r\nexport function extractParams(weights) {\r\n    var _a = extractWeightsFactory(weights), extractWeights = _a.extractWeights, getRemainingWeights = _a.getRemainingWeights;\r\n    var paramMappings = [];\r\n    var _b = extractorsFactory(extractWeights, paramMappings), extractConvLayerParams = _b.extractConvLayerParams, extractResidualLayerParams = _b.extractResidualLayerParams;\r\n    var conv32_down = extractConvLayerParams(4704, 32, 7, 'conv32_down');\r\n    var conv32_1 = extractResidualLayerParams(9216, 32, 3, 'conv32_1');\r\n    var conv32_2 = extractResidualLayerParams(9216, 32, 3, 'conv32_2');\r\n    var conv32_3 = extractResidualLayerParams(9216, 32, 3, 'conv32_3');\r\n    var conv64_down = extractResidualLayerParams(36864, 64, 3, 'conv64_down', true);\r\n    var conv64_1 = extractResidualLayerParams(36864, 64, 3, 'conv64_1');\r\n    var conv64_2 = extractResidualLayerParams(36864, 64, 3, 'conv64_2');\r\n    var conv64_3 = extractResidualLayerParams(36864, 64, 3, 'conv64_3');\r\n    var conv128_down = extractResidualLayerParams(147456, 128, 3, 'conv128_down', true);\r\n    var conv128_1 = extractResidualLayerParams(147456, 128, 3, 'conv128_1');\r\n    var conv128_2 = extractResidualLayerParams(147456, 128, 3, 'conv128_2');\r\n    var conv256_down = extractResidualLayerParams(589824, 256, 3, 'conv256_down', true);\r\n    var conv256_1 = extractResidualLayerParams(589824, 256, 3, 'conv256_1');\r\n    var conv256_2 = extractResidualLayerParams(589824, 256, 3, 'conv256_2');\r\n    var conv256_down_out = extractResidualLayerParams(589824, 256, 3, 'conv256_down_out');\r\n    var fc = tf.tidy(function () { return tf.transpose(tf.tensor2d(extractWeights(256 * 128), [128, 256]), [1, 0]); });\r\n    paramMappings.push({ paramPath: \"fc\" });\r\n    if (getRemainingWeights().length !== 0) {\r\n        throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\r\n    }\r\n    var params = {\r\n        conv32_down: conv32_down,\r\n        conv32_1: conv32_1,\r\n        conv32_2: conv32_2,\r\n        conv32_3: conv32_3,\r\n        conv64_down: conv64_down,\r\n        conv64_1: conv64_1,\r\n        conv64_2: conv64_2,\r\n        conv64_3: conv64_3,\r\n        conv128_down: conv128_down,\r\n        conv128_1: conv128_1,\r\n        conv128_2: conv128_2,\r\n        conv256_down: conv256_down,\r\n        conv256_1: conv256_1,\r\n        conv256_2: conv256_2,\r\n        conv256_down_out: conv256_down_out,\r\n        fc: fc\r\n    };\r\n    return { params: params, paramMappings: paramMappings };\r\n}\r\n//# sourceMappingURL=extractParams.js.map"]},"metadata":{},"sourceType":"module"}