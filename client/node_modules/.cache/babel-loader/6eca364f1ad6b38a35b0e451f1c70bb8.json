{"ast":null,"code":"import _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeNearestNeighbor } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nfunction resizeNearestNeighbor_(images, size) {\n  var alignCorners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n  util.assert($images.rank === 3 || $images.rank === 4, function () {\n    return \"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got \" + \"rank \".concat($images.rank, \".\");\n  });\n  util.assert(size.length === 2, function () {\n    return \"Error in resizeNearestNeighbor: new shape must 2D, but got shape \" + \"\".concat(size, \".\");\n  });\n  util.assert($images.dtype === 'float32' || $images.dtype === 'int32', function () {\n    return '`images` must have `int32` or `float32` as dtype';\n  });\n  var batchImages = $images;\n  var reshapedTo4D = false;\n\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n\n  var _size = _slicedToArray(size, 2),\n      newHeight = _size[0],\n      newWidth = _size[1];\n\n  var inputs = {\n    images: batchImages\n  };\n  var attrs = {\n    alignCorners: alignCorners,\n    size: size\n  };\n\n  var forward = function forward(backend, save) {\n    save([batchImages]);\n    return backend.resizeNearestNeighbor(batchImages, newHeight, newWidth, alignCorners);\n  };\n\n  var res = ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , ResizeNearestNeighbor, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport var resizeNearestNeighbor = op({\n  resizeNearestNeighbor_: resizeNearestNeighbor_\n});","map":null,"metadata":{},"sourceType":"module"}