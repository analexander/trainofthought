{"ast":null,"code":"import _regeneratorRuntime from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport var executeOp = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(node, tensorMap, context) {\n    var thenFunc, elseFunc, cond, args, condValue, _ret, pred, _pred, data, inputName, _data, frameId, _data2, _data3, _data4, size, dtype, elementShape, dynamicSize, clearAfterRead, identicalElementShapes, name, tensorArray, id, index, writeTensor, writeTensorArray, readId, readIndex, readTensorArray, gatherId, gatherIndices, gatherDtype, gatherTensorArray, scatterId, scatterIndices, scatterTensor, scatterTensorArray, concatId, concatTensorArray, concatDtype, splitId, splitTensor, lengths, splitTensorArray, sizeId, sizeTensorArray, closeId, closeTensorArray, idTensor, _index, _writeTensor, tensorList, _idTensor, _readIndex, _elementShape, elementDType, _tensorList, _scatterIndices, _scatterTensor, _elementShape2, numElements, _tensorList2, _elementShape3, elementDtype, _numElements, _tensorList3, _gatherId, _gatherIndices, _elementShape4, _elementDtype, _tensorList4, _idTensor2, _elementShape5, _elementDtype2, _numElements2, _tensorList5, tensor, _elementShape6, _elementDtype3, _tensorList6, _concatId, _tensorList7, _concatDtype, _elementShape7, _idTensor3, _writeTensor2, _tensorList8, _idTensor4, _elementShape8, _elementDType, _tensorList9, _splitTensor, _elementShape9, _lengths, _tensorList10;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.t0 = node.op;\n            _context3.next = _context3.t0 === 'If' ? 3 : _context3.t0 === 'StatelessIf' ? 3 : _context3.t0 === 'While' ? 15 : _context3.t0 === 'StatelessWhile' ? 15 : _context3.t0 === 'LoopCond' ? 19 : _context3.t0 === 'Switch' ? 21 : _context3.t0 === 'Merge' ? 32 : _context3.t0 === 'Enter' ? 37 : _context3.t0 === 'Exit' ? 41 : _context3.t0 === 'NextIteration' ? 44 : _context3.t0 === 'TensorArrayV3' ? 47 : _context3.t0 === 'TensorArrayWriteV3' ? 57 : _context3.t0 === 'TensorArrayReadV3' ? 63 : _context3.t0 === 'TensorArrayGatherV3' ? 67 : _context3.t0 === 'TensorArrayScatterV3' ? 72 : _context3.t0 === 'TensorArrayConcatV3' ? 78 : _context3.t0 === 'TensorArraySplitV3' ? 82 : _context3.t0 === 'TensorArraySizeV3' ? 88 : _context3.t0 === 'TensorArrayCloseV3' ? 91 : _context3.t0 === 'TensorListSetItem' ? 95 : _context3.t0 === 'TensorListGetItem' ? 101 : _context3.t0 === 'TensorListScatterV2' ? 107 : _context3.t0 === 'TensorListScatter' ? 107 : _context3.t0 === 'TensorListReserve' ? 114 : _context3.t0 === 'TensorListGather' ? 120 : _context3.t0 === 'TensorListStack' ? 126 : _context3.t0 === 'TensorListFromTensor' ? 132 : _context3.t0 === 'TensorListConcat' ? 138 : _context3.t0 === 'TensorListPushBack' ? 143 : _context3.t0 === 'TensorListPopBack' ? 148 : _context3.t0 === 'TensorListSplit' ? 153 : 159;\n            break;\n\n          case 3:\n            thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n            elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n            cond = getParamValue('cond', node, tensorMap, context);\n            args = getParamValue('args', node, tensorMap, context);\n            _context3.next = 9;\n            return cond.data();\n\n          case 9:\n            condValue = _context3.sent;\n\n            if (!condValue[0]) {\n              _context3.next = 14;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));\n\n          case 14:\n            return _context3.abrupt(\"return\", context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));\n\n          case 15:\n            return _context3.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              var bodyFunc, condFunc, args, condResult, argIds, condValue, result, _loop;\n\n              return _regeneratorRuntime.wrap(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      bodyFunc = getParamValue('body', node, tensorMap, context);\n                      condFunc = getParamValue('cond', node, tensorMap, context);\n                      args = getParamValue('args', node, tensorMap, context); // Calculate the condition of the loop\n\n                      _context2.next = 5;\n                      return context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n\n                    case 5:\n                      condResult = _context2.sent;\n                      argIds = args.map(function (tensor) {\n                        return tensor.id;\n                      });\n                      _context2.next = 9;\n                      return condResult[0].data();\n\n                    case 9:\n                      condValue = _context2.sent;\n                      // Dispose the intermediate tensors for condition function\n                      condResult.forEach(function (tensor) {\n                        if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n                          tensor.dispose();\n                        }\n                      });\n                      result = args;\n                      _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                        var origResult, resultIds, condResult;\n                        return _regeneratorRuntime.wrap(function _loop$(_context) {\n                          while (1) {\n                            switch (_context.prev = _context.next) {\n                              case 0:\n                                // Record the previous result for intermediate tensor tracking\n                                origResult = result; // Execution the body of the loop\n\n                                _context.next = 3;\n                                return context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n\n                              case 3:\n                                result = _context.sent;\n                                resultIds = result.map(function (tensor) {\n                                  return tensor.id;\n                                }); // Dispose the intermediate tensor for body function that is not global\n                                // kept, not input/output of the body function\n\n                                origResult.forEach(function (tensor) {\n                                  if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n                                    tensor.dispose();\n                                  }\n                                }); // Recalcuate the condition of the loop using the latest results.\n\n                                _context.next = 8;\n                                return context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n\n                              case 8:\n                                condResult = _context.sent;\n                                _context.next = 11;\n                                return condResult[0].data();\n\n                              case 11:\n                                condValue = _context.sent;\n                                // Dispose the intermediate tensors for condition function\n                                condResult.forEach(function (tensor) {\n                                  if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n                                    tensor.dispose();\n                                  }\n                                });\n\n                              case 13:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }\n                        }, _loop);\n                      });\n\n                    case 13:\n                      if (!condValue[0]) {\n                        _context2.next = 17;\n                        break;\n                      }\n\n                      return _context2.delegateYield(_loop(), \"t0\", 15);\n\n                    case 15:\n                      _context2.next = 13;\n                      break;\n\n                    case 17:\n                      return _context2.abrupt(\"return\", {\n                        v: result\n                      });\n\n                    case 18:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee);\n            })(), \"t1\", 16);\n\n          case 16:\n            _ret = _context3.t1;\n\n            if (!(typeof _ret === \"object\")) {\n              _context3.next = 19;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", _ret.v);\n\n          case 19:\n            pred = getParamValue('pred', node, tensorMap, context);\n            return _context3.abrupt(\"return\", [cloneTensor(pred)]);\n\n          case 21:\n            _pred = getParamValue('pred', node, tensorMap, context);\n            data = getParamValue('data', node, tensorMap, context);\n\n            if (!data.kept) {\n              data = cloneTensor(data);\n            } // Outputs nodes :0 => false, :1 => true\n\n\n            _context3.next = 26;\n            return _pred.data();\n\n          case 26:\n            if (!_context3.sent[0]) {\n              _context3.next = 30;\n              break;\n            }\n\n            _context3.t2 = [undefined, data];\n            _context3.next = 31;\n            break;\n\n          case 30:\n            _context3.t2 = [data, undefined];\n\n          case 31:\n            return _context3.abrupt(\"return\", _context3.t2);\n\n          case 32:\n            inputName = node.inputNames.find(function (name) {\n              return getTensor(name, tensorMap, context) !== undefined;\n            });\n\n            if (!inputName) {\n              _context3.next = 36;\n              break;\n            }\n\n            _data = getTensor(inputName, tensorMap, context);\n            return _context3.abrupt(\"return\", [cloneTensor(_data)]);\n\n          case 36:\n            return _context3.abrupt(\"return\", undefined);\n\n          case 37:\n            frameId = getParamValue('frameName', node, tensorMap, context);\n            _data2 = getParamValue('tensor', node, tensorMap, context);\n            context.enterFrame(frameId);\n            return _context3.abrupt(\"return\", [cloneTensor(_data2)]);\n\n          case 41:\n            _data3 = getParamValue('tensor', node, tensorMap, context);\n            context.exitFrame();\n            return _context3.abrupt(\"return\", [cloneTensor(_data3)]);\n\n          case 44:\n            _data4 = getParamValue('tensor', node, tensorMap, context);\n            context.nextIteration();\n            return _context3.abrupt(\"return\", [cloneTensor(_data4)]);\n\n          case 47:\n            size = getParamValue('size', node, tensorMap, context);\n            dtype = getParamValue('dtype', node, tensorMap, context);\n            elementShape = getParamValue('elementShape', node, tensorMap, context);\n            dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n            clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n            identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n            name = getParamValue('name', node, tensorMap, context);\n            tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n            context.addTensorArray(tensorArray);\n            return _context3.abrupt(\"return\", [tensorArray.idTensor, scalar(1.0)]);\n\n          case 57:\n            id = getParamValue('tensorArrayId', node, tensorMap, context);\n            index = getParamValue('index', node, tensorMap, context);\n            writeTensor = getParamValue('tensor', node, tensorMap, context);\n            writeTensorArray = context.getTensorArray(id.id);\n            writeTensorArray.write(index, writeTensor);\n            return _context3.abrupt(\"return\", [writeTensorArray.idTensor]);\n\n          case 63:\n            readId = getParamValue('tensorArrayId', node, tensorMap, context);\n            readIndex = getParamValue('index', node, tensorMap, context);\n            readTensorArray = context.getTensorArray(readId.id);\n            return _context3.abrupt(\"return\", [readTensorArray.read(readIndex)]);\n\n          case 67:\n            gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n            gatherIndices = getParamValue('indices', node, tensorMap, context);\n            gatherDtype = getParamValue('dtype', node, tensorMap, context);\n            gatherTensorArray = context.getTensorArray(gatherId.id);\n            return _context3.abrupt(\"return\", [gatherTensorArray.gather(gatherIndices, gatherDtype)]);\n\n          case 72:\n            scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n            scatterIndices = getParamValue('indices', node, tensorMap, context);\n            scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            scatterTensorArray = context.getTensorArray(scatterId.id);\n            scatterTensorArray.scatter(scatterIndices, scatterTensor);\n            return _context3.abrupt(\"return\", [scatterTensorArray.idTensor]);\n\n          case 78:\n            concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n            concatTensorArray = context.getTensorArray(concatId.id);\n            concatDtype = getParamValue('dtype', node, tensorMap, context);\n            return _context3.abrupt(\"return\", [concatTensorArray.concat(concatDtype)]);\n\n          case 82:\n            splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n            splitTensor = getParamValue('tensor', node, tensorMap, context);\n            lengths = getParamValue('lengths', node, tensorMap, context);\n            splitTensorArray = context.getTensorArray(splitId.id);\n            splitTensorArray.split(lengths, splitTensor);\n            return _context3.abrupt(\"return\", [splitTensorArray.idTensor]);\n\n          case 88:\n            sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            sizeTensorArray = context.getTensorArray(sizeId.id);\n            return _context3.abrupt(\"return\", [scalar(sizeTensorArray.size(), 'int32')]);\n\n          case 91:\n            closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            closeTensorArray = context.getTensorArray(closeId.id);\n            closeTensorArray.clearAndClose();\n            return _context3.abrupt(\"return\", [closeTensorArray.idTensor]);\n\n          case 95:\n            idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            _index = getParamValue('index', node, tensorMap, context);\n            _writeTensor = getParamValue('tensor', node, tensorMap, context);\n            tensorList = context.getTensorList(idTensor.id);\n            tensorList.setItem(_index, _writeTensor);\n            return _context3.abrupt(\"return\", [tensorList.idTensor]);\n\n          case 101:\n            _idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            _readIndex = getParamValue('index', node, tensorMap, context);\n            _elementShape = getParamValue('elementShape', node, tensorMap, context);\n            elementDType = getParamValue('elementDType', node, tensorMap, context);\n            _tensorList = context.getTensorList(_idTensor.id);\n            return _context3.abrupt(\"return\", [_tensorList.getItem(_readIndex, _elementShape, elementDType)]);\n\n          case 107:\n            _scatterIndices = getParamValue('indices', node, tensorMap, context);\n            _scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            _elementShape2 = getParamValue('elementShape', node, tensorMap, context);\n            numElements = getParamValue('numElements', node, tensorMap, context);\n            _tensorList2 = scatter(_scatterTensor, _scatterIndices, _elementShape2, numElements);\n            context.addTensorList(_tensorList2);\n            return _context3.abrupt(\"return\", [_tensorList2.idTensor]);\n\n          case 114:\n            _elementShape3 = getParamValue('elementShape', node, tensorMap, context);\n            elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            _numElements = getParamValue('numElements', node, tensorMap, context);\n            _tensorList3 = reserve(_elementShape3, elementDtype, _numElements);\n            context.addTensorList(_tensorList3);\n            return _context3.abrupt(\"return\", [_tensorList3.idTensor]);\n\n          case 120:\n            _gatherId = getParamValue('tensorListId', node, tensorMap, context);\n            _gatherIndices = getParamValue('indices', node, tensorMap, context);\n            _elementShape4 = getParamValue('elementShape', node, tensorMap, context);\n            _elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            _tensorList4 = context.getTensorList(_gatherId.id);\n            return _context3.abrupt(\"return\", [_tensorList4.gather(_gatherIndices, _elementDtype, _elementShape4)]);\n\n          case 126:\n            _idTensor2 = getParamValue('tensorListId', node, tensorMap, context);\n            _elementShape5 = getParamValue('elementShape', node, tensorMap, context);\n            _elementDtype2 = getParamValue('elementDType', node, tensorMap, context);\n            _numElements2 = getParamValue('numElements', node, tensorMap, context);\n            _tensorList5 = context.getTensorList(_idTensor2.id);\n            return _context3.abrupt(\"return\", [_tensorList5.stack(_elementShape5, _elementDtype2, _numElements2)]);\n\n          case 132:\n            tensor = getParamValue('tensor', node, tensorMap, context);\n            _elementShape6 = getParamValue('elementShape', node, tensorMap, context);\n            _elementDtype3 = getParamValue('elementDType', node, tensorMap, context);\n            _tensorList6 = fromTensor(tensor, _elementShape6, _elementDtype3);\n            context.addTensorList(_tensorList6);\n            return _context3.abrupt(\"return\", [_tensorList6.idTensor]);\n\n          case 138:\n            _concatId = getParamValue('tensorListId', node, tensorMap, context);\n            _tensorList7 = context.getTensorList(_concatId.id);\n            _concatDtype = getParamValue('dtype', node, tensorMap, context);\n            _elementShape7 = getParamValue('elementShape', node, tensorMap, context);\n            return _context3.abrupt(\"return\", [_tensorList7.concat(_concatDtype, _elementShape7)]);\n\n          case 143:\n            _idTensor3 = getParamValue('tensorListId', node, tensorMap, context);\n            _writeTensor2 = getParamValue('tensor', node, tensorMap, context);\n            _tensorList8 = context.getTensorList(_idTensor3.id);\n\n            _tensorList8.pushBack(_writeTensor2);\n\n            return _context3.abrupt(\"return\", [_tensorList8.idTensor]);\n\n          case 148:\n            _idTensor4 = getParamValue('tensorListId', node, tensorMap, context);\n            _elementShape8 = getParamValue('elementShape', node, tensorMap, context);\n            _elementDType = getParamValue('elementDType', node, tensorMap, context);\n            _tensorList9 = context.getTensorList(_idTensor4.id);\n            return _context3.abrupt(\"return\", [_tensorList9.popBack(_elementShape8, _elementDType)]);\n\n          case 153:\n            _splitTensor = getParamValue('tensor', node, tensorMap, context);\n            _elementShape9 = getParamValue('elementShape', node, tensorMap, context);\n            _lengths = getParamValue('lengths', node, tensorMap, context);\n            _tensorList10 = split(_splitTensor, _lengths, _elementShape9);\n            context.addTensorList(_tensorList10);\n            return _context3.abrupt(\"return\", [_tensorList10.idTensor]);\n\n          case 159:\n            throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n\n          case 160:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function executeOp(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var CATEGORY = 'control';","map":null,"metadata":{},"sourceType":"module"}