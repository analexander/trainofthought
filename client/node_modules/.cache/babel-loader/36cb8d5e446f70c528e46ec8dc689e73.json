{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nexport var Im2ColPackedProgram = function Im2ColPackedProgram(outputShape, inputShape, convInfo) {\n  _classCallCheck(this, Im2ColPackedProgram);\n\n  this.variableNames = ['A'];\n  this.packedInputs = true;\n  this.packedOutput = true;\n  this.outputShape = outputShape;\n  var filterWidth = convInfo.filterWidth,\n      inChannels = convInfo.inChannels,\n      strideWidth = convInfo.strideWidth,\n      strideHeight = convInfo.strideHeight,\n      padInfo = convInfo.padInfo,\n      outWidth = convInfo.outWidth,\n      dilationWidth = convInfo.dilationWidth,\n      dilationHeight = convInfo.dilationHeight,\n      dataFormat = convInfo.dataFormat;\n  var left = padInfo.left,\n      top = padInfo.top;\n  var itemsPerBlockRow = inChannels * filterWidth;\n  var glsl = getGlslDifferences();\n  var isChannelsLast = dataFormat === 'channelsLast';\n  var rowDim = isChannelsLast ? 0 : 1;\n  var colDim = isChannelsLast ? 1 : 2;\n  var unrolled = \"\";\n\n  for (var row = 0; row <= 1; row++) {\n    for (var col = 0; col <= 1; col++) {\n      unrolled += \"\\n          blockIndex = rc.y + \".concat(col, \";\\n          pos = rc.x + \").concat(row, \";\\n\\n          if(blockIndex < \").concat(outputShape[1], \" && pos < \").concat(outputShape[0], \") {\\n            offsetY = int(blockIndex / (\").concat(outWidth, \")) * \").concat(strideHeight, \" - \").concat(top, \";\\n            d0 = offsetY + \").concat(dilationHeight, \" * (pos / \").concat(itemsPerBlockRow, \");\\n\\n            if(d0 < \").concat(inputShape[rowDim], \" && d0 >= 0) {\\n\\n              offsetX = int(mod(float(blockIndex), \").concat(outWidth, \".) * \").concat(strideWidth, \". - \").concat(left, \".);\\n              d1 = offsetX + \").concat(dilationWidth, \" * (int(mod(float(pos), \").concat(itemsPerBlockRow, \".) / \").concat(inChannels, \".));\\n\\n              if(d1 < \").concat(inputShape[colDim], \" && d1 >= 0) {\\n\\n                ch = int(mod(float(pos), \").concat(inChannels, \".));\\n\\n                if (\").concat(isChannelsLast, \") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \");\n    }\n  }\n\n  this.userCode = \"\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \".concat(unrolled, \"\\n\\n        \").concat(glsl.output, \" = result;\\n      }\\n    \");\n};","map":null,"metadata":{},"sourceType":"module"}