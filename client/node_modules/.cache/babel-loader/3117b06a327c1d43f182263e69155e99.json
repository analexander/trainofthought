{"ast":null,"code":"import _regeneratorRuntime from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport var StringIterator = /*#__PURE__*/function (_LazyIterator) {\n  _inherits(StringIterator, _LazyIterator);\n\n  function StringIterator() {\n    _classCallCheck(this, StringIterator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StringIterator).apply(this, arguments));\n  }\n\n  _createClass(StringIterator, [{\n    key: \"split\",\n\n    /**\n     * Splits a string stream on a given separator.\n     *\n     * It is assumed that the incoming chunk boundaries have no semantic meaning,\n     * so conceptually the incoming stream is treated simply as the concatenation\n     * of its elements.\n     *\n     * The outgoing stream provides chunks corresponding to the results of the\n     * standard string split() operation (even if such a chunk spanned incoming\n     * chunks).  The separators are not included.\n     *\n     * A typical usage is to split a text file (represented as a stream with\n     * arbitrary chunk boundaries) into lines.\n     *\n     * @param upstream A readable stream of strings that can be treated as\n     *   concatenated.\n     * @param separator A character to split on.\n     */\n    value: function split(separator) {\n      return new SplitIterator(this, separator);\n    }\n  }]);\n\n  return StringIterator;\n}(LazyIterator); // ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\n\nvar SplitIterator = /*#__PURE__*/function (_StringIterator) {\n  _inherits(SplitIterator, _StringIterator);\n\n  function SplitIterator(upstream, separator) {\n    var _this;\n\n    _classCallCheck(this, SplitIterator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SplitIterator).call(this));\n    _this.upstream = upstream;\n    _this.impl = new SplitIteratorImpl(upstream, separator);\n    return _this;\n  }\n\n  _createClass(SplitIterator, [{\n    key: \"summary\",\n    value: function summary() {\n      return this.impl.summary();\n    }\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.impl.next());\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function next() {\n        return _next.apply(this, arguments);\n      }\n\n      return next;\n    }()\n  }]);\n\n  return SplitIterator;\n}(StringIterator);\n\nvar SplitIteratorImpl = /*#__PURE__*/function (_OneToManyIterator) {\n  _inherits(SplitIteratorImpl, _OneToManyIterator);\n\n  function SplitIteratorImpl(upstream, separator) {\n    var _this2;\n\n    _classCallCheck(this, SplitIteratorImpl);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(SplitIteratorImpl).call(this));\n    _this2.upstream = upstream;\n    _this2.separator = separator; // A partial string at the end of an upstream chunk\n\n    _this2.carryover = '';\n    return _this2;\n  }\n\n  _createClass(SplitIteratorImpl, [{\n    key: \"summary\",\n    value: function summary() {\n      return \"\".concat(this.upstream.summary(), \" -> Split('\").concat(this.separator, \"')\");\n    }\n  }, {\n    key: \"pump\",\n    value: function () {\n      var _pump = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var chunkResult, lines, _iterator, _step, line;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.upstream.next();\n\n              case 2:\n                chunkResult = _context2.sent;\n\n                if (!chunkResult.done) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                if (!(this.carryover === '')) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 6:\n                // Pretend that the pump succeeded in order to emit the small last batch.\n                // The next pump() call will actually fail.\n                this.outputQueue.push(this.carryover);\n                this.carryover = '';\n                return _context2.abrupt(\"return\", true);\n\n              case 9:\n                lines = chunkResult.value.split(this.separator); // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n                // Thus the carryover may be '' if the separator falls on a chunk\n                // boundary; this produces the correct result.\n\n                lines[0] = this.carryover + lines[0];\n                _iterator = _createForOfIteratorHelper(lines.slice(0, -1));\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    line = _step.value;\n                    this.outputQueue.push(line);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                this.carryover = lines[lines.length - 1];\n                return _context2.abrupt(\"return\", true);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function pump() {\n        return _pump.apply(this, arguments);\n      }\n\n      return pump;\n    }()\n  }]);\n\n  return SplitIteratorImpl;\n}(OneToManyIterator);","map":null,"metadata":{},"sourceType":"module"}