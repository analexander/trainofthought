{"ast":null,"code":"import _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nvar kernelRegistry = getGlobal('kernelRegistry', function () {\n  return new Map();\n});\nvar gradRegistry = getGlobal('gradRegistry', function () {\n  return new Map();\n});\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\n\nexport function getKernel(kernelName, backendName) {\n  var key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\n\nexport function getGradient(kernelName) {\n  return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n  var it = kernelRegistry.entries();\n  var result = [];\n\n  while (true) {\n    var _it$next = it.next(),\n        done = _it$next.done,\n        value = _it$next.value;\n\n    if (done) {\n      break;\n    }\n\n    var _value = _slicedToArray(value, 2),\n        key = _value[0],\n        config = _value[1];\n\n    var _key$split = key.split('_'),\n        _key$split2 = _slicedToArray(_key$split, 1),\n        backend = _key$split2[0];\n\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n\n  return result;\n}\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\n\nexport function registerKernel(config) {\n  var kernelName = config.kernelName,\n      backendName = config.backendName;\n  var key = makeKey(kernelName, backendName);\n\n  if (kernelRegistry.has(key)) {\n    console.warn(\"The kernel '\".concat(kernelName, \"' for backend \") + \"'\".concat(backendName, \"' is already registered\"));\n  }\n\n  kernelRegistry.set(key, config);\n}\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\n\nexport function registerGradient(config) {\n  var kernelName = config.kernelName;\n\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      console.warn(\"Overriding the gradient for '\".concat(kernelName, \"'\"));\n    }\n  }\n\n  gradRegistry.set(kernelName, config);\n}\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\n\nexport function unregisterKernel(kernelName, backendName) {\n  var key = makeKey(kernelName, backendName);\n\n  if (!kernelRegistry.has(key)) {\n    throw new Error(\"The kernel '\".concat(kernelName, \"' for backend \") + \"'\".concat(backendName, \"' is not registered\"));\n  }\n\n  kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\n\nexport function unregisterGradient(kernelName) {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(\"The gradient '\".concat(kernelName, \"' for backend is not registered\"));\n  }\n\n  gradRegistry.delete(kernelName);\n}\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\n\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n  var kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(function (kernelConfig) {\n    var newKernelConfig = Object.assign({}, kernelConfig, {\n      backendName: newBackendName\n    });\n    registerKernel(newKernelConfig);\n  });\n}\n\nfunction makeKey(kernelName, backendName) {\n  return \"\".concat(backendName, \"_\").concat(kernelName);\n}","map":null,"metadata":{},"sourceType":"module"}