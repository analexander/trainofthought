{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { Point } from '../classes';\nimport { Dimensions } from '../classes/Dimensions';\nexport function isTensor(tensor, dim) {\n  return tensor instanceof tf.Tensor && tensor.shape.length === dim;\n}\nexport function isTensor1D(tensor) {\n  return isTensor(tensor, 1);\n}\nexport function isTensor2D(tensor) {\n  return isTensor(tensor, 2);\n}\nexport function isTensor3D(tensor) {\n  return isTensor(tensor, 3);\n}\nexport function isTensor4D(tensor) {\n  return isTensor(tensor, 4);\n}\nexport function isFloat(num) {\n  return num % 1 !== 0;\n}\nexport function isEven(num) {\n  return num % 2 === 0;\n}\nexport function round(num, prec) {\n  if (prec === void 0) {\n    prec = 2;\n  }\n\n  var f = Math.pow(10, prec);\n  return Math.floor(num * f) / f;\n}\nexport function isDimensions(obj) {\n  return obj && obj.width && obj.height;\n}\nexport function computeReshapedDimensions(_a, inputSize) {\n  var width = _a.width,\n      height = _a.height;\n  var scale = inputSize / Math.max(height, width);\n  return new Dimensions(Math.round(width * scale), Math.round(height * scale));\n}\nexport function getCenterPoint(pts) {\n  return pts.reduce(function (sum, pt) {\n    return sum.add(pt);\n  }, new Point(0, 0)).div(new Point(pts.length, pts.length));\n}\nexport function range(num, start, step) {\n  return Array(num).fill(0).map(function (_, i) {\n    return start + i * step;\n  });\n}\nexport function isValidNumber(num) {\n  return !!num && num !== Infinity && num !== -Infinity && !isNaN(num) || num === 0;\n}\nexport function isValidProbablitiy(num) {\n  return isValidNumber(num) && 0 <= num && num <= 1.0;\n}","map":{"version":3,"sources":["../../../src/utils/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { Point } from '../classes';\r\nimport { Dimensions } from '../classes/Dimensions';\r\nexport function isTensor(tensor, dim) {\r\n    return tensor instanceof tf.Tensor && tensor.shape.length === dim;\r\n}\r\nexport function isTensor1D(tensor) {\r\n    return isTensor(tensor, 1);\r\n}\r\nexport function isTensor2D(tensor) {\r\n    return isTensor(tensor, 2);\r\n}\r\nexport function isTensor3D(tensor) {\r\n    return isTensor(tensor, 3);\r\n}\r\nexport function isTensor4D(tensor) {\r\n    return isTensor(tensor, 4);\r\n}\r\nexport function isFloat(num) {\r\n    return num % 1 !== 0;\r\n}\r\nexport function isEven(num) {\r\n    return num % 2 === 0;\r\n}\r\nexport function round(num, prec) {\r\n    if (prec === void 0) { prec = 2; }\r\n    var f = Math.pow(10, prec);\r\n    return Math.floor(num * f) / f;\r\n}\r\nexport function isDimensions(obj) {\r\n    return obj && obj.width && obj.height;\r\n}\r\nexport function computeReshapedDimensions(_a, inputSize) {\r\n    var width = _a.width, height = _a.height;\r\n    var scale = inputSize / Math.max(height, width);\r\n    return new Dimensions(Math.round(width * scale), Math.round(height * scale));\r\n}\r\nexport function getCenterPoint(pts) {\r\n    return pts.reduce(function (sum, pt) { return sum.add(pt); }, new Point(0, 0))\r\n        .div(new Point(pts.length, pts.length));\r\n}\r\nexport function range(num, start, step) {\r\n    return Array(num).fill(0).map(function (_, i) { return start + (i * step); });\r\n}\r\nexport function isValidNumber(num) {\r\n    return !!num && num !== Infinity && num !== -Infinity && !isNaN(num) || num === 0;\r\n}\r\nexport function isValidProbablitiy(num) {\r\n    return isValidNumber(num) && 0 <= num && num <= 1.0;\r\n}\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}