{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { convLayer } from '../common';\nimport { prelu } from './prelu';\nexport function sharedLayer(x, params, isPnet) {\n  if (isPnet === void 0) {\n    isPnet = false;\n  }\n\n  return tf.tidy(function () {\n    var out = convLayer(x, params.conv1, 'valid');\n    out = prelu(out, params.prelu1_alpha);\n    out = tf.maxPool(out, isPnet ? [2, 2] : [3, 3], [2, 2], 'same');\n    out = convLayer(out, params.conv2, 'valid');\n    out = prelu(out, params.prelu2_alpha);\n    out = isPnet ? out : tf.maxPool(out, [3, 3], [2, 2], 'valid');\n    out = convLayer(out, params.conv3, 'valid');\n    out = prelu(out, params.prelu3_alpha);\n    return out;\n  });\n}","map":{"version":3,"sources":["../../../src/mtcnn/sharedLayers.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAZ,MAAoB,uBAApB;AAEA,SAAS,SAAT,QAA0B,WAA1B;AACA,SAAS,KAAT,QAAsB,SAAtB;AAGA,OAAM,SAAU,WAAV,CAAsB,CAAtB,EAAsC,MAAtC,EAA4D,MAA5D,EAAmF;AAAvB,MAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,KAAA;AAAuB;;AACvF,SAAO,EAAE,CAAC,IAAH,CAAQ,YAAA;AAEb,QAAI,GAAG,GAAG,SAAS,CAAC,CAAD,EAAI,MAAM,CAAC,KAAX,EAAkB,OAAlB,CAAnB;AACA,IAAA,GAAG,GAAG,KAAK,CAAc,GAAd,EAAmB,MAAM,CAAC,YAA1B,CAAX;AACA,IAAA,GAAG,GAAG,EAAE,CAAC,OAAH,CAAW,GAAX,EAAgB,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAH,GAAW,CAAC,CAAD,EAAI,CAAJ,CAAjC,EAAyC,CAAC,CAAD,EAAI,CAAJ,CAAzC,EAAiD,MAAjD,CAAN;AACA,IAAA,GAAG,GAAG,SAAS,CAAC,GAAD,EAAM,MAAM,CAAC,KAAb,EAAoB,OAApB,CAAf;AACA,IAAA,GAAG,GAAG,KAAK,CAAc,GAAd,EAAmB,MAAM,CAAC,YAA1B,CAAX;AACA,IAAA,GAAG,GAAG,MAAM,GAAG,GAAH,GAAS,EAAE,CAAC,OAAH,CAAW,GAAX,EAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,EAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,EAAgC,OAAhC,CAArB;AACA,IAAA,GAAG,GAAG,SAAS,CAAC,GAAD,EAAM,MAAM,CAAC,KAAb,EAAoB,OAApB,CAAf;AACA,IAAA,GAAG,GAAG,KAAK,CAAc,GAAd,EAAmB,MAAM,CAAC,YAA1B,CAAX;AAEA,WAAO,GAAP;AACD,GAZM,CAAP;AAaD","sourceRoot":"","sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { convLayer } from '../common';\r\nimport { prelu } from './prelu';\r\nexport function sharedLayer(x, params, isPnet) {\r\n    if (isPnet === void 0) { isPnet = false; }\r\n    return tf.tidy(function () {\r\n        var out = convLayer(x, params.conv1, 'valid');\r\n        out = prelu(out, params.prelu1_alpha);\r\n        out = tf.maxPool(out, isPnet ? [2, 2] : [3, 3], [2, 2], 'same');\r\n        out = convLayer(out, params.conv2, 'valid');\r\n        out = prelu(out, params.prelu2_alpha);\r\n        out = isPnet ? out : tf.maxPool(out, [3, 3], [2, 2], 'valid');\r\n        out = convLayer(out, params.conv3, 'valid');\r\n        out = prelu(out, params.prelu3_alpha);\r\n        return out;\r\n    });\r\n}\r\n//# sourceMappingURL=sharedLayers.js.map"]},"metadata":{},"sourceType":"module"}