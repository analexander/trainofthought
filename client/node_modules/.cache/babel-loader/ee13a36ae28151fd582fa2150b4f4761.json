{"ast":null,"code":"import _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport var maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: function kernelFunc(_ref) {\n    var inputs = _ref.inputs,\n        attrs = _ref.attrs,\n        backend = _ref.backend;\n    var x = inputs.x;\n    var filterSize = attrs.filterSize,\n        strides = attrs.strides,\n        pad = attrs.pad,\n        includeBatchInIndex = attrs.includeBatchInIndex;\n    var cpuBackend = backend;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n    var values = cpuBackend.data.get(x.dataId).values;\n    var convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);\n\n    var _maxPoolWithArgmaxImp = maxPoolWithArgmaxImpl(values, x.shape, x.dtype, includeBatchInIndex, convInfo),\n        _maxPoolWithArgmaxImp2 = _slicedToArray(_maxPoolWithArgmaxImp, 2),\n        pooled = _maxPoolWithArgmaxImp2[0],\n        indexes = _maxPoolWithArgmaxImp2[1];\n\n    var pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);\n    var indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);\n    return [{\n      dataId: pooledDataId,\n      shape: convInfo.outShape,\n      dtype: x.dtype\n    }, {\n      dataId: indexesDataId,\n      shape: convInfo.outShape,\n      dtype: 'int32'\n    }];\n  }\n};","map":null,"metadata":{},"sourceType":"module"}