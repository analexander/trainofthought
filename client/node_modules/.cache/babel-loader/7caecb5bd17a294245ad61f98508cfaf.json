{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { createCanvas, createCanvasFromMedia, getContext2dOrThrow } from '../dom';\nimport { env } from '../env';\nimport { normalize } from './normalize';\nexport function extractImagePatches(img, boxes, _a) {\n  var width = _a.width,\n      height = _a.height;\n  return __awaiter(this, void 0, void 0, function () {\n    var imgCtx, bitmaps, imagePatchesDatas;\n\n    var _this = this;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          imgCtx = getContext2dOrThrow(img);\n          return [4\n          /*yield*/\n          , Promise.all(boxes.map(function (box) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var _a, y, ey, x, ex, fromX, fromY, imgData;\n\n              return __generator(this, function (_b) {\n                _a = box.padAtBorders(img.height, img.width), y = _a.y, ey = _a.ey, x = _a.x, ex = _a.ex;\n                fromX = x - 1;\n                fromY = y - 1;\n                imgData = imgCtx.getImageData(fromX, fromY, ex - fromX, ey - fromY);\n                return [2\n                /*return*/\n                , env.isNodejs() ? createCanvasFromMedia(imgData) : createImageBitmap(imgData)];\n              });\n            });\n          }))];\n\n        case 1:\n          bitmaps = _b.sent();\n          imagePatchesDatas = [];\n          bitmaps.forEach(function (bmp) {\n            var patch = createCanvas({\n              width: width,\n              height: height\n            });\n            var patchCtx = getContext2dOrThrow(patch);\n            patchCtx.drawImage(bmp, 0, 0, width, height);\n            var data = patchCtx.getImageData(0, 0, width, height).data;\n            var currData = []; // RGBA -> BGR\n\n            for (var i = 0; i < data.length; i += 4) {\n              currData.push(data[i + 2]);\n              currData.push(data[i + 1]);\n              currData.push(data[i]);\n            }\n\n            imagePatchesDatas.push(currData);\n          });\n          return [2\n          /*return*/\n          , imagePatchesDatas.map(function (data) {\n            var t = tf.tidy(function () {\n              var imagePatchTensor = tf.transpose(tf.tensor4d(data, [1, width, height, 3]), [0, 2, 1, 3]).toFloat();\n              return normalize(imagePatchTensor);\n            });\n            return t;\n          })];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/mtcnn/extractImagePatches.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { createCanvas, createCanvasFromMedia, getContext2dOrThrow } from '../dom';\r\nimport { env } from '../env';\r\nimport { normalize } from './normalize';\r\nexport function extractImagePatches(img, boxes, _a) {\r\n    var width = _a.width, height = _a.height;\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var imgCtx, bitmaps, imagePatchesDatas;\r\n        var _this = this;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    imgCtx = getContext2dOrThrow(img);\r\n                    return [4 /*yield*/, Promise.all(boxes.map(function (box) { return __awaiter(_this, void 0, void 0, function () {\r\n                            var _a, y, ey, x, ex, fromX, fromY, imgData;\r\n                            return __generator(this, function (_b) {\r\n                                _a = box.padAtBorders(img.height, img.width), y = _a.y, ey = _a.ey, x = _a.x, ex = _a.ex;\r\n                                fromX = x - 1;\r\n                                fromY = y - 1;\r\n                                imgData = imgCtx.getImageData(fromX, fromY, (ex - fromX), (ey - fromY));\r\n                                return [2 /*return*/, env.isNodejs() ? createCanvasFromMedia(imgData) : createImageBitmap(imgData)];\r\n                            });\r\n                        }); }))];\r\n                case 1:\r\n                    bitmaps = _b.sent();\r\n                    imagePatchesDatas = [];\r\n                    bitmaps.forEach(function (bmp) {\r\n                        var patch = createCanvas({ width: width, height: height });\r\n                        var patchCtx = getContext2dOrThrow(patch);\r\n                        patchCtx.drawImage(bmp, 0, 0, width, height);\r\n                        var data = patchCtx.getImageData(0, 0, width, height).data;\r\n                        var currData = [];\r\n                        // RGBA -> BGR\r\n                        for (var i = 0; i < data.length; i += 4) {\r\n                            currData.push(data[i + 2]);\r\n                            currData.push(data[i + 1]);\r\n                            currData.push(data[i]);\r\n                        }\r\n                        imagePatchesDatas.push(currData);\r\n                    });\r\n                    return [2 /*return*/, imagePatchesDatas.map(function (data) {\r\n                            var t = tf.tidy(function () {\r\n                                var imagePatchTensor = tf.transpose(tf.tensor4d(data, [1, width, height, 3]), [0, 2, 1, 3]).toFloat();\r\n                                return normalize(imagePatchTensor);\r\n                            });\r\n                            return t;\r\n                        })];\r\n            }\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=extractImagePatches.js.map"]},"metadata":{},"sourceType":"module"}