{"ast":null,"code":"import { Point } from '../classes';\nimport { FaceExpressions } from '../faceExpressionNet';\nimport { isWithFaceDetection } from '../factories/WithFaceDetection';\nimport { isWithFaceExpressions } from '../factories/WithFaceExpressions';\nimport { round } from '../utils';\nimport { DrawTextField } from './DrawTextField';\nexport function drawFaceExpressions(canvasArg, faceExpressions, minConfidence, textFieldAnchor) {\n  if (minConfidence === void 0) {\n    minConfidence = 0.1;\n  }\n\n  var faceExpressionsArray = Array.isArray(faceExpressions) ? faceExpressions : [faceExpressions];\n  faceExpressionsArray.forEach(function (e) {\n    var expr = e instanceof FaceExpressions ? e : isWithFaceExpressions(e) ? e.expressions : undefined;\n\n    if (!expr) {\n      throw new Error('drawFaceExpressions - expected faceExpressions to be FaceExpressions | WithFaceExpressions<{}> or array thereof');\n    }\n\n    var sorted = expr.asSortedArray();\n    var resultsToDisplay = sorted.filter(function (expr) {\n      return expr.probability > minConfidence;\n    });\n    var anchor = isWithFaceDetection(e) ? e.detection.box.bottomLeft : textFieldAnchor || new Point(0, 0);\n    var drawTextField = new DrawTextField(resultsToDisplay.map(function (expr) {\n      return expr.expression + \" (\" + round(expr.probability) + \")\";\n    }), anchor);\n    drawTextField.draw(canvasArg);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}