{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var SelectProgram = function SelectProgram(cRank, shape, rank) {\n  _classCallCheck(this, SelectProgram);\n\n  this.variableNames = ['c', 'a', 'b'];\n  this.outputShape = shape;\n  var cCoords;\n  var abCoords;\n\n  if (rank > 4) {\n    throw Error(\"Where for rank \".concat(rank, \" is not yet supported\"));\n  }\n\n  if (rank === 1) {\n    abCoords = \"resRC\";\n    cCoords = \"resRC\";\n  } else {\n    var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n    var cCoordVars = [];\n    var abCoordVars = [];\n\n    for (var i = 0; i < shape.length; i++) {\n      abCoordVars.push(\"\".concat(currentCoords[i]));\n\n      if (i < cRank) {\n        cCoordVars.push(\"\".concat(currentCoords[i]));\n      }\n    }\n\n    cCoords = cCoordVars.join();\n    abCoords = abCoordVars.join();\n  }\n\n  var dtype = getCoordsDataType(rank);\n  this.userCode = \"\\n      void main() {\\n        \".concat(dtype, \" resRC = getOutputCoords();\\n        float cVal = getC(\").concat(cCoords, \");\\n        if (cVal >= 1.0) {\\n          setOutput(getA(\").concat(abCoords, \"));\\n        } else {\\n          setOutput(getB(\").concat(abCoords, \"));\\n        }\\n      }\\n    \");\n};","map":null,"metadata":{},"sourceType":"module"}