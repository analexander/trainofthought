{"ast":null,"code":"import _regeneratorRuntime from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose, mul, tensor1d, tidy } from '@tensorflow/tfjs-core';\n\nfunction standardizeSampleOrClassWeights(xWeight, outputNames, weightType) {\n  var numOutputs = outputNames.length;\n\n  if (xWeight == null || Array.isArray(xWeight) && xWeight.length === 0) {\n    return outputNames.map(function (name) {\n      return null;\n    });\n  }\n\n  if (numOutputs === 1) {\n    if (Array.isArray(xWeight) && xWeight.length === 1) {\n      return xWeight;\n    } else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n      return [xWeight[outputNames[0]]];\n    } else {\n      return [xWeight];\n    }\n  }\n\n  if (Array.isArray(xWeight)) {\n    if (xWeight.length !== numOutputs) {\n      throw new Error(\"Provided \".concat(weightType, \" is an array of \").concat(xWeight.length, \" \") + \"element(s), but the model has \".concat(numOutputs, \" outputs. \") + \"Make sure a set of weights is provided for each model output.\");\n    }\n\n    return xWeight;\n  } else if (typeof xWeight === 'object' && Object.keys(xWeight).length > 0 && typeof xWeight[Object.keys(xWeight)[0]] === 'object') {\n    var output = [];\n    outputNames.forEach(function (outputName) {\n      if (outputName in xWeight) {\n        output.push(xWeight[outputName]);\n      } else {\n        output.push(null);\n      }\n    });\n    return output;\n  } else {\n    throw new Error(\"The model has multiple (\".concat(numOutputs, \") outputs, \") + \"so \".concat(weightType, \" must be either an array with \") + \"\".concat(numOutputs, \" elements or an object with \").concat(outputNames, \" keys. \") + \"Provided \".concat(weightType, \" not understood: \").concat(JSON.stringify(xWeight)));\n  }\n}\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\n\n\nexport function standardizeClassWeights(classWeight, outputNames) {\n  return standardizeSampleOrClassWeights(classWeight, outputNames, 'classWeight');\n}\nexport function standardizeSampleWeights(classWeight, outputNames) {\n  return standardizeSampleOrClassWeights(classWeight, outputNames, 'sampleWeight');\n}\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\n\nexport function standardizeWeights(_x, _x2, _x3, _x4) {\n  return _standardizeWeights.apply(this, arguments);\n}\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\n\nfunction _standardizeWeights() {\n  _standardizeWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(y, sampleWeight, classWeight, sampleWeightMode) {\n    var yClasses, yClassIndices, classSampleWeight;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(sampleWeight != null || sampleWeightMode != null)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('Support sampleWeight is not implemented yet');\n\n          case 2:\n            if (!(classWeight != null)) {\n              _context.next = 15;\n              break;\n            }\n\n            // Apply class weights per sample.\n            yClasses = tidy(function () {\n              if (y.shape.length === 1) {\n                // Assume class indices.\n                return y.clone();\n              } else if (y.shape.length === 2) {\n                if (y.shape[1] > 1) {\n                  // Assume one-hot encoding of classes.\n                  var axis = 1;\n                  return y.argMax(axis);\n                } else if (y.shape[1] === 1) {\n                  // Class index.\n                  return y.reshape([y.shape[0]]);\n                } else {\n                  throw new Error(\"Encountered unexpected last-dimension size (\".concat(y.shape[1], \") \") + \"during handling of class weights. The size is expected to be \" + \">= 1.\");\n                }\n              } else {\n                throw new Error(\"Unexpected rank of target (y) tensor (\".concat(y.rank, \") during \") + \"handling of class weights. The rank is expected to be 1 or 2.\");\n              }\n            });\n            _context.t0 = Array;\n            _context.next = 7;\n            return yClasses.data();\n\n          case 7:\n            _context.t1 = _context.sent;\n            yClassIndices = _context.t0.from.call(_context.t0, _context.t1);\n            dispose(yClasses);\n            classSampleWeight = [];\n            yClassIndices.forEach(function (classIndex) {\n              if (classWeight[classIndex] == null) {\n                throw new Error(\"classWeight must contain all classes in the training data. \" + \"The class \".concat(classIndex, \" exists in the data but not in \") + \"classWeight\");\n              } else {\n                classSampleWeight.push(classWeight[classIndex]);\n              }\n            });\n            return _context.abrupt(\"return\", tensor1d(classSampleWeight, 'float32'));\n\n          case 15:\n            return _context.abrupt(\"return\", null);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _standardizeWeights.apply(this, arguments);\n}\n\nexport function computeWeightedLoss(losses, sampleWeights) {\n  return mul(losses, sampleWeights);\n}","map":null,"metadata":{},"sourceType":"module"}