{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Cumsum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { getAxesPermutation, getInnerMostAxes, getUndoAxesPermutation } from './axis_util';\nimport { op } from './operation';\nimport { transpose } from './transpose';\n/**\n * Computes the cumulative sum of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumsum().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumsum().print();\n * ```\n *\n * @param x The input tensor to be summed.\n * @param axis The axis along which to sum. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative sum. Optional.\n *     Defaults to false. If set to true then the sum of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to sum in the opposite direction. Optional.\n *     Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Scan'}\n */\n\nfunction cumsum_(x) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var exclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var reverse = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var $x = convertToTensor(x, 'x', 'cumsum');\n\n  var forward = function forward(backend, save) {\n    var permutation = getAxesPermutation([axis], $x.rank);\n    var permutedX = $x;\n\n    if (permutation != null) {\n      permutedX = transpose($x, permutation);\n    }\n\n    var permutedAxis = getInnerMostAxes(1, $x.rank)[0];\n    var value = backend.cumsum(permutedX, permutedAxis, exclusive, reverse);\n    save([$x]);\n\n    if (permutation != null) {\n      var reversePermutation = getUndoAxesPermutation(permutation);\n      value = transpose(value, reversePermutation);\n    }\n\n    return value;\n  };\n\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    axis: axis,\n    exclusive: exclusive,\n    reverse: reverse\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Cumsum, attrs);\n}\n\nexport var cumsum = op({\n  cumsum_: cumsum_\n});","map":null,"metadata":{},"sourceType":"module"}