{"ast":null,"code":"import _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport * as conv_util from '../ops/conv_util';\nimport { depthwiseConv2dNativeBackpropFilter } from '../ops/depthwise_conv2d_native_backprop_filter';\nimport { depthwiseConv2dNativeBackpropInput } from '../ops/depthwise_conv2d_native_backprop_input';\nimport * as util from '../util';\nexport var depthwiseConv2dNativeGradConfig = {\n  kernelName: DepthwiseConv2dNative,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: function gradFunc(dy, saved, attrs) {\n    var dilations = attrs.dilations,\n        strides = attrs.strides,\n        pad = attrs.pad,\n        dimRoundingMode = attrs.dimRoundingMode;\n    var $dilations = dilations == null ? [1, 1] : dilations;\n    util.assert(conv_util.tupleValuesAreOne($dilations), function () {\n      return 'Error in gradient of depthwiseConv2dNative: dilation rates ' + \"greater than 1 are not yet supported. Got dilations \" + \"'\".concat($dilations, \"'\");\n    });\n\n    var _saved = _slicedToArray(saved, 2),\n        _x = _saved[0],\n        _filter = _saved[1];\n\n    util.assert(_x.rank === 4, function () {\n      return \"Error in gradient of depthwiseConv2dNative: input must be \" + \"rank 4, but got rank \".concat(_x.rank, \".\");\n    });\n    util.assert(_filter.rank === 4, function () {\n      return \"Error in gradient of depthwiseConv2dNative: filter must be \" + \"rank 4, but got rank \".concat(_filter.rank, \".\");\n    });\n    util.assert(_x.shape[3] === _filter.shape[2], function () {\n      return \"Error in gradient of depthwiseConv2d: number of input \" + \"channels (\".concat(_x.shape[3], \") must match the inChannels dimension \") + \"in filter \".concat(_filter.shape[2], \".\");\n    });\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, $dilations), function () {\n      return 'Error in gradient of depthwiseConv2d: Either strides or ' + \"dilations must be  1. Got strides \".concat(strides, \" and dilations \") + \"'\".concat($dilations, \"'.\");\n    });\n\n    if (dimRoundingMode != null) {\n      util.assert(util.isInt(pad), function () {\n        return \"Error in depthwiseConv2d: pad must be an integer when using, \" + \"dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\");\n      });\n    }\n\n    return {\n      x: function x() {\n        return depthwiseConv2dNativeBackpropInput(_x.shape, dy, _filter, strides, pad, dilations, dimRoundingMode);\n      },\n      filter: function filter() {\n        return depthwiseConv2dNativeBackpropFilter(_x, dy, _filter.shape, strides, pad, dilations, dimRoundingMode);\n      }\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}