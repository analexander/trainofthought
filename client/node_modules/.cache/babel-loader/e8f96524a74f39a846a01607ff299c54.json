{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { tensor } from '../ops/tensor';\nimport { getTypedArrayFromDType } from '../util';\nexport function topkImpl(x, xShape, xDtype, k, sorted) {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  var lastDim = xShape[xShape.length - 1];\n  var batch = x.length / lastDim,\n      size = lastDim;\n  var allTopKVals = getTypedArrayFromDType(xDtype, batch * k);\n  var allTopKIndices = getTypedArrayFromDType('int32', batch * k);\n\n  for (var b = 0; b < batch; b++) {\n    var offset = b * size;\n    var vals = x.subarray(offset, offset + size);\n    var valAndInd = [];\n\n    for (var i = 0; i < vals.length; i++) {\n      valAndInd.push({\n        value: vals[i],\n        index: i\n      });\n    }\n\n    valAndInd.sort(function (a, b) {\n      return b.value - a.value;\n    });\n    var outOffset = b * k;\n    var topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    var topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n\n    for (var _i = 0; _i < k; _i++) {\n      topKVals[_i] = valAndInd[_i].value;\n      topKIndices[_i] = valAndInd[_i].index;\n    }\n  } // Reshape back to the original input shape, except that the last\n  // dimension is k.\n\n\n  var outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n  return [tensor(allTopKVals, outputShape, xDtype), tensor(allTopKIndices, outputShape, 'int32')];\n}","map":null,"metadata":{},"sourceType":"module"}