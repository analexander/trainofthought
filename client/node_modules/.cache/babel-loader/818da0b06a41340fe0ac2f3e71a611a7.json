{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = testbinary;\nexports.usage = 'Tests that the binary.node can be required';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar log = require('npmlog');\n\nvar cp = require('child_process');\n\nvar versioning = require('./util/versioning.js');\n\nvar napi = require('./util/napi.js');\n\nvar path = require('path');\n\nfunction testbinary(gyp, argv, callback) {\n  var args = [];\n  var options = {};\n  var shell_cmd = process.execPath;\n  var package_json = JSON.parse(fs.readFileSync('./package.json'));\n  var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version); // skip validation for runtimes we don't explicitly support (like electron)\n\n  if (opts.runtime && opts.runtime !== 'node-webkit' && opts.runtime !== 'node') {\n    return callback();\n  }\n\n  var nw = opts.runtime && opts.runtime === 'node-webkit'; // ensure on windows that / are used for require path\n\n  var binary_module = opts.module.replace(/\\\\/g, '/');\n\n  if (process.arch != opts.target_arch || process.platform != opts.target_platform) {\n    var msg = \"skipping validation since host platform/arch (\";\n    msg += process.platform + '/' + process.arch + \")\";\n    msg += \" does not match target (\";\n    msg += opts.target_platform + '/' + opts.target_arch + \")\";\n    log.info('validate', msg);\n    return callback();\n  }\n\n  if (nw) {\n    options.timeout = 5000;\n\n    if (process.platform === 'darwin') {\n      shell_cmd = 'node-webkit';\n    } else if (process.platform === 'win32') {\n      shell_cmd = 'nw.exe';\n    } else {\n      shell_cmd = 'nw';\n    }\n\n    var modulePath = path.resolve(binary_module);\n    var appDir = path.join(__dirname, 'util', 'nw-pre-gyp');\n    args.push(appDir);\n    args.push(modulePath);\n    log.info(\"validate\", \"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n    cp.execFile(shell_cmd, args, options, function (err, stdout, stderr) {\n      // check for normal timeout for node-webkit\n      if (err) {\n        if (err.killed === true && err.signal && err.signal.indexOf('SIG') > -1) {\n          return callback();\n        }\n\n        var stderrLog = stderr.toString();\n        log.info('stderr', stderrLog);\n\n        if (/^\\s*Xlib:\\s*extension\\s*\"RANDR\"\\s*missing\\s*on\\s*display\\s*\":\\d+\\.\\d+\"\\.\\s*$/.test(stderrLog)) {\n          log.info('RANDR', 'stderr contains only RANDR error, ignored');\n          return callback();\n        }\n\n        return callback(err);\n      }\n\n      return callback();\n    });\n    return;\n  }\n\n  args.push('--eval');\n  args.push(\"require('\" + binary_module.replace(/'/g, '\\'') + \"')\");\n  log.info(\"validate\", \"Running test command: '\" + shell_cmd + ' ' + args.join(' ') + \"'\");\n  cp.execFile(shell_cmd, args, options, function (err, stdout, stderr) {\n    if (err) {\n      return callback(err, {\n        stdout: stdout,\n        stderr: stderr\n      });\n    }\n\n    return callback();\n  });\n}","map":null,"metadata":{},"sourceType":"script"}