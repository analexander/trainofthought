{"ast":null,"code":"import _toConsumableArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nvar DEFAULT_FILE_NAME_PREFIX = 'model';\nvar DEFAULT_JSON_EXTENSION_NAME = '.json';\nvar DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer(f) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve);\n  }).then(f);\n}\n\nexport var BrowserDownloads = /*#__PURE__*/function () {\n  function BrowserDownloads(fileNamePrefix) {\n    _classCallCheck(this, BrowserDownloads);\n\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  _createClass(BrowserDownloads, [{\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(modelArtifacts) {\n        var weightsURL, weightsManifest, modelTopologyAndWeightManifest, modelTopologyAndWeightManifestURL, jsonAnchor, weightDataAnchor;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(typeof document === 'undefined')) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');\n\n              case 2:\n                weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {\n                  type: 'application/octet-stream'\n                }));\n\n                if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');\n\n              case 7:\n                weightsManifest = [{\n                  paths: ['./' + this.weightDataFileName],\n                  weights: modelArtifacts.weightSpecs\n                }];\n                modelTopologyAndWeightManifest = {\n                  modelTopology: modelArtifacts.modelTopology,\n                  format: modelArtifacts.format,\n                  generatedBy: modelArtifacts.generatedBy,\n                  convertedBy: modelArtifacts.convertedBy,\n                  weightsManifest: weightsManifest\n                };\n                modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n                  type: 'application/json'\n                })); // If anchor elements are not provided, create them without attaching them\n                // to parents, so that the downloaded file names can be controlled.\n\n                jsonAnchor = this.jsonAnchor == null ? document.createElement('a') : this.jsonAnchor;\n                jsonAnchor.download = this.modelTopologyFileName;\n                jsonAnchor.href = modelTopologyAndWeightManifestURL; // Trigger downloads by evoking a click event on the download anchors.\n                // When multiple downloads are started synchronously, Firefox will only\n                // save the last one.\n\n                _context.next = 15;\n                return defer(function () {\n                  return jsonAnchor.dispatchEvent(new MouseEvent('click'));\n                });\n\n              case 15:\n                if (!(modelArtifacts.weightData != null)) {\n                  _context.next = 21;\n                  break;\n                }\n\n                weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;\n                weightDataAnchor.download = this.weightDataFileName;\n                weightDataAnchor.href = weightsURL;\n                _context.next = 21;\n                return defer(function () {\n                  return weightDataAnchor.dispatchEvent(new MouseEvent('click'));\n                });\n\n              case 21:\n                return _context.abrupt(\"return\", {\n                  modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)\n                });\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function save(_x) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }]);\n\n  return BrowserDownloads;\n}();\nBrowserDownloads.URL_SCHEME = 'downloads://';\n\nvar BrowserFiles = /*#__PURE__*/function () {\n  function BrowserFiles(files) {\n    _classCallCheck(this, BrowserFiles);\n\n    if (files == null || files.length < 1) {\n      throw new Error(\"When calling browserFiles, at least 1 file is required, \" + \"but received \".concat(files));\n    }\n\n    this.files = files;\n  }\n\n  _createClass(BrowserFiles, [{\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        var jsonFile, weightFiles;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                jsonFile = this.files[0];\n                weightFiles = this.files.slice(1);\n                return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var jsonReader = new FileReader();\n\n                  jsonReader.onload = function (event) {\n                    // tslint:disable-next-line:no-any\n                    var modelJSON = JSON.parse(event.target.result);\n                    var modelTopology = modelJSON.modelTopology;\n\n                    if (modelTopology == null) {\n                      reject(new Error(\"modelTopology field is missing from file \".concat(jsonFile.name)));\n                      return;\n                    }\n\n                    if (weightFiles.length === 0) {\n                      resolve({\n                        modelTopology: modelTopology\n                      });\n                    }\n\n                    var weightsManifest = modelJSON.weightsManifest;\n\n                    if (weightsManifest == null) {\n                      reject(new Error(\"weightManifest field is missing from file \".concat(jsonFile.name)));\n                      return;\n                    }\n\n                    var pathToFile;\n\n                    try {\n                      pathToFile = _this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n                    } catch (err) {\n                      reject(err);\n                      return;\n                    }\n\n                    var weightSpecs = [];\n                    var paths = [];\n                    var perFileBuffers = [];\n                    weightsManifest.forEach(function (weightsGroup) {\n                      weightsGroup.paths.forEach(function (path) {\n                        paths.push(path);\n                        perFileBuffers.push(null);\n                      });\n                      weightSpecs.push.apply(weightSpecs, _toConsumableArray(weightsGroup.weights));\n                    });\n                    weightsManifest.forEach(function (weightsGroup) {\n                      weightsGroup.paths.forEach(function (path) {\n                        var weightFileReader = new FileReader();\n\n                        weightFileReader.onload = function (event) {\n                          // tslint:disable-next-line:no-any\n                          var weightData = event.target.result;\n                          var index = paths.indexOf(path);\n                          perFileBuffers[index] = weightData;\n\n                          if (perFileBuffers.indexOf(null) === -1) {\n                            resolve({\n                              modelTopology: modelTopology,\n                              weightSpecs: weightSpecs,\n                              weightData: concatenateArrayBuffers(perFileBuffers),\n                              format: modelJSON.format,\n                              generatedBy: modelJSON.generatedBy,\n                              convertedBy: modelJSON.convertedBy,\n                              userDefinedMetadata: modelJSON.userDefinedMetadata\n                            });\n                          }\n                        };\n\n                        weightFileReader.onerror = function (error) {\n                          return reject(\"Failed to weights data from file of path '\".concat(path, \"'.\"));\n                        };\n\n                        weightFileReader.readAsArrayBuffer(pathToFile[path]);\n                      });\n                    });\n                  };\n\n                  jsonReader.onerror = function (error) {\n                    return reject(\"Failed to read model topology and weights manifest JSON \" + \"from file '\".concat(jsonFile.name, \"'. BrowserFiles supports loading \") + \"Keras-style tf.Model artifacts only.\");\n                  };\n\n                  jsonReader.readAsText(jsonFile);\n                }));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function load() {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n    /**\n     * Check the compatibility between weights manifest and weight files.\n     */\n\n  }, {\n    key: \"checkManifestAndWeightFiles\",\n    value: function checkManifestAndWeightFiles(manifest, files) {\n      var basenames = [];\n      var fileNames = files.map(function (file) {\n        return basename(file.name);\n      });\n      var pathToFile = {};\n\n      var _iterator = _createForOfIteratorHelper(manifest),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var group = _step.value;\n          group.paths.forEach(function (path) {\n            var pathBasename = basename(path);\n\n            if (basenames.indexOf(pathBasename) !== -1) {\n              throw new Error(\"Duplicate file basename found in weights manifest: \" + \"'\".concat(pathBasename, \"'\"));\n            }\n\n            basenames.push(pathBasename);\n\n            if (fileNames.indexOf(pathBasename) === -1) {\n              throw new Error(\"Weight file with basename '\".concat(pathBasename, \"' is not provided.\"));\n            } else {\n              pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n            }\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (basenames.length !== files.length) {\n        throw new Error(\"Mismatch in the number of files in weights manifest \" + \"(\".concat(basenames.length, \") and the number of weight files provided \") + \"(\".concat(files.length, \").\"));\n      }\n\n      return pathToFile;\n    }\n  }]);\n\n  return BrowserFiles;\n}();\n\nexport var browserDownloadsRouter = function browserDownloadsRouter(url) {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function browserDownloads() {\n  var fileNamePrefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'model';\n  return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function browserFiles(files) {\n  return new BrowserFiles(files);\n}","map":null,"metadata":{},"sourceType":"module"}