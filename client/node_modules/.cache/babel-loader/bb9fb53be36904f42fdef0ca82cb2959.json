{"ast":null,"code":"import _toConsumableArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Implementation of the NonMaxSuppression kernel shared between webgl and cpu.\n */\nimport { scalar } from '../ops/scalar';\nimport { tensor1d } from '../ops/tensor1d';\nimport { binaryInsert } from './array_util';\nexport function nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0\n  /* softNmsSigma */\n  ).selectedIndices;\n}\nexport function nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {\n  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0\n  /* softNmsSigma */\n  , false\n  /* returnScoresTensor */\n  , padToMaxOutputSize\n  /* padToMaxOutputSize */\n  , true\n  /* returnValidOutputs */\n  );\n}\nexport function nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true\n  /* returnScoresTensor */\n  );\n}\n\nfunction nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n  var returnScoresTensor = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n  var padToMaxOutputSize = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n  var returnValidOutputs = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n  // The list is sorted in ascending order, so that we can always pop the\n  // candidate with the largest score in O(1) time.\n  var candidates = [];\n\n  for (var i = 0; i < scores.length; i++) {\n    if (scores[i] > scoreThreshold) {\n      candidates.push({\n        score: scores[i],\n        boxIndex: i,\n        suppressBeginIndex: 0\n      });\n    }\n  }\n\n  candidates.sort(ascendingComparator); // If softNmsSigma is 0, the outcome of this algorithm is exactly same as\n  // before.\n\n  var scale = softNmsSigma > 0 ? -0.5 / softNmsSigma : 0.0;\n  var selectedIndices = [];\n  var selectedScores = [];\n\n  while (selectedIndices.length < maxOutputSize && candidates.length > 0) {\n    var candidate = candidates.pop();\n    var originalScore = candidate.score,\n        boxIndex = candidate.boxIndex,\n        suppressBeginIndex = candidate.suppressBeginIndex;\n\n    if (originalScore < scoreThreshold) {\n      break;\n    } // Overlapping boxes are likely to have similar scores, therefore we\n    // iterate through the previously selected boxes backwards in order to\n    // see if candidate's score should be suppressed. We use\n    // suppressBeginIndex to track and ensure a candidate can be suppressed\n    // by a selected box no more than once. Also, if the overlap exceeds\n    // iouThreshold, we simply ignore the candidate.\n\n\n    var ignoreCandidate = false;\n\n    for (var j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {\n      var iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);\n\n      if (iou >= iouThreshold) {\n        ignoreCandidate = true;\n        break;\n      }\n\n      candidate.score = candidate.score * suppressWeight(iouThreshold, scale, iou);\n\n      if (candidate.score <= scoreThreshold) {\n        break;\n      }\n    } // At this point, if `candidate.score` has not dropped below\n    // `scoreThreshold`, then we know that we went through all of the\n    // previous selections and can safely update `suppressBeginIndex` to the\n    // end of the selected array. Then we can re-insert the candidate with\n    // the updated score and suppressBeginIndex back in the candidate list.\n    // If on the other hand, `candidate.score` has dropped below the score\n    // threshold, we will not add it back to the candidates list.\n\n\n    candidate.suppressBeginIndex = selectedIndices.length;\n\n    if (!ignoreCandidate) {\n      // Candidate has passed all the tests, and is not suppressed, so\n      // select the candidate.\n      if (candidate.score === originalScore) {\n        selectedIndices.push(boxIndex);\n        selectedScores.push(candidate.score);\n      } else if (candidate.score > scoreThreshold) {\n        // Candidate's score is suppressed but is still high enough to be\n        // considered, so add back to the candidates list.\n        binaryInsert(candidates, candidate, ascendingComparator);\n      }\n    }\n  } // NonMaxSuppressionV4 feature: padding output to maxOutputSize.\n\n\n  var validOutputs = selectedIndices.length;\n  var elemsToPad = maxOutputSize - validOutputs;\n\n  if (padToMaxOutputSize && elemsToPad > 0) {\n    selectedIndices.push.apply(selectedIndices, _toConsumableArray(new Array(elemsToPad).fill(0)));\n    selectedScores.push.apply(selectedScores, _toConsumableArray(new Array(elemsToPad).fill(0.0)));\n  }\n\n  var result = {\n    selectedIndices: tensor1d(selectedIndices, 'int32')\n  };\n\n  if (returnScoresTensor) {\n    result['selectedScores'] = tensor1d(selectedScores, 'float32');\n  }\n\n  if (returnValidOutputs) {\n    result['validOutputs'] = scalar(validOutputs, 'int32');\n  }\n\n  return result;\n}\n\nfunction intersectionOverUnion(boxes, i, j) {\n  var iCoord = boxes.subarray(i * 4, i * 4 + 4);\n  var jCoord = boxes.subarray(j * 4, j * 4 + 4);\n  var yminI = Math.min(iCoord[0], iCoord[2]);\n  var xminI = Math.min(iCoord[1], iCoord[3]);\n  var ymaxI = Math.max(iCoord[0], iCoord[2]);\n  var xmaxI = Math.max(iCoord[1], iCoord[3]);\n  var yminJ = Math.min(jCoord[0], jCoord[2]);\n  var xminJ = Math.min(jCoord[1], jCoord[3]);\n  var ymaxJ = Math.max(jCoord[0], jCoord[2]);\n  var xmaxJ = Math.max(jCoord[1], jCoord[3]);\n  var areaI = (ymaxI - yminI) * (xmaxI - xminI);\n  var areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n\n  if (areaI <= 0 || areaJ <= 0) {\n    return 0.0;\n  }\n\n  var intersectionYmin = Math.max(yminI, yminJ);\n  var intersectionXmin = Math.max(xminI, xminJ);\n  var intersectionYmax = Math.min(ymaxI, ymaxJ);\n  var intersectionXmax = Math.min(xmaxI, xmaxJ);\n  var intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) * Math.max(intersectionXmax - intersectionXmin, 0.0);\n  return intersectionArea / (areaI + areaJ - intersectionArea);\n} // A Gaussian penalty function, this method always returns values in [0, 1].\n// The weight is a function of similarity, the more overlap two boxes are, the\n// smaller the weight is, meaning highly overlapping boxe will be significantly\n// penalized. On the other hand, a non-overlapping box will not be penalized.\n\n\nfunction suppressWeight(iouThreshold, scale, iou) {\n  var weight = Math.exp(scale * iou * iou);\n  return iou <= iouThreshold ? weight : 0.0;\n}\n\nfunction ascendingComparator(c1, c2) {\n  // For objects with same scores, we make the object with the larger index go\n  // first. In an array that pops from the end, this means that the object with\n  // the smaller index will be popped first. This ensures the same output as\n  // the TensorFlow python version.\n  return c1.score - c2.score || c1.score === c2.score && c2.boxIndex - c1.boxIndex;\n}","map":null,"metadata":{},"sourceType":"module"}