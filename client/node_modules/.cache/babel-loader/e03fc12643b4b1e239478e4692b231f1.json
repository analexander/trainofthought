{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors';\nimport { pyListRepeat } from './generic_utils';\nimport { isInteger, max } from './math_utils';\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\n\nexport function normalizeArray(value, n, name) {\n  if (typeof value === 'number') {\n    return pyListRepeat(value, n);\n  } else {\n    if (value.length !== n) {\n      throw new ValueError(\"The \".concat(name, \" argument must be an integer or tuple of \").concat(n, \" integers.\") + \" Received: \".concat(value.length, \" elements.\"));\n    }\n\n    for (var i = 0; i < n; ++i) {\n      var singleValue = value[i];\n\n      if (!isInteger(singleValue)) {\n        throw new ValueError(\"The \".concat(name, \" argument must be an integer or tuple of \").concat(n) + \" integers. Received: \".concat(JSON.stringify(value), \" including a\") + \" non-integer number \".concat(singleValue));\n      }\n    }\n\n    return value;\n  }\n}\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\n\nexport function convOutputLength(inputLength, filterSize, padding, stride) {\n  var dilation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n  if (inputLength == null) {\n    return inputLength;\n  }\n\n  var dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n  var outputLength;\n\n  if (padding === 'same') {\n    outputLength = inputLength;\n  } else {\n    // VALID\n    outputLength = inputLength - dilatedFilterSize + 1;\n  }\n\n  return Math.floor((outputLength + stride - 1) / stride);\n}\nexport function deconvLength(dimSize, strideSize, kernelSize, padding) {\n  if (dimSize == null) {\n    return null;\n  }\n\n  if (padding === 'valid') {\n    dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n  } else if (padding === 'same') {\n    dimSize = dimSize * strideSize;\n  } else {\n    throw new ValueError(\"Unsupport padding mode: \".concat(padding, \".\"));\n  }\n\n  return dimSize;\n}","map":null,"metadata":{},"sourceType":"module"}