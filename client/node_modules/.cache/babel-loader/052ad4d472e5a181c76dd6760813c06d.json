{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\"); // TODO(nsthorat, dsmilkov): Remove dependency on tensors, use dataId.\n\n\nexports.nonMaxSuppressionV5Config = {\n  kernelName: 'NonMaxSuppressionV5',\n  backendName: 'tensorflow',\n  kernelFunc: function kernelFunc(_a) {\n    var inputs = _a.inputs,\n        backend = _a.backend,\n        attrs = _a.attrs;\n    var _b = inputs,\n        boxes = _b.boxes,\n        scores = _b.scores;\n    var _c = attrs,\n        maxOutputSize = _c.maxOutputSize,\n        iouThreshold = _c.iouThreshold,\n        scoreThreshold = _c.scoreThreshold,\n        softNmsSigma = _c.softNmsSigma;\n    var maxOutputSizeTensor = tfjs_1.scalar(maxOutputSize, 'int32');\n    var iouThresholdTensor = tfjs_1.scalar(iouThreshold);\n    var scoreThresholdTensor = tfjs_1.scalar(scoreThreshold);\n    var softNmsSigmaTensor = tfjs_1.scalar(softNmsSigma);\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', boxes.dtype)];\n    var nodeBackend = backend;\n\n    var _d = nodeBackend.executeMultipleOutputs('NonMaxSuppressionV5', opAttrs, [boxes, scores, maxOutputSizeTensor, iouThresholdTensor, scoreThresholdTensor, softNmsSigmaTensor], 3),\n        selectedIndices = _d[0],\n        selectedScores = _d[1],\n        validOutputs = _d[2];\n\n    maxOutputSizeTensor.dispose();\n    iouThresholdTensor.dispose();\n    scoreThresholdTensor.dispose();\n    softNmsSigmaTensor.dispose();\n    validOutputs.dispose();\n    return [selectedIndices, selectedScores];\n  }\n};","map":null,"metadata":{},"sourceType":"script"}