{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { pointwiseConvLayer } from './pointwiseConvLayer';\nvar epsilon = 0.0010000000474974513;\n\nfunction depthwiseConvLayer(x, params, strides) {\n  return tf.tidy(function () {\n    var out = tf.depthwiseConv2d(x, params.filters, strides, 'same');\n    out = tf.batchNorm(out, params.batch_norm_mean, params.batch_norm_variance, params.batch_norm_offset, params.batch_norm_scale, epsilon);\n    return tf.clipByValue(out, 0, 6);\n  });\n}\n\nfunction getStridesForLayerIdx(layerIdx) {\n  return [2, 4, 6, 12].some(function (idx) {\n    return idx === layerIdx;\n  }) ? [2, 2] : [1, 1];\n}\n\nexport function mobileNetV1(x, params) {\n  return tf.tidy(function () {\n    var conv11 = null;\n    var out = pointwiseConvLayer(x, params.conv_0, [2, 2]);\n    var convPairParams = [params.conv_1, params.conv_2, params.conv_3, params.conv_4, params.conv_5, params.conv_6, params.conv_7, params.conv_8, params.conv_9, params.conv_10, params.conv_11, params.conv_12, params.conv_13];\n    convPairParams.forEach(function (param, i) {\n      var layerIdx = i + 1;\n      var depthwiseConvStrides = getStridesForLayerIdx(layerIdx);\n      out = depthwiseConvLayer(out, param.depthwise_conv, depthwiseConvStrides);\n      out = pointwiseConvLayer(out, param.pointwise_conv, [1, 1]);\n\n      if (layerIdx === 11) {\n        conv11 = out;\n      }\n    });\n\n    if (conv11 === null) {\n      throw new Error('mobileNetV1 - output of conv layer 11 is null');\n    }\n\n    return {\n      out: out,\n      conv11: conv11\n    };\n  });\n}","map":{"version":3,"sources":["../../../src/ssdMobilenetv1/mobileNetV1.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAZ,MAAoB,uBAApB;AAEA,SAAS,kBAAT,QAAmC,sBAAnC;AAGA,IAAM,OAAO,GAAG,qBAAhB;;AAEA,SAAS,kBAAT,CACE,CADF,EAEE,MAFF,EAGE,OAHF,EAG2B;AAEzB,SAAO,EAAE,CAAC,IAAH,CAAQ,YAAA;AAEb,QAAI,GAAG,GAAG,EAAE,CAAC,eAAH,CAAmB,CAAnB,EAAsB,MAAM,CAAC,OAA7B,EAAsC,OAAtC,EAA+C,MAA/C,CAAV;AACA,IAAA,GAAG,GAAG,EAAE,CAAC,SAAH,CACJ,GADI,EAEJ,MAAM,CAAC,eAFH,EAGJ,MAAM,CAAC,mBAHH,EAIJ,MAAM,CAAC,iBAJH,EAKJ,MAAM,CAAC,gBALH,EAMJ,OANI,CAAN;AAQA,WAAO,EAAE,CAAC,WAAH,CAAe,GAAf,EAAoB,CAApB,EAAuB,CAAvB,CAAP;AAED,GAbM,CAAP;AAcD;;AAED,SAAS,qBAAT,CAA+B,QAA/B,EAA+C;AAC7C,SAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,IAAd,CAAmB,UAAA,GAAA,EAAG;AAAI,WAAA,GAAG,KAAH,QAAA;AAAgB,GAA1C,IAA8C,CAAC,CAAD,EAAI,CAAJ,CAA9C,GAAuD,CAAC,CAAD,EAAI,CAAJ,CAA9D;AACD;;AAED,OAAM,SAAU,WAAV,CAAsB,CAAtB,EAAsC,MAAtC,EAAgE;AACpE,SAAO,EAAE,CAAC,IAAH,CAAQ,YAAA;AAEb,QAAI,MAAM,GAAG,IAAb;AACA,QAAI,GAAG,GAAG,kBAAkB,CAAC,CAAD,EAAI,MAAM,CAAC,MAAX,EAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAA5B;AAEA,QAAM,cAAc,GAAG,CACrB,MAAM,CAAC,MADc,EAErB,MAAM,CAAC,MAFc,EAGrB,MAAM,CAAC,MAHc,EAIrB,MAAM,CAAC,MAJc,EAKrB,MAAM,CAAC,MALc,EAMrB,MAAM,CAAC,MANc,EAOrB,MAAM,CAAC,MAPc,EAQrB,MAAM,CAAC,MARc,EASrB,MAAM,CAAC,MATc,EAUrB,MAAM,CAAC,OAVc,EAWrB,MAAM,CAAC,OAXc,EAYrB,MAAM,CAAC,OAZc,EAarB,MAAM,CAAC,OAbc,CAAvB;AAgBA,IAAA,cAAc,CAAC,OAAf,CAAuB,UAAC,KAAD,EAAQ,CAAR,EAAS;AAC9B,UAAM,QAAQ,GAAG,CAAC,GAAG,CAArB;AACA,UAAM,oBAAoB,GAAG,qBAAqB,CAAC,QAAD,CAAlD;AACA,MAAA,GAAG,GAAG,kBAAkB,CAAC,GAAD,EAAM,KAAK,CAAC,cAAZ,EAA4B,oBAA5B,CAAxB;AACA,MAAA,GAAG,GAAG,kBAAkB,CAAC,GAAD,EAAM,KAAK,CAAC,cAAZ,EAA4B,CAAC,CAAD,EAAI,CAAJ,CAA5B,CAAxB;;AACA,UAAI,QAAQ,KAAK,EAAjB,EAAqB;AACnB,QAAA,MAAM,GAAG,GAAT;AACD;AACF,KARD;;AAUA,QAAI,MAAM,KAAK,IAAf,EAAqB;AACnB,YAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,WAAO;AACL,MAAA,GAAG,EAAA,GADE;AAEL,MAAA,MAAM,EAAE;AAFH,KAAP;AAKD,GAxCM,CAAP;AAyCD","sourceRoot":"","sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { pointwiseConvLayer } from './pointwiseConvLayer';\r\nvar epsilon = 0.0010000000474974513;\r\nfunction depthwiseConvLayer(x, params, strides) {\r\n    return tf.tidy(function () {\r\n        var out = tf.depthwiseConv2d(x, params.filters, strides, 'same');\r\n        out = tf.batchNorm(out, params.batch_norm_mean, params.batch_norm_variance, params.batch_norm_offset, params.batch_norm_scale, epsilon);\r\n        return tf.clipByValue(out, 0, 6);\r\n    });\r\n}\r\nfunction getStridesForLayerIdx(layerIdx) {\r\n    return [2, 4, 6, 12].some(function (idx) { return idx === layerIdx; }) ? [2, 2] : [1, 1];\r\n}\r\nexport function mobileNetV1(x, params) {\r\n    return tf.tidy(function () {\r\n        var conv11 = null;\r\n        var out = pointwiseConvLayer(x, params.conv_0, [2, 2]);\r\n        var convPairParams = [\r\n            params.conv_1,\r\n            params.conv_2,\r\n            params.conv_3,\r\n            params.conv_4,\r\n            params.conv_5,\r\n            params.conv_6,\r\n            params.conv_7,\r\n            params.conv_8,\r\n            params.conv_9,\r\n            params.conv_10,\r\n            params.conv_11,\r\n            params.conv_12,\r\n            params.conv_13\r\n        ];\r\n        convPairParams.forEach(function (param, i) {\r\n            var layerIdx = i + 1;\r\n            var depthwiseConvStrides = getStridesForLayerIdx(layerIdx);\r\n            out = depthwiseConvLayer(out, param.depthwise_conv, depthwiseConvStrides);\r\n            out = pointwiseConvLayer(out, param.pointwise_conv, [1, 1]);\r\n            if (layerIdx === 11) {\r\n                conv11 = out;\r\n            }\r\n        });\r\n        if (conv11 === null) {\r\n            throw new Error('mobileNetV1 - output of conv layer 11 is null');\r\n        }\r\n        return {\r\n            out: out,\r\n            conv11: conv11\r\n        };\r\n    });\r\n}\r\n//# sourceMappingURL=mobileNetV1.js.map"]},"metadata":{},"sourceType":"module"}