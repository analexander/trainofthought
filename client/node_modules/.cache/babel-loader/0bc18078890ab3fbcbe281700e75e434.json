{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPoolBackprop } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolPositions } from '../utils/pool_utils';\nexport function maxPoolBackprop(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var dy = inputs.dy,\n      input = inputs.input,\n      output = inputs.output;\n  var x = input;\n  assertNotComplex([input, output], 'maxPoolBackprop');\n  var filterSize = attrs.filterSize,\n      strides = attrs.strides,\n      pad = attrs.pad,\n      dimRoundingMode = attrs.dimRoundingMode;\n  var convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode);\n  var xValues = backend.data.get(x.dataId).values;\n  var maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  var strideHeight = convInfo.strideHeight;\n  var strideWidth = convInfo.strideWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  var effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  var padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  var padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  var dx = buffer(x.shape, 'float32');\n  var dyData = backend.data.get(dy.dataId).values;\n  var dyBuf = buffer(dy.shape, 'float32', dyData);\n\n  for (var b = 0; b < convInfo.batchSize; ++b) {\n    for (var d = 0; d < convInfo.inChannels; ++d) {\n      for (var dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (var dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          var dyRCorner = dxR - padTop;\n          var dyCCorner = dxC - padLeft;\n          var dotProd = 0;\n\n          for (var wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            var dyR = (dyRCorner + wR) / strideHeight;\n\n            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {\n              continue;\n            }\n\n            for (var wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              var dyC = (dyCCorner + wC) / strideWidth;\n\n              if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              var maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(b, dyR, dyC, d);\n              var curPos = wR * effectiveFilterWidth + wC;\n              var mask = maxPos === curPos ? 1 : 0;\n\n              if (mask === 0) {\n                continue;\n              }\n\n              var pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport var maxPoolBackpropConfig = {\n  kernelName: MaxPoolBackprop,\n  backendName: 'cpu',\n  kernelFunc: maxPoolBackprop\n};","map":null,"metadata":{},"sourceType":"module"}