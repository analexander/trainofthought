{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports = testpackage;\nexports.usage = 'Tests that the staged package is valid';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar log = require('npmlog');\n\nvar existsAsync = fs.exists || path.exists;\n\nvar versioning = require('./util/versioning.js');\n\nvar napi = require('./util/napi.js');\n\nvar testbinary = require('./testbinary.js');\n\nvar tar = require('tar');\n\nvar mkdirp = require('mkdirp');\n\nfunction testpackage(gyp, argv, callback) {\n  var package_json = JSON.parse(fs.readFileSync('./package.json'));\n  var napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  var opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  var tarball = opts.staged_tarball;\n  existsAsync(tarball, function (found) {\n    if (!found) {\n      return callback(new Error(\"Cannot test package because \" + tarball + \" missing: run `node-pre-gyp package` first\"));\n    }\n\n    var to = opts.module_path;\n\n    function filter_func(entry) {\n      log.info('install', 'unpacking [' + entry.path + ']');\n    }\n\n    mkdirp(to, function (err) {\n      if (err) {\n        return callback(err);\n      } else {\n        tar.extract({\n          file: tarball,\n          cwd: to,\n          strip: 1,\n          onentry: filter_func\n        }).then(after_extract, callback);\n      }\n    });\n\n    function after_extract() {\n      testbinary(gyp, argv, function (err) {\n        if (err) {\n          return callback(err);\n        } else {\n          console.log('[' + package_json.name + '] Package appears valid');\n          return callback();\n        }\n      });\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script"}