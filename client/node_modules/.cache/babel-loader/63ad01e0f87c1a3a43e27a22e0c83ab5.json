{"ast":null,"code":"import { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\nimport { isTensor2D } from '../utils';\n\nfunction extractorsFactory(weightMap, paramMappings) {\n  var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  function extractScaleLayerParams(prefix) {\n    var weights = extractWeightEntry(prefix + \"/scale/weights\", 1);\n    var biases = extractWeightEntry(prefix + \"/scale/biases\", 1);\n    return {\n      weights: weights,\n      biases: biases\n    };\n  }\n\n  function extractConvLayerParams(prefix) {\n    var filters = extractWeightEntry(prefix + \"/conv/filters\", 4);\n    var bias = extractWeightEntry(prefix + \"/conv/bias\", 1);\n    var scale = extractScaleLayerParams(prefix);\n    return {\n      conv: {\n        filters: filters,\n        bias: bias\n      },\n      scale: scale\n    };\n  }\n\n  function extractResidualLayerParams(prefix) {\n    return {\n      conv1: extractConvLayerParams(prefix + \"/conv1\"),\n      conv2: extractConvLayerParams(prefix + \"/conv2\")\n    };\n  }\n\n  return {\n    extractConvLayerParams: extractConvLayerParams,\n    extractResidualLayerParams: extractResidualLayerParams\n  };\n}\n\nexport function extractParamsFromWeigthMap(weightMap) {\n  var paramMappings = [];\n\n  var _a = extractorsFactory(weightMap, paramMappings),\n      extractConvLayerParams = _a.extractConvLayerParams,\n      extractResidualLayerParams = _a.extractResidualLayerParams;\n\n  var conv32_down = extractConvLayerParams('conv32_down');\n  var conv32_1 = extractResidualLayerParams('conv32_1');\n  var conv32_2 = extractResidualLayerParams('conv32_2');\n  var conv32_3 = extractResidualLayerParams('conv32_3');\n  var conv64_down = extractResidualLayerParams('conv64_down');\n  var conv64_1 = extractResidualLayerParams('conv64_1');\n  var conv64_2 = extractResidualLayerParams('conv64_2');\n  var conv64_3 = extractResidualLayerParams('conv64_3');\n  var conv128_down = extractResidualLayerParams('conv128_down');\n  var conv128_1 = extractResidualLayerParams('conv128_1');\n  var conv128_2 = extractResidualLayerParams('conv128_2');\n  var conv256_down = extractResidualLayerParams('conv256_down');\n  var conv256_1 = extractResidualLayerParams('conv256_1');\n  var conv256_2 = extractResidualLayerParams('conv256_2');\n  var conv256_down_out = extractResidualLayerParams('conv256_down_out');\n  var fc = weightMap['fc'];\n  paramMappings.push({\n    originalPath: 'fc',\n    paramPath: 'fc'\n  });\n\n  if (!isTensor2D(fc)) {\n    throw new Error(\"expected weightMap[fc] to be a Tensor2D, instead have \" + fc);\n  }\n\n  var params = {\n    conv32_down: conv32_down,\n    conv32_1: conv32_1,\n    conv32_2: conv32_2,\n    conv32_3: conv32_3,\n    conv64_down: conv64_down,\n    conv64_1: conv64_1,\n    conv64_2: conv64_2,\n    conv64_3: conv64_3,\n    conv128_down: conv128_down,\n    conv128_1: conv128_1,\n    conv128_2: conv128_2,\n    conv256_down: conv256_down,\n    conv256_1: conv256_1,\n    conv256_2: conv256_2,\n    conv256_down_out: conv256_down_out,\n    fc: fc\n  };\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n  return {\n    params: params,\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"sources":["../../../src/faceRecognitionNet/extractParamsFromWeigthMap.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\r\nimport { isTensor2D } from '../utils';\r\nfunction extractorsFactory(weightMap, paramMappings) {\r\n    var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\r\n    function extractScaleLayerParams(prefix) {\r\n        var weights = extractWeightEntry(prefix + \"/scale/weights\", 1);\r\n        var biases = extractWeightEntry(prefix + \"/scale/biases\", 1);\r\n        return { weights: weights, biases: biases };\r\n    }\r\n    function extractConvLayerParams(prefix) {\r\n        var filters = extractWeightEntry(prefix + \"/conv/filters\", 4);\r\n        var bias = extractWeightEntry(prefix + \"/conv/bias\", 1);\r\n        var scale = extractScaleLayerParams(prefix);\r\n        return { conv: { filters: filters, bias: bias }, scale: scale };\r\n    }\r\n    function extractResidualLayerParams(prefix) {\r\n        return {\r\n            conv1: extractConvLayerParams(prefix + \"/conv1\"),\r\n            conv2: extractConvLayerParams(prefix + \"/conv2\")\r\n        };\r\n    }\r\n    return {\r\n        extractConvLayerParams: extractConvLayerParams,\r\n        extractResidualLayerParams: extractResidualLayerParams\r\n    };\r\n}\r\nexport function extractParamsFromWeigthMap(weightMap) {\r\n    var paramMappings = [];\r\n    var _a = extractorsFactory(weightMap, paramMappings), extractConvLayerParams = _a.extractConvLayerParams, extractResidualLayerParams = _a.extractResidualLayerParams;\r\n    var conv32_down = extractConvLayerParams('conv32_down');\r\n    var conv32_1 = extractResidualLayerParams('conv32_1');\r\n    var conv32_2 = extractResidualLayerParams('conv32_2');\r\n    var conv32_3 = extractResidualLayerParams('conv32_3');\r\n    var conv64_down = extractResidualLayerParams('conv64_down');\r\n    var conv64_1 = extractResidualLayerParams('conv64_1');\r\n    var conv64_2 = extractResidualLayerParams('conv64_2');\r\n    var conv64_3 = extractResidualLayerParams('conv64_3');\r\n    var conv128_down = extractResidualLayerParams('conv128_down');\r\n    var conv128_1 = extractResidualLayerParams('conv128_1');\r\n    var conv128_2 = extractResidualLayerParams('conv128_2');\r\n    var conv256_down = extractResidualLayerParams('conv256_down');\r\n    var conv256_1 = extractResidualLayerParams('conv256_1');\r\n    var conv256_2 = extractResidualLayerParams('conv256_2');\r\n    var conv256_down_out = extractResidualLayerParams('conv256_down_out');\r\n    var fc = weightMap['fc'];\r\n    paramMappings.push({ originalPath: 'fc', paramPath: 'fc' });\r\n    if (!isTensor2D(fc)) {\r\n        throw new Error(\"expected weightMap[fc] to be a Tensor2D, instead have \" + fc);\r\n    }\r\n    var params = {\r\n        conv32_down: conv32_down,\r\n        conv32_1: conv32_1,\r\n        conv32_2: conv32_2,\r\n        conv32_3: conv32_3,\r\n        conv64_down: conv64_down,\r\n        conv64_1: conv64_1,\r\n        conv64_2: conv64_2,\r\n        conv64_3: conv64_3,\r\n        conv128_down: conv128_down,\r\n        conv128_1: conv128_1,\r\n        conv128_2: conv128_2,\r\n        conv256_down: conv256_down,\r\n        conv256_1: conv256_1,\r\n        conv256_2: conv256_2,\r\n        conv256_down_out: conv256_down_out,\r\n        fc: fc\r\n    };\r\n    disposeUnusedWeightTensors(weightMap, paramMappings);\r\n    return { params: params, paramMappings: paramMappings };\r\n}\r\n//# sourceMappingURL=extractParamsFromWeigthMap.js.map"]},"metadata":{},"sourceType":"module"}