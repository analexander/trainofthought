{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { BoundingBox } from '../classes/BoundingBox';\nimport { ObjectDetection } from '../classes/ObjectDetection';\nimport { convLayer } from '../common';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { sigmoid } from '../ops';\nimport { nonMaxSuppression } from '../ops/nonMaxSuppression';\nimport { normalize } from '../ops/normalize';\nimport { validateConfig } from './config';\nimport { convWithBatchNorm } from './convWithBatchNorm';\nimport { depthwiseSeparableConv } from './depthwiseSeparableConv';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { leaky } from './leaky';\nimport { TinyYolov2Options } from './TinyYolov2Options';\n\nvar TinyYolov2Base =\n/** @class */\nfunction (_super) {\n  __extends(TinyYolov2Base, _super);\n\n  function TinyYolov2Base(config) {\n    var _this = _super.call(this, 'TinyYolov2') || this;\n\n    validateConfig(config);\n    _this._config = config;\n    return _this;\n  }\n\n  Object.defineProperty(TinyYolov2Base.prototype, \"config\", {\n    get: function get() {\n      return this._config;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2Base.prototype, \"withClassScores\", {\n    get: function get() {\n      return this.config.withClassScores || this.config.classes.length > 1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2Base.prototype, \"boxEncodingSize\", {\n    get: function get() {\n      return 5 + (this.withClassScores ? this.config.classes.length : 0);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TinyYolov2Base.prototype.runTinyYolov2 = function (x, params) {\n    var out = convWithBatchNorm(x, params.conv0);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv1);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv2);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv3);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv4);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = convWithBatchNorm(out, params.conv5);\n    out = tf.maxPool(out, [2, 2], [1, 1], 'same');\n    out = convWithBatchNorm(out, params.conv6);\n    out = convWithBatchNorm(out, params.conv7);\n    return convLayer(out, params.conv8, 'valid', false);\n  };\n\n  TinyYolov2Base.prototype.runMobilenet = function (x, params) {\n    var out = this.config.isFirstLayerConv2d ? leaky(convLayer(x, params.conv0, 'valid', false)) : depthwiseSeparableConv(x, params.conv0);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv1);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv2);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv3);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv4);\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same');\n    out = depthwiseSeparableConv(out, params.conv5);\n    out = tf.maxPool(out, [2, 2], [1, 1], 'same');\n    out = params.conv6 ? depthwiseSeparableConv(out, params.conv6) : out;\n    out = params.conv7 ? depthwiseSeparableConv(out, params.conv7) : out;\n    return convLayer(out, params.conv8, 'valid', false);\n  };\n\n  TinyYolov2Base.prototype.forwardInput = function (input, inputSize) {\n    var _this = this;\n\n    var params = this.params;\n\n    if (!params) {\n      throw new Error('TinyYolov2 - load model before inference');\n    }\n\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(inputSize, false).toFloat();\n      batchTensor = _this.config.meanRgb ? normalize(batchTensor, _this.config.meanRgb) : batchTensor;\n      batchTensor = batchTensor.div(tf.scalar(256));\n      return _this.config.withSeparableConvs ? _this.runMobilenet(batchTensor, params) : _this.runTinyYolov2(batchTensor, params);\n    });\n  };\n\n  TinyYolov2Base.prototype.forward = function (input, inputSize) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _a.apply(this, [_b.sent(), inputSize])];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n\n  TinyYolov2Base.prototype.detect = function (input, forwardParams) {\n    if (forwardParams === void 0) {\n      forwardParams = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, inputSize, scoreThreshold, netInput, out, out0, inputDimensions, results, boxes, scores, classScores, classNames, indices, detections;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = new TinyYolov2Options(forwardParams), inputSize = _a.inputSize, scoreThreshold = _a.scoreThreshold;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            netInput = _b.sent();\n            return [4\n            /*yield*/\n            , this.forwardInput(netInput, inputSize)];\n\n          case 2:\n            out = _b.sent();\n            out0 = tf.tidy(function () {\n              return tf.unstack(out)[0].expandDims();\n            });\n            inputDimensions = {\n              width: netInput.getInputWidth(0),\n              height: netInput.getInputHeight(0)\n            };\n            return [4\n            /*yield*/\n            , this.extractBoxes(out0, netInput.getReshapedInputDimensions(0), scoreThreshold)];\n\n          case 3:\n            results = _b.sent();\n            out.dispose();\n            out0.dispose();\n            boxes = results.map(function (res) {\n              return res.box;\n            });\n            scores = results.map(function (res) {\n              return res.score;\n            });\n            classScores = results.map(function (res) {\n              return res.classScore;\n            });\n            classNames = results.map(function (res) {\n              return _this.config.classes[res.label];\n            });\n            indices = nonMaxSuppression(boxes.map(function (box) {\n              return box.rescale(inputSize);\n            }), scores, this.config.iouThreshold, true);\n            detections = indices.map(function (idx) {\n              return new ObjectDetection(scores[idx], classScores[idx], classNames[idx], boxes[idx], inputDimensions);\n            });\n            return [2\n            /*return*/\n            , detections];\n        }\n      });\n    });\n  };\n\n  TinyYolov2Base.prototype.getDefaultModelName = function () {\n    return '';\n  };\n\n  TinyYolov2Base.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap, this.config);\n  };\n\n  TinyYolov2Base.prototype.extractParams = function (weights) {\n    var filterSizes = this.config.filterSizes || TinyYolov2Base.DEFAULT_FILTER_SIZES;\n    var numFilters = filterSizes ? filterSizes.length : undefined;\n\n    if (numFilters !== 7 && numFilters !== 8 && numFilters !== 9) {\n      throw new Error(\"TinyYolov2 - expected 7 | 8 | 9 convolutional filters, but found \" + numFilters + \" filterSizes in config\");\n    }\n\n    return extractParams(weights, this.config, this.boxEncodingSize, filterSizes);\n  };\n\n  TinyYolov2Base.prototype.extractBoxes = function (outputTensor, inputBlobDimensions, scoreThreshold) {\n    return __awaiter(this, void 0, void 0, function () {\n      var width, height, inputSize, correctionFactorX, correctionFactorY, numCells, numBoxes, _a, boxesTensor, scoresTensor, classScoresTensor, results, scoresData, boxesData, row, col, anchor, score, ctX, ctY, width_1, height_1, x, y, pos, _b, classScore, label, _c;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            width = inputBlobDimensions.width, height = inputBlobDimensions.height;\n            inputSize = Math.max(width, height);\n            correctionFactorX = inputSize / width;\n            correctionFactorY = inputSize / height;\n            numCells = outputTensor.shape[1];\n            numBoxes = this.config.anchors.length;\n            _a = tf.tidy(function () {\n              var reshaped = outputTensor.reshape([numCells, numCells, numBoxes, _this.boxEncodingSize]);\n              var boxes = reshaped.slice([0, 0, 0, 0], [numCells, numCells, numBoxes, 4]);\n              var scores = reshaped.slice([0, 0, 0, 4], [numCells, numCells, numBoxes, 1]);\n              var classScores = _this.withClassScores ? tf.softmax(reshaped.slice([0, 0, 0, 5], [numCells, numCells, numBoxes, _this.config.classes.length]), 3) : tf.scalar(0);\n              return [boxes, scores, classScores];\n            }), boxesTensor = _a[0], scoresTensor = _a[1], classScoresTensor = _a[2];\n            results = [];\n            return [4\n            /*yield*/\n            , scoresTensor.array()];\n\n          case 1:\n            scoresData = _d.sent();\n            return [4\n            /*yield*/\n            , boxesTensor.array()];\n\n          case 2:\n            boxesData = _d.sent();\n            row = 0;\n            _d.label = 3;\n\n          case 3:\n            if (!(row < numCells)) return [3\n            /*break*/\n            , 12];\n            col = 0;\n            _d.label = 4;\n\n          case 4:\n            if (!(col < numCells)) return [3\n            /*break*/\n            , 11];\n            anchor = 0;\n            _d.label = 5;\n\n          case 5:\n            if (!(anchor < numBoxes)) return [3\n            /*break*/\n            , 10];\n            score = sigmoid(scoresData[row][col][anchor][0]);\n            if (!(!scoreThreshold || score > scoreThreshold)) return [3\n            /*break*/\n            , 9];\n            ctX = (col + sigmoid(boxesData[row][col][anchor][0])) / numCells * correctionFactorX;\n            ctY = (row + sigmoid(boxesData[row][col][anchor][1])) / numCells * correctionFactorY;\n            width_1 = Math.exp(boxesData[row][col][anchor][2]) * this.config.anchors[anchor].x / numCells * correctionFactorX;\n            height_1 = Math.exp(boxesData[row][col][anchor][3]) * this.config.anchors[anchor].y / numCells * correctionFactorY;\n            x = ctX - width_1 / 2;\n            y = ctY - height_1 / 2;\n            pos = {\n              row: row,\n              col: col,\n              anchor: anchor\n            };\n            if (!this.withClassScores) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , this.extractPredictedClass(classScoresTensor, pos)];\n\n          case 6:\n            _c = _d.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            _c = {\n              classScore: 1,\n              label: 0\n            };\n            _d.label = 8;\n\n          case 8:\n            _b = _c, classScore = _b.classScore, label = _b.label;\n            results.push(__assign({\n              box: new BoundingBox(x, y, x + width_1, y + height_1),\n              score: score,\n              classScore: score * classScore,\n              label: label\n            }, pos));\n            _d.label = 9;\n\n          case 9:\n            anchor++;\n            return [3\n            /*break*/\n            , 5];\n\n          case 10:\n            col++;\n            return [3\n            /*break*/\n            , 4];\n\n          case 11:\n            row++;\n            return [3\n            /*break*/\n            , 3];\n\n          case 12:\n            boxesTensor.dispose();\n            scoresTensor.dispose();\n            classScoresTensor.dispose();\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n\n  TinyYolov2Base.prototype.extractPredictedClass = function (classesTensor, pos) {\n    return __awaiter(this, void 0, void 0, function () {\n      var row, col, anchor, classesData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            row = pos.row, col = pos.col, anchor = pos.anchor;\n            return [4\n            /*yield*/\n            , classesTensor.array()];\n\n          case 1:\n            classesData = _a.sent();\n            return [2\n            /*return*/\n            , Array(this.config.classes.length).fill(0).map(function (_, i) {\n              return classesData[row][col][anchor][i];\n            }).map(function (classScore, label) {\n              return {\n                classScore: classScore,\n                label: label\n              };\n            }).reduce(function (max, curr) {\n              return max.classScore > curr.classScore ? max : curr;\n            })];\n        }\n      });\n    });\n  };\n\n  TinyYolov2Base.DEFAULT_FILTER_SIZES = [3, 16, 32, 64, 128, 256, 512, 1024, 1024];\n  return TinyYolov2Base;\n}(NeuralNetwork);\n\nexport { TinyYolov2Base };","map":{"version":3,"sources":["../../../src/tinyYolov2/TinyYolov2Base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __awaiter, __extends, __generator } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { BoundingBox } from '../classes/BoundingBox';\r\nimport { ObjectDetection } from '../classes/ObjectDetection';\r\nimport { convLayer } from '../common';\r\nimport { toNetInput } from '../dom';\r\nimport { NeuralNetwork } from '../NeuralNetwork';\r\nimport { sigmoid } from '../ops';\r\nimport { nonMaxSuppression } from '../ops/nonMaxSuppression';\r\nimport { normalize } from '../ops/normalize';\r\nimport { validateConfig } from './config';\r\nimport { convWithBatchNorm } from './convWithBatchNorm';\r\nimport { depthwiseSeparableConv } from './depthwiseSeparableConv';\r\nimport { extractParams } from './extractParams';\r\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\r\nimport { leaky } from './leaky';\r\nimport { TinyYolov2Options } from './TinyYolov2Options';\r\nvar TinyYolov2Base = /** @class */ (function (_super) {\r\n    __extends(TinyYolov2Base, _super);\r\n    function TinyYolov2Base(config) {\r\n        var _this = _super.call(this, 'TinyYolov2') || this;\r\n        validateConfig(config);\r\n        _this._config = config;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TinyYolov2Base.prototype, \"config\", {\r\n        get: function () {\r\n            return this._config;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2Base.prototype, \"withClassScores\", {\r\n        get: function () {\r\n            return this.config.withClassScores || this.config.classes.length > 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2Base.prototype, \"boxEncodingSize\", {\r\n        get: function () {\r\n            return 5 + (this.withClassScores ? this.config.classes.length : 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TinyYolov2Base.prototype.runTinyYolov2 = function (x, params) {\r\n        var out = convWithBatchNorm(x, params.conv0);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = convWithBatchNorm(out, params.conv1);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = convWithBatchNorm(out, params.conv2);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = convWithBatchNorm(out, params.conv3);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = convWithBatchNorm(out, params.conv4);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = convWithBatchNorm(out, params.conv5);\r\n        out = tf.maxPool(out, [2, 2], [1, 1], 'same');\r\n        out = convWithBatchNorm(out, params.conv6);\r\n        out = convWithBatchNorm(out, params.conv7);\r\n        return convLayer(out, params.conv8, 'valid', false);\r\n    };\r\n    TinyYolov2Base.prototype.runMobilenet = function (x, params) {\r\n        var out = this.config.isFirstLayerConv2d\r\n            ? leaky(convLayer(x, params.conv0, 'valid', false))\r\n            : depthwiseSeparableConv(x, params.conv0);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = depthwiseSeparableConv(out, params.conv1);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = depthwiseSeparableConv(out, params.conv2);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = depthwiseSeparableConv(out, params.conv3);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = depthwiseSeparableConv(out, params.conv4);\r\n        out = tf.maxPool(out, [2, 2], [2, 2], 'same');\r\n        out = depthwiseSeparableConv(out, params.conv5);\r\n        out = tf.maxPool(out, [2, 2], [1, 1], 'same');\r\n        out = params.conv6 ? depthwiseSeparableConv(out, params.conv6) : out;\r\n        out = params.conv7 ? depthwiseSeparableConv(out, params.conv7) : out;\r\n        return convLayer(out, params.conv8, 'valid', false);\r\n    };\r\n    TinyYolov2Base.prototype.forwardInput = function (input, inputSize) {\r\n        var _this = this;\r\n        var params = this.params;\r\n        if (!params) {\r\n            throw new Error('TinyYolov2 - load model before inference');\r\n        }\r\n        return tf.tidy(function () {\r\n            var batchTensor = input.toBatchTensor(inputSize, false).toFloat();\r\n            batchTensor = _this.config.meanRgb\r\n                ? normalize(batchTensor, _this.config.meanRgb)\r\n                : batchTensor;\r\n            batchTensor = batchTensor.div(tf.scalar(256));\r\n            return _this.config.withSeparableConvs\r\n                ? _this.runMobilenet(batchTensor, params)\r\n                : _this.runTinyYolov2(batchTensor, params);\r\n        });\r\n    };\r\n    TinyYolov2Base.prototype.forward = function (input, inputSize) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = this.forwardInput;\r\n                        return [4 /*yield*/, toNetInput(input)];\r\n                    case 1: return [4 /*yield*/, _a.apply(this, [_b.sent(), inputSize])];\r\n                    case 2: return [2 /*return*/, _b.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TinyYolov2Base.prototype.detect = function (input, forwardParams) {\r\n        if (forwardParams === void 0) { forwardParams = {}; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, inputSize, scoreThreshold, netInput, out, out0, inputDimensions, results, boxes, scores, classScores, classNames, indices, detections;\r\n            var _this = this;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = new TinyYolov2Options(forwardParams), inputSize = _a.inputSize, scoreThreshold = _a.scoreThreshold;\r\n                        return [4 /*yield*/, toNetInput(input)];\r\n                    case 1:\r\n                        netInput = _b.sent();\r\n                        return [4 /*yield*/, this.forwardInput(netInput, inputSize)];\r\n                    case 2:\r\n                        out = _b.sent();\r\n                        out0 = tf.tidy(function () { return tf.unstack(out)[0].expandDims(); });\r\n                        inputDimensions = {\r\n                            width: netInput.getInputWidth(0),\r\n                            height: netInput.getInputHeight(0)\r\n                        };\r\n                        return [4 /*yield*/, this.extractBoxes(out0, netInput.getReshapedInputDimensions(0), scoreThreshold)];\r\n                    case 3:\r\n                        results = _b.sent();\r\n                        out.dispose();\r\n                        out0.dispose();\r\n                        boxes = results.map(function (res) { return res.box; });\r\n                        scores = results.map(function (res) { return res.score; });\r\n                        classScores = results.map(function (res) { return res.classScore; });\r\n                        classNames = results.map(function (res) { return _this.config.classes[res.label]; });\r\n                        indices = nonMaxSuppression(boxes.map(function (box) { return box.rescale(inputSize); }), scores, this.config.iouThreshold, true);\r\n                        detections = indices.map(function (idx) {\r\n                            return new ObjectDetection(scores[idx], classScores[idx], classNames[idx], boxes[idx], inputDimensions);\r\n                        });\r\n                        return [2 /*return*/, detections];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TinyYolov2Base.prototype.getDefaultModelName = function () {\r\n        return '';\r\n    };\r\n    TinyYolov2Base.prototype.extractParamsFromWeigthMap = function (weightMap) {\r\n        return extractParamsFromWeigthMap(weightMap, this.config);\r\n    };\r\n    TinyYolov2Base.prototype.extractParams = function (weights) {\r\n        var filterSizes = this.config.filterSizes || TinyYolov2Base.DEFAULT_FILTER_SIZES;\r\n        var numFilters = filterSizes ? filterSizes.length : undefined;\r\n        if (numFilters !== 7 && numFilters !== 8 && numFilters !== 9) {\r\n            throw new Error(\"TinyYolov2 - expected 7 | 8 | 9 convolutional filters, but found \" + numFilters + \" filterSizes in config\");\r\n        }\r\n        return extractParams(weights, this.config, this.boxEncodingSize, filterSizes);\r\n    };\r\n    TinyYolov2Base.prototype.extractBoxes = function (outputTensor, inputBlobDimensions, scoreThreshold) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var width, height, inputSize, correctionFactorX, correctionFactorY, numCells, numBoxes, _a, boxesTensor, scoresTensor, classScoresTensor, results, scoresData, boxesData, row, col, anchor, score, ctX, ctY, width_1, height_1, x, y, pos, _b, classScore, label, _c;\r\n            var _this = this;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        width = inputBlobDimensions.width, height = inputBlobDimensions.height;\r\n                        inputSize = Math.max(width, height);\r\n                        correctionFactorX = inputSize / width;\r\n                        correctionFactorY = inputSize / height;\r\n                        numCells = outputTensor.shape[1];\r\n                        numBoxes = this.config.anchors.length;\r\n                        _a = tf.tidy(function () {\r\n                            var reshaped = outputTensor.reshape([numCells, numCells, numBoxes, _this.boxEncodingSize]);\r\n                            var boxes = reshaped.slice([0, 0, 0, 0], [numCells, numCells, numBoxes, 4]);\r\n                            var scores = reshaped.slice([0, 0, 0, 4], [numCells, numCells, numBoxes, 1]);\r\n                            var classScores = _this.withClassScores\r\n                                ? tf.softmax(reshaped.slice([0, 0, 0, 5], [numCells, numCells, numBoxes, _this.config.classes.length]), 3)\r\n                                : tf.scalar(0);\r\n                            return [boxes, scores, classScores];\r\n                        }), boxesTensor = _a[0], scoresTensor = _a[1], classScoresTensor = _a[2];\r\n                        results = [];\r\n                        return [4 /*yield*/, scoresTensor.array()];\r\n                    case 1:\r\n                        scoresData = _d.sent();\r\n                        return [4 /*yield*/, boxesTensor.array()];\r\n                    case 2:\r\n                        boxesData = _d.sent();\r\n                        row = 0;\r\n                        _d.label = 3;\r\n                    case 3:\r\n                        if (!(row < numCells)) return [3 /*break*/, 12];\r\n                        col = 0;\r\n                        _d.label = 4;\r\n                    case 4:\r\n                        if (!(col < numCells)) return [3 /*break*/, 11];\r\n                        anchor = 0;\r\n                        _d.label = 5;\r\n                    case 5:\r\n                        if (!(anchor < numBoxes)) return [3 /*break*/, 10];\r\n                        score = sigmoid(scoresData[row][col][anchor][0]);\r\n                        if (!(!scoreThreshold || score > scoreThreshold)) return [3 /*break*/, 9];\r\n                        ctX = ((col + sigmoid(boxesData[row][col][anchor][0])) / numCells) * correctionFactorX;\r\n                        ctY = ((row + sigmoid(boxesData[row][col][anchor][1])) / numCells) * correctionFactorY;\r\n                        width_1 = ((Math.exp(boxesData[row][col][anchor][2]) * this.config.anchors[anchor].x) / numCells) * correctionFactorX;\r\n                        height_1 = ((Math.exp(boxesData[row][col][anchor][3]) * this.config.anchors[anchor].y) / numCells) * correctionFactorY;\r\n                        x = (ctX - (width_1 / 2));\r\n                        y = (ctY - (height_1 / 2));\r\n                        pos = { row: row, col: col, anchor: anchor };\r\n                        if (!this.withClassScores) return [3 /*break*/, 7];\r\n                        return [4 /*yield*/, this.extractPredictedClass(classScoresTensor, pos)];\r\n                    case 6:\r\n                        _c = _d.sent();\r\n                        return [3 /*break*/, 8];\r\n                    case 7:\r\n                        _c = { classScore: 1, label: 0 };\r\n                        _d.label = 8;\r\n                    case 8:\r\n                        _b = _c, classScore = _b.classScore, label = _b.label;\r\n                        results.push(__assign({ box: new BoundingBox(x, y, x + width_1, y + height_1), score: score, classScore: score * classScore, label: label }, pos));\r\n                        _d.label = 9;\r\n                    case 9:\r\n                        anchor++;\r\n                        return [3 /*break*/, 5];\r\n                    case 10:\r\n                        col++;\r\n                        return [3 /*break*/, 4];\r\n                    case 11:\r\n                        row++;\r\n                        return [3 /*break*/, 3];\r\n                    case 12:\r\n                        boxesTensor.dispose();\r\n                        scoresTensor.dispose();\r\n                        classScoresTensor.dispose();\r\n                        return [2 /*return*/, results];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TinyYolov2Base.prototype.extractPredictedClass = function (classesTensor, pos) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var row, col, anchor, classesData;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        row = pos.row, col = pos.col, anchor = pos.anchor;\r\n                        return [4 /*yield*/, classesTensor.array()];\r\n                    case 1:\r\n                        classesData = _a.sent();\r\n                        return [2 /*return*/, Array(this.config.classes.length).fill(0)\r\n                                .map(function (_, i) { return classesData[row][col][anchor][i]; })\r\n                                .map(function (classScore, label) { return ({\r\n                                classScore: classScore,\r\n                                label: label\r\n                            }); })\r\n                                .reduce(function (max, curr) { return max.classScore > curr.classScore ? max : curr; })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TinyYolov2Base.DEFAULT_FILTER_SIZES = [\r\n        3, 16, 32, 64, 128, 256, 512, 1024, 1024\r\n    ];\r\n    return TinyYolov2Base;\r\n}(NeuralNetwork));\r\nexport { TinyYolov2Base };\r\n//# sourceMappingURL=TinyYolov2Base.js.map"]},"metadata":{},"sourceType":"module"}