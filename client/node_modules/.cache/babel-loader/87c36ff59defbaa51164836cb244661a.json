{"ast":null,"code":"import { Box } from '../classes';\nimport { getContext2dOrThrow } from '../dom/getContext2dOrThrow';\nimport { AnchorPosition, DrawTextField, DrawTextFieldOptions } from './DrawTextField';\n\nvar DrawBoxOptions =\n/** @class */\nfunction () {\n  function DrawBoxOptions(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var boxColor = options.boxColor,\n        lineWidth = options.lineWidth,\n        label = options.label,\n        drawLabelOptions = options.drawLabelOptions;\n    this.boxColor = boxColor || 'rgba(0, 0, 255, 1)';\n    this.lineWidth = lineWidth || 2;\n    this.label = label;\n    var defaultDrawLabelOptions = {\n      anchorPosition: AnchorPosition.BOTTOM_LEFT,\n      backgroundColor: this.boxColor\n    };\n    this.drawLabelOptions = new DrawTextFieldOptions(Object.assign({}, defaultDrawLabelOptions, drawLabelOptions));\n  }\n\n  return DrawBoxOptions;\n}();\n\nexport { DrawBoxOptions };\n\nvar DrawBox =\n/** @class */\nfunction () {\n  function DrawBox(box, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.box = new Box(box);\n    this.options = new DrawBoxOptions(options);\n  }\n\n  DrawBox.prototype.draw = function (canvasArg) {\n    var ctx = getContext2dOrThrow(canvasArg);\n    var _a = this.options,\n        boxColor = _a.boxColor,\n        lineWidth = _a.lineWidth;\n    var _b = this.box,\n        x = _b.x,\n        y = _b.y,\n        width = _b.width,\n        height = _b.height;\n    ctx.strokeStyle = boxColor;\n    ctx.lineWidth = lineWidth;\n    ctx.strokeRect(x, y, width, height);\n    var label = this.options.label;\n\n    if (label) {\n      new DrawTextField([label], {\n        x: x - lineWidth / 2,\n        y: y\n      }, this.options.drawLabelOptions).draw(canvasArg);\n    }\n  };\n\n  return DrawBox;\n}();\n\nexport { DrawBox };","map":{"version":3,"sources":["../../../src/draw/DrawBox.ts"],"names":[],"mappings":"AAAA,SAAS,GAAT,QAAyC,YAAzC;AACA,SAAS,mBAAT,QAAoC,4BAApC;AACA,SAAS,cAAT,EAAyB,aAAzB,EAAwC,oBAAxC,QAA2F,iBAA3F;;AASA,IAAA,cAAA;AAAA;AAAA,YAAA;AAME,WAAA,cAAA,CAAY,OAAZ,EAAyC;AAA7B,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA6B;;AAC/B,QAAA,QAAA,GAAA,OAAA,CAAA,QAAA;AAAA,QAAU,SAAA,GAAA,OAAA,CAAA,SAAV;AAAA,QAAqB,KAAA,GAAA,OAAA,CAAA,KAArB;AAAA,QAA4B,gBAAA,GAAA,OAAA,CAAA,gBAA5B;AACR,SAAK,QAAL,GAAgB,QAAQ,IAAI,oBAA5B;AACA,SAAK,SAAL,GAAiB,SAAS,IAAI,CAA9B;AACA,SAAK,KAAL,GAAa,KAAb;AAEA,QAAM,uBAAuB,GAAG;AAC9B,MAAA,cAAc,EAAE,cAAc,CAAC,WADD;AAE9B,MAAA,eAAe,EAAE,KAAK;AAFQ,KAAhC;AAIA,SAAK,gBAAL,GAAwB,IAAI,oBAAJ,CAAyB,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,uBAAlB,EAA2C,gBAA3C,CAAzB,CAAxB;AACD;;AACH,SAAA,cAAA;AAAC,CAlBD,EAAA;;;;AAoBA,IAAA,OAAA;AAAA;AAAA,YAAA;AAIE,WAAA,OAAA,CACE,GADF,EAEE,OAFF,EAE+B;AAA7B,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA6B;;AAE7B,SAAK,GAAL,GAAW,IAAI,GAAJ,CAAQ,GAAR,CAAX;AACA,SAAK,OAAL,GAAe,IAAI,cAAJ,CAAmB,OAAnB,CAAf;AACD;;AAED,EAAA,OAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,SAAL,EAAqE;AACnE,QAAM,GAAG,GAAG,mBAAmB,CAAC,SAAD,CAA/B;AAEM,QAAA,EAAA,GAAA,KAAA,OAAA;AAAA,QAAE,QAAA,GAAA,EAAA,CAAA,QAAF;AAAA,QAAY,SAAA,GAAA,EAAA,CAAA,SAAZ;AAEA,QAAA,EAAA,GAAA,KAAA,GAAA;AAAA,QAAE,CAAA,GAAA,EAAA,CAAA,CAAF;AAAA,QAAK,CAAA,GAAA,EAAA,CAAA,CAAL;AAAA,QAAQ,KAAA,GAAA,EAAA,CAAA,KAAR;AAAA,QAAe,MAAA,GAAA,EAAA,CAAA,MAAf;AACN,IAAA,GAAG,CAAC,WAAJ,GAAkB,QAAlB;AACA,IAAA,GAAG,CAAC,SAAJ,GAAgB,SAAhB;AACA,IAAA,GAAG,CAAC,UAAJ,CAAe,CAAf,EAAkB,CAAlB,EAAqB,KAArB,EAA4B,MAA5B;AAEQ,QAAA,KAAA,GAAA,KAAA,OAAA,CAAA,KAAA;;AACR,QAAI,KAAJ,EAAW;AACT,UAAI,aAAJ,CAAkB,CAAC,KAAD,CAAlB,EAA2B;AAAE,QAAA,CAAC,EAAE,CAAC,GAAI,SAAS,GAAG,CAAtB;AAA0B,QAAA,CAAC,EAAA;AAA3B,OAA3B,EAA0D,KAAK,OAAL,CAAa,gBAAvE,EAAyF,IAAzF,CAA8F,SAA9F;AACD;AACF,GAdD;;AAeF,SAAA,OAAA;AAAC,CA3BD,EAAA","sourceRoot":"","sourcesContent":["import { Box } from '../classes';\r\nimport { getContext2dOrThrow } from '../dom/getContext2dOrThrow';\r\nimport { AnchorPosition, DrawTextField, DrawTextFieldOptions } from './DrawTextField';\r\nvar DrawBoxOptions = /** @class */ (function () {\r\n    function DrawBoxOptions(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var boxColor = options.boxColor, lineWidth = options.lineWidth, label = options.label, drawLabelOptions = options.drawLabelOptions;\r\n        this.boxColor = boxColor || 'rgba(0, 0, 255, 1)';\r\n        this.lineWidth = lineWidth || 2;\r\n        this.label = label;\r\n        var defaultDrawLabelOptions = {\r\n            anchorPosition: AnchorPosition.BOTTOM_LEFT,\r\n            backgroundColor: this.boxColor\r\n        };\r\n        this.drawLabelOptions = new DrawTextFieldOptions(Object.assign({}, defaultDrawLabelOptions, drawLabelOptions));\r\n    }\r\n    return DrawBoxOptions;\r\n}());\r\nexport { DrawBoxOptions };\r\nvar DrawBox = /** @class */ (function () {\r\n    function DrawBox(box, options) {\r\n        if (options === void 0) { options = {}; }\r\n        this.box = new Box(box);\r\n        this.options = new DrawBoxOptions(options);\r\n    }\r\n    DrawBox.prototype.draw = function (canvasArg) {\r\n        var ctx = getContext2dOrThrow(canvasArg);\r\n        var _a = this.options, boxColor = _a.boxColor, lineWidth = _a.lineWidth;\r\n        var _b = this.box, x = _b.x, y = _b.y, width = _b.width, height = _b.height;\r\n        ctx.strokeStyle = boxColor;\r\n        ctx.lineWidth = lineWidth;\r\n        ctx.strokeRect(x, y, width, height);\r\n        var label = this.options.label;\r\n        if (label) {\r\n            new DrawTextField([label], { x: x - (lineWidth / 2), y: y }, this.options.drawLabelOptions).draw(canvasArg);\r\n        }\r\n    };\r\n    return DrawBox;\r\n}());\r\nexport { DrawBox };\r\n//# sourceMappingURL=DrawBox.js.map"]},"metadata":{},"sourceType":"module"}