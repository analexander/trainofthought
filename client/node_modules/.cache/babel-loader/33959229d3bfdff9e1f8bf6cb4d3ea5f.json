{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LRN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Normalizes the activation of a local neighborhood across or within\n * channels.\n *\n * @param x The input tensor. The 4-D input tensor is treated as a 3-D array\n *     of 1D vectors (along the last dimension), and each vector is\n *     normalized independently.\n * @param depthRadius The number of adjacent channels in the 1D normalization\n *     window.\n * @param bias A constant bias term for the basis.\n * @param alpha A scale factor, usually positive.\n * @param beta An exponent.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\n\nfunction localResponseNormalization_(x) {\n  var depthRadius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  var bias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var beta = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n  var $x = convertToTensor(x, 'x', 'localResponseNormalization');\n  util.assert($x.rank === 4 || $x.rank === 3, function () {\n    return \"Error in localResponseNormalization: x must be rank 3 or 4 but got\\n               rank \".concat($x.rank, \".\");\n  });\n  util.assert(util.isInt(depthRadius), function () {\n    return \"Error in localResponseNormalization: depthRadius must be an \" + \"integer but got depthRadius \".concat(depthRadius, \".\");\n  });\n  var x4D = $x;\n  var reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  var forward = function forward(backend, save) {\n    var y = backend.localResponseNormalization4D(x4D, depthRadius, bias, alpha, beta);\n    save([x4D, y]);\n    return y;\n  };\n\n  var inputs = {\n    x: x4D\n  };\n  var attrs = {\n    depthRadius: depthRadius,\n    bias: bias,\n    alpha: alpha,\n    beta: beta\n  };\n  var res = ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , LRN, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  } else {\n    return res;\n  }\n}\n\nexport var localResponseNormalization = op({\n  localResponseNormalization_: localResponseNormalization_\n});","map":null,"metadata":{},"sourceType":"module"}