{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport { conv2DBackpropInput } from './conv2d_backprop_input';\nimport { op } from './operation';\n/**\n * Computes the transposed 2D convolution of an image, also known as a\n * deconvolution.\n *\n * @param x The input image, of rank 4 or rank 3, of shape\n *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, outDepth, inDepth]`.\n *     `inDepth` must match `inDepth` in `x`.\n * @param outputShape Output shape, of rank 4 or rank 3:\n *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.\n * @param strides The strides of the original convolution:\n *     `[strideHeight, strideWidth]`.\n * @param pad  The type of padding algorithm used in the non-transpose version\n *    of the op.\n * @param dimRoundingMode The rounding mode used when computing output\n *    dimensions if pad is a number. If none is provided, it will not round\n *    and error if the output is of fractional size.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\n\nfunction conv2dTranspose_(x, filter, outputShape, strides, pad, dimRoundingMode) {\n  var $x = convertToTensor(x, 'x', 'conv2dTranspose');\n  var $filter = convertToTensor(filter, 'filter', 'conv2dTranspose');\n  return conv2DBackpropInput(outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);\n}\n\nexport var conv2dTranspose = op({\n  conv2dTranspose_: conv2dTranspose_\n});","map":null,"metadata":{},"sourceType":"module"}