{"ast":null,"code":"import _regeneratorRuntime from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { browser, env, image, tensor1d, tensor2d, tidy, util } from '@tensorflow/tfjs-core';\nimport { LazyIterator } from './lazy_iterator';\n/**\n * Provide a stream of image tensors from webcam video stream. Only works in\n * browser environment.\n */\n\nexport var WebcamIterator = /*#__PURE__*/function (_LazyIterator) {\n  _inherits(WebcamIterator, _LazyIterator);\n\n  function WebcamIterator(webcamVideoElement, webcamConfig) {\n    var _this;\n\n    _classCallCheck(this, WebcamIterator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebcamIterator).call(this));\n    _this.webcamVideoElement = webcamVideoElement;\n    _this.webcamConfig = webcamConfig;\n    _this.isClosed = true;\n    _this.resize = false;\n\n    if (_this.needToResize()) {\n      _this.resize = true;\n      _this.cropSize = [_this.webcamConfig.resizeHeight, _this.webcamConfig.resizeWidth];\n      _this.cropBoxInd = tensor1d([0], 'int32');\n\n      if (_this.webcamConfig.centerCrop) {\n        // Calculate the box based on resizing shape.\n        var widthCroppingRatio = _this.webcamConfig.resizeWidth * 1.0 / _this.webcamVideoElement.width;\n        var heightCroppingRatio = _this.webcamConfig.resizeHeight * 1.0 / _this.webcamVideoElement.height;\n        var widthCropStart = (1 - widthCroppingRatio) / 2;\n        var heightCropStart = (1 - heightCroppingRatio) / 2;\n        var widthCropEnd = widthCropStart + widthCroppingRatio;\n        var heightCropEnd = heightCroppingRatio + heightCropStart;\n        _this.cropBox = tensor2d([heightCropStart, widthCropStart, heightCropEnd, widthCropEnd], [1, 4]);\n      } else {\n        _this.cropBox = tensor2d([0, 0, 1, 1], [1, 4]);\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(WebcamIterator, [{\n    key: \"summary\",\n    value: function summary() {\n      return \"webcam\";\n    } // Construct a WebcamIterator and start it's video stream.\n\n  }, {\n    key: \"start\",\n    // Async function to start video stream.\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.webcamConfig.facingMode) {\n                  util.assert(this.webcamConfig.facingMode === 'user' || this.webcamConfig.facingMode === 'environment', function () {\n                    return \"Invalid webcam facing mode: \".concat(_this2.webcamConfig.facingMode, \". \") + \"Please provide 'user' or 'environment'\";\n                  });\n                }\n\n                _context.prev = 1;\n                _context.next = 4;\n                return navigator.mediaDevices.getUserMedia({\n                  video: {\n                    deviceId: this.webcamConfig.deviceId,\n                    facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : 'user',\n                    width: this.webcamVideoElement.width,\n                    height: this.webcamVideoElement.height\n                  }\n                });\n\n              case 4:\n                this.stream = _context.sent;\n                _context.next = 11;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                // Modify the error message but leave the stack trace intact\n                _context.t0.message = \"Error thrown while initializing video stream: \".concat(_context.t0.message);\n                throw _context.t0;\n\n              case 11:\n                if (this.stream) {\n                  _context.next = 13;\n                  break;\n                }\n\n                throw new Error('Could not obtain video from webcam.');\n\n              case 13:\n                // Older browsers may not have srcObject\n                try {\n                  this.webcamVideoElement.srcObject = this.stream;\n                } catch (error) {\n                  console.log(error);\n                  this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);\n                } // Start the webcam video stream\n\n\n                this.webcamVideoElement.play();\n                this.isClosed = false;\n                return _context.abrupt(\"return\", new Promise(function (resolve) {\n                  // Add event listener to make sure the webcam has been fully initialized.\n                  _this2.webcamVideoElement.onloadedmetadata = function () {\n                    resolve();\n                  };\n                }));\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 7]]);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var img;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.isClosed) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  value: null,\n                  done: true\n                });\n\n              case 2:\n                _context2.prev = 2;\n                img = browser.fromPixels(this.webcamVideoElement);\n                _context2.next = 9;\n                break;\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](2);\n                throw new Error(\"Error thrown converting video to pixels: \".concat(JSON.stringify(_context2.t0)));\n\n              case 9:\n                if (!this.resize) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                _context2.prev = 10;\n                return _context2.abrupt(\"return\", {\n                  value: this.cropAndResizeFrame(img),\n                  done: false\n                });\n\n              case 14:\n                _context2.prev = 14;\n                _context2.t1 = _context2[\"catch\"](10);\n                throw new Error(\"Error thrown cropping the video: \".concat(_context2.t1.message));\n\n              case 17:\n                _context2.prev = 17;\n                img.dispose();\n                return _context2.finish(17);\n\n              case 20:\n                _context2.next = 23;\n                break;\n\n              case 22:\n                return _context2.abrupt(\"return\", {\n                  value: img,\n                  done: false\n                });\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 6], [10, 14, 17, 20]]);\n      }));\n\n      function next() {\n        return _next.apply(this, arguments);\n      }\n\n      return next;\n    }()\n  }, {\n    key: \"needToResize\",\n    value: function needToResize() {\n      // If resizeWidth and resizeHeight are provided, and different from the\n      // width and height of original HTMLVideoElement, then resizing and cropping\n      // is required.\n      if (this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight)) {\n        return true;\n      }\n\n      return false;\n    } // Cropping and resizing each frame based on config\n\n  }, {\n    key: \"cropAndResizeFrame\",\n    value: function cropAndResizeFrame(img) {\n      var _this3 = this;\n\n      return tidy(function () {\n        var expandedImage = img.toFloat().expandDims(0);\n        var resizedImage;\n        resizedImage = image.cropAndResize(expandedImage, _this3.cropBox, _this3.cropBoxInd, _this3.cropSize, 'bilinear'); // Extract image from batch cropping.\n\n        var shape = resizedImage.shape;\n        return resizedImage.reshape(shape.slice(1));\n      });\n    } // Capture one frame from the video stream, and extract the value from\n    // iterator.next() result.\n\n  }, {\n    key: \"capture\",\n    value: function () {\n      var _capture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.next();\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent.value);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function capture() {\n        return _capture.apply(this, arguments);\n      }\n\n      return capture;\n    }() // Stop the video stream and pause webcam iterator.\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var tracks = this.stream.getTracks();\n      tracks.forEach(function (track) {\n        return track.stop();\n      });\n\n      try {\n        this.webcamVideoElement.srcObject = null;\n      } catch (error) {\n        console.log(error);\n        this.webcamVideoElement.src = null;\n      }\n\n      this.isClosed = true;\n    } // Override toArray() function to prevent collecting.\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      throw new Error('Can not convert infinite video stream to array.');\n    }\n  }], [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(webcamVideoElement) {\n        var webcamConfig,\n            webcamIterator,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                webcamConfig = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n\n                if (!env().get('IS_NODE')) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                throw new Error('tf.data.webcam is only supported in browser environment.');\n\n              case 3:\n                if (webcamVideoElement) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                // If webcam video element is not provided, create a hidden video element\n                // with provided width and height.\n                webcamVideoElement = document.createElement('video');\n\n                if (!(!webcamConfig.resizeWidth || !webcamConfig.resizeHeight)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                throw new Error('Please provide webcam video element, or resizeWidth and ' + 'resizeHeight to create a hidden video element.');\n\n              case 7:\n                webcamVideoElement.width = webcamConfig.resizeWidth;\n                webcamVideoElement.height = webcamConfig.resizeHeight;\n\n              case 9:\n                webcamIterator = new WebcamIterator(webcamVideoElement, webcamConfig); // Call async function to initialize the video stream.\n\n                _context4.next = 12;\n                return webcamIterator.start();\n\n              case 12:\n                return _context4.abrupt(\"return\", webcamIterator);\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function create(_x) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return WebcamIterator;\n}(LazyIterator);","map":null,"metadata":{},"sourceType":"module"}