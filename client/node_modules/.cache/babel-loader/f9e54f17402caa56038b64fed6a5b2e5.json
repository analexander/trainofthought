{"ast":null,"code":"import _toConsumableArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nvar OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nvar JSON_TYPE = 'application/json';\nexport var HTTPRequest = /*#__PURE__*/function () {\n  function HTTPRequest(path, loadOptions) {\n    _classCallCheck(this, HTTPRequest);\n\n    this.DEFAULT_METHOD = 'POST';\n\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(typeof loadOptions.fetchFunc === 'function', function () {\n        return 'Must pass a function that matches the signature of ' + '`fetch` (see ' + 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)';\n      });\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n\n    assert(path != null && path.length > 0, function () {\n      return 'URL path for http must not be null, undefined or ' + 'empty.';\n    });\n\n    if (Array.isArray(path)) {\n      assert(path.length === 2, function () {\n        return 'URL paths for http must have a length of 2, ' + \"(actual length is \".concat(path.length, \").\");\n      });\n    }\n\n    this.path = path;\n\n    if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) {\n      throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n    }\n\n    this.requestInit = loadOptions.requestInit || {};\n  }\n\n  _createClass(HTTPRequest, [{\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(modelArtifacts) {\n        var init, weightsManifest, modelTopologyAndWeightManifest, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' + 'in binary formats yet.');\n\n              case 2:\n                init = Object.assign({\n                  method: this.DEFAULT_METHOD\n                }, this.requestInit);\n                init.body = new FormData();\n                weightsManifest = [{\n                  paths: ['./model.weights.bin'],\n                  weights: modelArtifacts.weightSpecs\n                }];\n                modelTopologyAndWeightManifest = {\n                  modelTopology: modelArtifacts.modelTopology,\n                  format: modelArtifacts.format,\n                  generatedBy: modelArtifacts.generatedBy,\n                  convertedBy: modelArtifacts.convertedBy,\n                  userDefinedMetadata: modelArtifacts.userDefinedMetadata,\n                  weightsManifest: weightsManifest\n                };\n                init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n                  type: JSON_TYPE\n                }), 'model.json');\n\n                if (modelArtifacts.weightData != null) {\n                  init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], {\n                    type: OCTET_STREAM_MIME_TYPE\n                  }), 'model.weights.bin');\n                }\n\n                _context.next = 10;\n                return this.fetch(this.path, init);\n\n              case 10:\n                response = _context.sent;\n\n                if (!response.ok) {\n                  _context.next = 15;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n                  responses: [response]\n                });\n\n              case 15:\n                throw new Error(\"BrowserHTTPRequest.save() failed due to HTTP response status \" + \"\".concat(response.status, \".\"));\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function save(_x) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n    /**\n     * Load model artifacts via HTTP request(s).\n     *\n     * See the documentation to `tf.io.http` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model artifacts (if loading succeeds).\n     */\n\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var modelConfigRequest, modelConfig, message, modelTopology, weightsManifest, generatedBy, convertedBy, format, userDefinedMetadata, weightSpecs, weightData, results, _results, artifacts, initializer;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.fetch(this.path, this.requestInit);\n\n              case 2:\n                modelConfigRequest = _context2.sent;\n\n                if (modelConfigRequest.ok) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Request to \".concat(this.path, \" failed with status code \") + \"\".concat(modelConfigRequest.status, \". Please verify this URL points to \") + \"the model JSON of the model to load.\");\n\n              case 5:\n                _context2.prev = 5;\n                _context2.next = 8;\n                return modelConfigRequest.json();\n\n              case 8:\n                modelConfig = _context2.sent;\n                _context2.next = 16;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](5);\n                message = \"Failed to parse model JSON of response from \".concat(this.path, \".\"); // TODO(nsthorat): Remove this after some time when we're comfortable that\n                // .pb files are mostly gone.\n\n                if (this.path.endsWith('.pb')) {\n                  message += ' Your path contains a .pb file extension. ' + 'Support for .pb models have been removed in TensorFlow.js 1.0 ' + 'in favor of .json models. You can re-convert your Python ' + 'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' + 'or you can convert your.pb models with the \\'pb2json\\'' + 'NPM script in the tensorflow/tfjs-converter repository.';\n                } else {\n                  message += ' Please make sure the server is serving valid ' + 'JSON for this request.';\n                }\n\n                throw new Error(message);\n\n              case 16:\n                modelTopology = modelConfig.modelTopology;\n                weightsManifest = modelConfig.weightsManifest;\n                generatedBy = modelConfig.generatedBy;\n                convertedBy = modelConfig.convertedBy;\n                format = modelConfig.format;\n                userDefinedMetadata = modelConfig.userDefinedMetadata; // We do not allow both modelTopology and weightsManifest to be missing.\n\n                if (!(modelTopology == null && weightsManifest == null)) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                throw new Error(\"The JSON from HTTP path \".concat(this.path, \" contains neither model \") + \"topology or manifest for weights.\");\n\n              case 24:\n                if (!(weightsManifest != null)) {\n                  _context2.next = 31;\n                  break;\n                }\n\n                _context2.next = 27;\n                return this.loadWeights(weightsManifest);\n\n              case 27:\n                results = _context2.sent;\n                _results = _slicedToArray(results, 2);\n                weightSpecs = _results[0];\n                weightData = _results[1];\n\n              case 31:\n                artifacts = {\n                  modelTopology: modelTopology,\n                  weightSpecs: weightSpecs,\n                  weightData: weightData,\n                  userDefinedMetadata: userDefinedMetadata,\n                  generatedBy: generatedBy,\n                  convertedBy: convertedBy,\n                  format: format\n                };\n                initializer = modelConfig.modelInitializer;\n\n                if (initializer) {\n                  artifacts.modelInitializer = initializer;\n                }\n\n                return _context2.abrupt(\"return\", artifacts);\n\n              case 35:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[5, 11]]);\n      }));\n\n      function load() {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"loadWeights\",\n    value: function () {\n      var _loadWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(weightsManifest) {\n        var weightPath, _parseUrl, _parseUrl2, prefix, suffix, pathPrefix, weightSpecs, _iterator, _step, entry, fetchURLs, urlPromises, _iterator2, _step2, weightsGroup, _iterator3, _step3, path, buffers;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n                _parseUrl = parseUrl(weightPath), _parseUrl2 = _slicedToArray(_parseUrl, 2), prefix = _parseUrl2[0], suffix = _parseUrl2[1];\n                pathPrefix = this.weightPathPrefix || prefix;\n                weightSpecs = [];\n                _iterator = _createForOfIteratorHelper(weightsManifest);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    entry = _step.value;\n                    weightSpecs.push.apply(weightSpecs, _toConsumableArray(entry.weights));\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                fetchURLs = [];\n                urlPromises = [];\n                _iterator2 = _createForOfIteratorHelper(weightsManifest);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    weightsGroup = _step2.value;\n                    _iterator3 = _createForOfIteratorHelper(weightsGroup.paths);\n\n                    try {\n                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                        path = _step3.value;\n\n                        if (this.weightUrlConverter != null) {\n                          urlPromises.push(this.weightUrlConverter(path));\n                        } else {\n                          fetchURLs.push(pathPrefix + path + suffix);\n                        }\n                      }\n                    } catch (err) {\n                      _iterator3.e(err);\n                    } finally {\n                      _iterator3.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                if (!this.weightUrlConverter) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                _context3.t0 = fetchURLs.push;\n                _context3.t1 = fetchURLs;\n                _context3.t2 = _toConsumableArray;\n                _context3.next = 16;\n                return Promise.all(urlPromises);\n\n              case 16:\n                _context3.t3 = _context3.sent;\n                _context3.t4 = (0, _context3.t2)(_context3.t3);\n\n                _context3.t0.apply.call(_context3.t0, _context3.t1, _context3.t4);\n\n              case 19:\n                _context3.next = 21;\n                return loadWeightsAsArrayBuffer(fetchURLs, {\n                  requestInit: this.requestInit,\n                  fetchFunc: this.fetch,\n                  onProgress: this.onProgress\n                });\n\n              case 21:\n                buffers = _context3.sent;\n                return _context3.abrupt(\"return\", [weightSpecs, concatenateArrayBuffers(buffers)]);\n\n              case 23:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadWeights(_x2) {\n        return _loadWeights.apply(this, arguments);\n      }\n\n      return loadWeights;\n    }()\n  }]);\n\n  return HTTPRequest;\n}();\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\n\nexport function parseUrl(url) {\n  var lastSlash = url.lastIndexOf('/');\n  var lastSearchParam = url.lastIndexOf('?');\n  var prefix = url.substring(0, lastSlash);\n  var suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport var httpRouter = function httpRouter(url, loadOptions) {\n  if (typeof fetch === 'undefined' && (loadOptions == null || loadOptions.fetchFunc == null)) {\n    // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n    // an environment that is not the browser or node they have to setup a\n    // global fetch polyfill.\n    return null;\n  } else {\n    var isHTTP = true;\n\n    if (Array.isArray(url)) {\n      isHTTP = url.every(function (urlItem) {\n        return isHTTPScheme(urlItem);\n      });\n    } else {\n      isHTTP = isHTTPScheme(url);\n    }\n\n    if (isHTTP) {\n      return http(url, loadOptions);\n    }\n  }\n\n  return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconsistutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function http(path, loadOptions) {\n  return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\n\nexport function browserHTTPRequest(path, loadOptions) {\n  return http(path, loadOptions);\n}","map":null,"metadata":{},"sourceType":"module"}