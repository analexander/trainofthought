{"ast":null,"code":"\"use strict\";\n/**\n * Module exports.\n */\n\nmodule.exports = exports;\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar nopt = require('nopt');\n\nvar log = require('npmlog');\n\nlog.disableProgress();\n\nvar napi = require('./util/napi.js');\n\nvar EE = require('events').EventEmitter;\n\nvar inherits = require('util').inherits;\n\nvar commands = ['clean', 'install', 'reinstall', 'build', 'rebuild', 'package', 'testpackage', 'publish', 'unpublish', 'info', 'testbinary', 'reveal', 'configure'];\nvar aliases = {}; // differentiate node-pre-gyp's logs from npm's\n\nlog.heading = 'node-pre-gyp';\nexports.find = require('./pre-binding').find;\n\nfunction Run() {\n  var self = this;\n  this.commands = {};\n  commands.forEach(function (command) {\n    self.commands[command] = function (argv, callback) {\n      log.verbose('command', command, argv);\n      return require('./' + command)(self, argv, callback);\n    };\n  });\n}\n\ninherits(Run, EE);\nexports.Run = Run;\nvar proto = Run.prototype;\n/**\n * Export the contents of the package.json.\n */\n\nproto.package = require('../package.json');\n/**\n * nopt configuration definitions\n */\n\nproto.configDefs = {\n  help: Boolean,\n  // everywhere\n  arch: String,\n  // 'configure'\n  debug: Boolean,\n  // 'build'\n  directory: String,\n  // bin\n  proxy: String,\n  // 'install'\n  loglevel: String // everywhere\n\n};\n/**\n * nopt shorthands\n */\n\nproto.shorthands = {\n  release: '--no-debug',\n  C: '--directory',\n  debug: '--debug',\n  j: '--jobs',\n  silent: '--loglevel=silent',\n  silly: '--loglevel=silly',\n  verbose: '--loglevel=verbose'\n};\n/**\n * expose the command aliases for the bin file to use.\n */\n\nproto.aliases = aliases;\n/**\n * Parses the given argv array and sets the 'opts',\n * 'argv' and 'command' properties.\n */\n\nproto.parseArgv = function parseOpts(argv) {\n  this.opts = nopt(this.configDefs, this.shorthands, argv);\n  this.argv = this.opts.argv.remain.slice();\n  var commands = this.todo = []; // create a copy of the argv array with aliases mapped\n\n  argv = this.argv.map(function (arg) {\n    // is this an alias?\n    if (arg in this.aliases) {\n      arg = this.aliases[arg];\n    }\n\n    return arg;\n  }, this); // process the mapped args into \"command\" objects (\"name\" and \"args\" props)\n\n  argv.slice().forEach(function (arg) {\n    if (arg in this.commands) {\n      var args = argv.splice(0, argv.indexOf(arg));\n      argv.shift();\n\n      if (commands.length > 0) {\n        commands[commands.length - 1].args = args;\n      }\n\n      commands.push({\n        name: arg,\n        args: []\n      });\n    }\n  }, this);\n\n  if (commands.length > 0) {\n    commands[commands.length - 1].args = argv.splice(0);\n  } // expand commands entries for multiple napi builds\n\n\n  var dir = this.opts.directory;\n  if (dir == null) dir = process.cwd();\n  var package_json = JSON.parse(fs.readFileSync(path.join(dir, 'package.json')));\n  this.todo = napi.expand_commands(package_json, this.opts, commands); // support for inheriting config env variables from npm\n\n  var npm_config_prefix = 'npm_config_';\n  Object.keys(process.env).forEach(function (name) {\n    if (name.indexOf(npm_config_prefix) !== 0) return;\n    var val = process.env[name];\n\n    if (name === npm_config_prefix + 'loglevel') {\n      log.level = val;\n    } else {\n      // add the user-defined options to the config\n      name = name.substring(npm_config_prefix.length); // avoid npm argv clobber already present args\n      // which avoids problem of 'npm test' calling\n      // script that runs unique npm install commands\n\n      if (name === 'argv') {\n        if (this.opts.argv && this.opts.argv.remain && this.opts.argv.remain.length) {// do nothing\n        } else {\n          this.opts[name] = val;\n        }\n      } else {\n        this.opts[name] = val;\n      }\n    }\n  }, this);\n\n  if (this.opts.loglevel) {\n    log.level = this.opts.loglevel;\n  }\n\n  log.resume();\n};\n/**\n * Returns the usage instructions for node-pre-gyp.\n */\n\n\nproto.usage = function usage() {\n  var str = ['', '  Usage: node-pre-gyp <command> [options]', '', '  where <command> is one of:', commands.map(function (c) {\n    return '    - ' + c + ' - ' + require('./' + c).usage;\n  }).join('\\n'), '', 'node-pre-gyp@' + this.version + '  ' + path.resolve(__dirname, '..'), 'node@' + process.versions.node].join('\\n');\n  return str;\n};\n/**\n * Version number getter.\n */\n\n\nObject.defineProperty(proto, 'version', {\n  get: function get() {\n    return this.package.version;\n  },\n  enumerable: true\n});","map":null,"metadata":{},"sourceType":"script"}