{"ast":null,"code":"\"use strict\";\n\nvar fs = require('fs');\n\nmodule.exports = exports;\nvar versionArray = process.version.substr(1).replace(/-.*$/, '').split('.').map(function (item) {\n  return +item;\n});\nvar napi_multiple_commands = ['build', 'clean', 'configure', 'package', 'publish', 'reveal', 'testbinary', 'testpackage', 'unpublish'];\nvar napi_build_version_tag = 'napi_build_version=';\n\nmodule.exports.get_napi_version = function (target) {\n  // target may be undefined\n  // returns the non-zero numeric napi version or undefined if napi is not supported.\n  // correctly supporting target requires an updated cross-walk\n  var version = process.versions.napi; // can be undefined\n\n  if (!version) {\n    // this code should never need to be updated\n    if (versionArray[0] === 9 && versionArray[1] >= 3) version = 2; // 9.3.0+\n    else if (versionArray[0] === 8) version = 1; // 8.0.0+\n  }\n\n  return version;\n};\n\nmodule.exports.get_napi_version_as_string = function (target) {\n  // returns the napi version as a string or an empty string if napi is not supported.\n  var version = module.exports.get_napi_version(target);\n  return version ? '' + version : '';\n};\n\nmodule.exports.validate_package_json = function (package_json, opts) {\n  // throws Error\n  var binary = package_json.binary;\n  var module_path_ok = pathOK(binary.module_path);\n  var remote_path_ok = pathOK(binary.remote_path);\n  var package_name_ok = pathOK(binary.package_name);\n  var napi_build_versions = module.exports.get_napi_build_versions(package_json, opts, true);\n  var napi_build_versions_raw = module.exports.get_napi_build_versions_raw(package_json);\n\n  if (napi_build_versions) {\n    napi_build_versions.forEach(function (napi_build_version) {\n      if (!(parseInt(napi_build_version, 10) === napi_build_version && napi_build_version > 0)) {\n        throw new Error(\"All values specified in napi_versions must be positive integers.\");\n      }\n    });\n  }\n\n  if (napi_build_versions && (!module_path_ok || !remote_path_ok && !package_name_ok)) {\n    throw new Error(\"When napi_versions is specified; module_path and either remote_path or \" + \"package_name must contain the substitution string '{napi_build_version}`.\");\n  }\n\n  if ((module_path_ok || remote_path_ok || package_name_ok) && !napi_build_versions_raw) {\n    throw new Error(\"When the substitution string '{napi_build_version}` is specified in \" + \"module_path, remote_path, or package_name; napi_versions must also be specified.\");\n  }\n\n  if (napi_build_versions && !module.exports.get_best_napi_build_version(package_json, opts) && module.exports.build_napi_only(package_json)) {\n    throw new Error('The N-API version of this Node instance is ' + module.exports.get_napi_version(opts ? opts.target : undefined) + '. ' + 'This module supports N-API version(s) ' + module.exports.get_napi_build_versions_raw(package_json) + '. ' + 'This Node instance cannot run this module.');\n  }\n\n  if (napi_build_versions_raw && !napi_build_versions && module.exports.build_napi_only(package_json)) {\n    throw new Error('The N-API version of this Node instance is ' + module.exports.get_napi_version(opts ? opts.target : undefined) + '. ' + 'This module supports N-API version(s) ' + module.exports.get_napi_build_versions_raw(package_json) + '. ' + 'This Node instance cannot run this module.');\n  }\n};\n\nfunction pathOK(path) {\n  return path && (path.indexOf('{napi_build_version}') !== -1 || path.indexOf('{node_napi_label}') !== -1);\n}\n\nmodule.exports.expand_commands = function (package_json, opts, commands) {\n  var expanded_commands = [];\n  var napi_build_versions = module.exports.get_napi_build_versions(package_json, opts);\n  commands.forEach(function (command) {\n    if (napi_build_versions && command.name === 'install') {\n      var napi_build_version = module.exports.get_best_napi_build_version(package_json, opts);\n      var args = napi_build_version ? [napi_build_version_tag + napi_build_version] : [];\n      expanded_commands.push({\n        name: command.name,\n        args: args\n      });\n    } else if (napi_build_versions && napi_multiple_commands.indexOf(command.name) !== -1) {\n      napi_build_versions.forEach(function (napi_build_version) {\n        var args = command.args.slice();\n        args.push(napi_build_version_tag + napi_build_version);\n        expanded_commands.push({\n          name: command.name,\n          args: args\n        });\n      });\n    } else {\n      expanded_commands.push(command);\n    }\n  });\n  return expanded_commands;\n};\n\nmodule.exports.get_napi_build_versions = function (package_json, opts, warnings) {\n  // opts may be undefined\n  var log = require('npmlog');\n\n  var napi_build_versions = [];\n  var supported_napi_version = module.exports.get_napi_version(opts ? opts.target : undefined); // remove duplicates, verify each napi version can actaully be built\n\n  if (package_json.binary && package_json.binary.napi_versions) {\n    package_json.binary.napi_versions.forEach(function (napi_version) {\n      var duplicated = napi_build_versions.indexOf(napi_version) !== -1;\n\n      if (!duplicated && supported_napi_version && napi_version <= supported_napi_version) {\n        napi_build_versions.push(napi_version);\n      } else if (warnings && !duplicated && supported_napi_version) {\n        log.info('This Node instance does not support builds for N-API version', napi_version);\n      }\n    });\n  }\n\n  if (opts && opts[\"build-latest-napi-version-only\"]) {\n    var latest_version = 0;\n    napi_build_versions.forEach(function (napi_version) {\n      if (napi_version > latest_version) latest_version = napi_version;\n    });\n    napi_build_versions = latest_version ? [latest_version] : [];\n  }\n\n  return napi_build_versions.length ? napi_build_versions : undefined;\n};\n\nmodule.exports.get_napi_build_versions_raw = function (package_json) {\n  var napi_build_versions = []; // remove duplicates\n\n  if (package_json.binary && package_json.binary.napi_versions) {\n    package_json.binary.napi_versions.forEach(function (napi_version) {\n      if (napi_build_versions.indexOf(napi_version) === -1) {\n        napi_build_versions.push(napi_version);\n      }\n    });\n  }\n\n  return napi_build_versions.length ? napi_build_versions : undefined;\n};\n\nmodule.exports.get_command_arg = function (napi_build_version) {\n  return napi_build_version_tag + napi_build_version;\n};\n\nmodule.exports.get_napi_build_version_from_command_args = function (command_args) {\n  for (var i = 0; i < command_args.length; i++) {\n    var arg = command_args[i];\n\n    if (arg.indexOf(napi_build_version_tag) === 0) {\n      return parseInt(arg.substr(napi_build_version_tag.length), 10);\n    }\n  }\n\n  return undefined;\n};\n\nmodule.exports.swap_build_dir_out = function (napi_build_version) {\n  if (napi_build_version) {\n    var rm = require('rimraf');\n\n    rm.sync(module.exports.get_build_dir(napi_build_version));\n    fs.renameSync('build', module.exports.get_build_dir(napi_build_version));\n  }\n};\n\nmodule.exports.swap_build_dir_in = function (napi_build_version) {\n  if (napi_build_version) {\n    var rm = require('rimraf');\n\n    rm.sync('build');\n    fs.renameSync(module.exports.get_build_dir(napi_build_version), 'build');\n  }\n};\n\nmodule.exports.get_build_dir = function (napi_build_version) {\n  return 'build-tmp-napi-v' + napi_build_version;\n};\n\nmodule.exports.get_best_napi_build_version = function (package_json, opts) {\n  var best_napi_build_version = 0;\n  var napi_build_versions = module.exports.get_napi_build_versions(package_json, opts);\n\n  if (napi_build_versions) {\n    var our_napi_version = module.exports.get_napi_version(opts ? opts.target : undefined);\n    napi_build_versions.forEach(function (napi_build_version) {\n      if (napi_build_version > best_napi_build_version && napi_build_version <= our_napi_version) {\n        best_napi_build_version = napi_build_version;\n      }\n    });\n  }\n\n  return best_napi_build_version === 0 ? undefined : best_napi_build_version;\n};\n\nmodule.exports.build_napi_only = function (package_json) {\n  return package_json.binary && package_json.binary.package_name && package_json.binary.package_name.indexOf('{node_napi_label}') === -1;\n};","map":null,"metadata":{},"sourceType":"script"}