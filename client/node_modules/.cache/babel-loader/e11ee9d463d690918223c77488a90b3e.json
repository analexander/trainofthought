{"ast":null,"code":"import _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport var RotateProgram = function RotateProgram(imageShape, radians, fillValue, center) {\n  _classCallCheck(this, RotateProgram);\n\n  this.variableNames = ['Image'];\n  this.outputShape = [];\n  var imageHeight = imageShape[1];\n  var imageWidth = imageShape[2];\n  var sinFactor = Math.sin(radians).toFixed(3);\n  var cosFactor = Math.cos(radians).toFixed(3);\n  this.outputShape = imageShape;\n\n  var _backend_util$getImag = backend_util.getImageCenter(center, imageHeight, imageWidth),\n      _backend_util$getImag2 = _slicedToArray(_backend_util$getImag, 2),\n      centerX = _backend_util$getImag2[0],\n      centerY = _backend_util$getImag2[1];\n\n  var centerXString = centerX.toFixed(3);\n  var centerYString = centerY.toFixed(3);\n  var fillSnippet = '';\n\n  if (typeof fillValue === 'number') {\n    fillSnippet = \"float outputValue = \".concat(fillValue.toFixed(2), \";\");\n  } else {\n    fillSnippet = \"\\n        vec3 fill = vec3(\".concat(fillValue.join(','), \");\\n        float outputValue = fill[coords[3]];\");\n  }\n\n  this.userCode = \"\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int x = coords[2];\\n          int y = coords[1];\\n          float coordXFloat = (float(x) - \".concat(centerXString, \") * \").concat(cosFactor, \" - (float(y) - \").concat(centerYString, \") * \").concat(sinFactor, \";\\n          float coordYFloat = (float(x) - \").concat(centerXString, \") * \").concat(sinFactor, \" + (float(y) - \").concat(centerYString, \") * \").concat(cosFactor, \";\\n          int coordX = int(round(coordXFloat + \").concat(centerXString, \"));\\n          int coordY = int(round(coordYFloat + \").concat(centerYString, \"));\\n          \").concat(fillSnippet, \"\\n          if(coordX >= 0 && coordX < \").concat(imageWidth, \" && coordY >= 0 && coordY < \").concat(imageHeight, \") {\\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\\n          }\\n          setOutput(outputValue);\\n        }\\n    \");\n};","map":null,"metadata":{},"sourceType":"module"}