{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { conv2d } from './conv2d';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes a 1D convolution over the input x.\n *\n * @param x The input tensor, of rank 3 or rank 2, of shape\n *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.\n * @param filter The filter, rank 3, of shape\n *     `[filterWidth, inDepth, outDepth]`.\n * @param stride The number of entries by which the filter is moved right at\n *     each step.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat An optional string from \"NWC\", \"NCW\". Defaults to \"NWC\",\n *     the data is stored in the order of [batch, in_width, in_channels]. Only\n *     \"NWC\" is currently supported.\n * @param dilation The dilation rate in which we sample input values in\n *     atrous convolution. Defaults to `1`. If it is greater than 1, then\n *     stride must be `1`.\n * @param dimRoundingMode The rounding mode used when computing output\n *     dimensions if pad is a number. If none is provided, it will not round\n *     and error if the output is of fractional size.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\n\nfunction conv1d_(x, filter, stride, pad) {\n  var dataFormat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'NWC';\n  var dilation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  var $x = convertToTensor(x, 'x', 'conv1d');\n  var $filter = convertToTensor(filter, 'filter', 'conv1d');\n  var x3D = $x;\n  var reshapedTo3D = false;\n\n  if ($x.rank === 2) {\n    reshapedTo3D = true;\n    x3D = reshape($x, [1, $x.shape[0], $x.shape[1]]);\n  }\n\n  util.assert(x3D.rank === 3, function () {\n    return \"Error in conv1d: input must be rank 3, but got rank \".concat(x3D.rank, \".\");\n  });\n  util.assert($filter.rank === 3, function () {\n    return \"Error in conv1d: filter must be rank 3, but got rank \" + \"\".concat($filter.rank, \".\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in conv1d: pad must be an integer when using, \" + \"dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\");\n    });\n  }\n\n  util.assert(x3D.shape[2] === $filter.shape[1], function () {\n    return \"Error in conv1d: depth of input (\".concat(x3D.shape[2], \") must match \") + \"input depth for filter \".concat($filter.shape[1], \".\");\n  });\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(stride, dilation), function () {\n    return 'Error in conv1D: Either stride or dilation must be 1. ' + \"Got stride \".concat(stride, \" and dilation '\").concat(dilation, \"'\");\n  });\n  util.assert(dataFormat === 'NWC', function () {\n    return \"Error in conv1d: got dataFormat of \".concat(dataFormat, \" but only NWC is currently supported.\");\n  });\n  var filter4D = reshape($filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);\n  var input4D = reshape(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);\n  var strides = [1, stride];\n  var dilations = [1, dilation];\n  var conv2dDataFormat = 'NHWC';\n  var res = conv2d(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);\n\n  if (reshapedTo3D) {\n    return reshape(res, [res.shape[2], res.shape[3]]);\n  }\n\n  return reshape(res, [res.shape[0], res.shape[2], res.shape[3]]);\n}\n\nexport var conv1d = op({\n  conv1d_: conv1d_\n});","map":null,"metadata":{},"sourceType":"module"}