{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { denseBlock4 } from './denseBlock';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\n\nvar FaceFeatureExtractor =\n/** @class */\nfunction (_super) {\n  __extends(FaceFeatureExtractor, _super);\n\n  function FaceFeatureExtractor() {\n    return _super.call(this, 'FaceFeatureExtractor') || this;\n  }\n\n  FaceFeatureExtractor.prototype.forwardInput = function (input) {\n    var params = this.params;\n\n    if (!params) {\n      throw new Error('FaceFeatureExtractor - load model before inference');\n    }\n\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(255));\n      var out = denseBlock4(normalized, params.dense0, true);\n      out = denseBlock4(out, params.dense1);\n      out = denseBlock4(out, params.dense2);\n      out = denseBlock4(out, params.dense3);\n      out = tf.avgPool(out, [7, 7], [2, 2], 'valid');\n      return out;\n    });\n  };\n\n  FaceFeatureExtractor.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n\n  FaceFeatureExtractor.prototype.getDefaultModelName = function () {\n    return 'face_feature_extractor_model';\n  };\n\n  FaceFeatureExtractor.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap);\n  };\n\n  FaceFeatureExtractor.prototype.extractParams = function (weights) {\n    return extractParams(weights);\n  };\n\n  return FaceFeatureExtractor;\n}(NeuralNetwork);\n\nexport { FaceFeatureExtractor };","map":null,"metadata":{},"sourceType":"module"}