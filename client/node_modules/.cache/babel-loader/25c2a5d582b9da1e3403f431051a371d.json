{"ast":null,"code":"import _defineProperty from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Basic Layers.\n */\nimport { any, notEqual, serialization, tidy, transpose, util } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { assertPositiveInteger, mapActivationToFusedKernel } from '../utils/generic_utils';\nimport { arrayProd, range } from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nexport var Dropout = /*#__PURE__*/function (_Layer) {\n  _inherits(Dropout, _Layer);\n\n  function Dropout(args) {\n    var _this;\n\n    _classCallCheck(this, Dropout);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dropout).call(this, args));\n    _this.rate = Math.max(Math.min(args.rate, 1), 0); // So that the scalar doesn't get tidied up between executions.\n\n    _this.noiseShape = args.noiseShape;\n    _this.seed = args.seed;\n    _this.supportsMasking = true;\n    return _this;\n  }\n\n  _createClass(Dropout, [{\n    key: \"getNoiseShape\",\n    value: function getNoiseShape(input) {\n      if (this.noiseShape == null) {\n        return this.noiseShape;\n      }\n\n      var inputShape = input.shape;\n      var noiseShape = [];\n\n      for (var i = 0; i < this.noiseShape.length; ++i) {\n        noiseShape.push(this.noiseShape[i] == null ? inputShape[i] : this.noiseShape[i]);\n      }\n\n      return noiseShape;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this2 = this;\n\n      return tidy(function () {\n        _this2.invokeCallHook(inputs, kwargs);\n\n        var input = getExactlyOneTensor(inputs);\n\n        if (0 < _this2.rate && _this2.rate < 1) {\n          var training = kwargs['training'] == null ? false : kwargs['training'];\n\n          var noiseShape = _this2.getNoiseShape(input);\n\n          var output = K.inTrainPhase(function () {\n            return K.dropout(input, _this2.rate, noiseShape, _this2.seed);\n          }, function () {\n            return input;\n          }, training);\n          return output;\n        }\n\n        return inputs;\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        rate: this.rate,\n        noiseShape: this.noiseShape,\n        seed: this.seed\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Dropout.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      return _get(_getPrototypeOf(Dropout.prototype), \"dispose\", this).call(this);\n    }\n  }]);\n\n  return Dropout;\n}(Layer);\n/** @nocollapse */\n\nDropout.className = 'Dropout';\nserialization.registerClass(Dropout);\nexport var SpatialDropout1D = /*#__PURE__*/function (_Dropout) {\n  _inherits(SpatialDropout1D, _Dropout);\n\n  function SpatialDropout1D(args) {\n    var _this3;\n\n    _classCallCheck(this, SpatialDropout1D);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(SpatialDropout1D).call(this, args));\n    _this3.inputSpec = [{\n      ndim: 3\n    }];\n    return _this3;\n  }\n\n  _createClass(SpatialDropout1D, [{\n    key: \"getNoiseShape\",\n    value: function getNoiseShape(input) {\n      var inputShape = input.shape;\n      return [inputShape[0], 1, inputShape[2]];\n    }\n  }]);\n\n  return SpatialDropout1D;\n}(Dropout);\n/** @nocollapse */\n\nSpatialDropout1D.className = 'SpatialDropout1D';\nserialization.registerClass(SpatialDropout1D);\nexport var Dense = /*#__PURE__*/function (_Layer2) {\n  _inherits(Dense, _Layer2);\n\n  function Dense(args) {\n    var _this4;\n\n    _classCallCheck(this, Dense);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(Dense).call(this, args)); // Default activation: Linear (none).\n\n    _this4.activation = null;\n    _this4.useBias = true;\n    _this4.kernel = null;\n    _this4.bias = null;\n    _this4.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    _this4.DEFAULT_BIAS_INITIALIZER = 'zeros';\n\n    if (args.batchInputShape == null && args.inputShape == null && args.inputDim != null) {\n      // This logic is copied from Layer's constructor, since we can't\n      // do exactly what the Python constructor does for Dense().\n      var batchSize = null;\n\n      if (args.batchSize != null) {\n        batchSize = args.batchSize;\n      }\n\n      _this4.batchInputShape = [batchSize, args.inputDim];\n    }\n\n    _this4.units = args.units;\n    assertPositiveInteger(_this4.units, 'units');\n    _this4.activation = getActivation(args.activation);\n\n    if (args.useBias != null) {\n      _this4.useBias = args.useBias;\n    }\n\n    _this4.kernelInitializer = getInitializer(args.kernelInitializer || _this4.DEFAULT_KERNEL_INITIALIZER);\n    _this4.biasInitializer = getInitializer(args.biasInitializer || _this4.DEFAULT_BIAS_INITIALIZER);\n    _this4.kernelConstraint = getConstraint(args.kernelConstraint);\n    _this4.biasConstraint = getConstraint(args.biasConstraint);\n    _this4.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n    _this4.biasRegularizer = getRegularizer(args.biasRegularizer);\n    _this4.activityRegularizer = getRegularizer(args.activityRegularizer);\n    _this4.supportsMasking = true;\n    _this4.inputSpec = [{\n      minNDim: 2\n    }];\n    return _this4;\n  }\n\n  _createClass(Dense, [{\n    key: \"build\",\n    value: function build(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var inputLastDim = inputShape[inputShape.length - 1];\n\n      if (this.kernel == null) {\n        this.kernel = this.addWeight('kernel', [inputLastDim, this.units], null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n        if (this.useBias) {\n          this.bias = this.addWeight('bias', [this.units], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n      }\n\n      this.inputSpec = [{\n        minNDim: 2,\n        axes: _defineProperty({}, -1, inputLastDim)\n      }];\n      this.built = true;\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var outputShape = inputShape.slice();\n      outputShape[outputShape.length - 1] = this.units;\n      return outputShape;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this5 = this;\n\n      return tidy(function () {\n        _this5.invokeCallHook(inputs, kwargs); // Dense layer accepts only a single input.\n\n\n        var input = getExactlyOneTensor(inputs);\n        var fusedActivationName = mapActivationToFusedKernel(_this5.activation.getClassName());\n        var output;\n\n        if (fusedActivationName != null) {\n          output = K.dot(input, _this5.kernel.read(), fusedActivationName, _this5.bias ? _this5.bias.read() : null);\n        } else {\n          output = K.dot(input, _this5.kernel.read());\n\n          if (_this5.bias != null) {\n            output = K.biasAdd(output, _this5.bias.read());\n          }\n\n          if (_this5.activation != null) {\n            output = _this5.activation.apply(output);\n          }\n        }\n\n        return output;\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        units: this.units,\n        activation: serializeActivation(this.activation),\n        useBias: this.useBias,\n        kernelInitializer: serializeInitializer(this.kernelInitializer),\n        biasInitializer: serializeInitializer(this.biasInitializer),\n        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n        biasRegularizer: serializeRegularizer(this.biasRegularizer),\n        activityRegularizer: serializeRegularizer(this.activityRegularizer),\n        kernelConstraint: serializeConstraint(this.kernelConstraint),\n        biasConstraint: serializeConstraint(this.biasConstraint)\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Dense.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Dense;\n}(Layer);\n/** @nocollapse */\n\nDense.className = 'Dense';\nserialization.registerClass(Dense);\nexport var Flatten = /*#__PURE__*/function (_Layer3) {\n  _inherits(Flatten, _Layer3);\n\n  function Flatten(args) {\n    var _this6;\n\n    _classCallCheck(this, Flatten);\n\n    args = args || {};\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Flatten).call(this, args));\n    _this6.inputSpec = [{\n      minNDim: 3\n    }];\n    _this6.dataFormat = args.dataFormat;\n    return _this6;\n  }\n\n  _createClass(Flatten, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n\n      var _iterator = _createForOfIteratorHelper(inputShape.slice(1)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dim = _step.value;\n\n          if (dim == null) {\n            throw new ValueError(\"The shape of the input to \\\"Flatten\\\" is not fully defined \" + \"(got \".concat(inputShape.slice(1), \"). Make sure to pass a complete \") + \"\\\"input_shape\\\" or \\\"batch_input_shape\\\" argument to the first \" + \"layer in your model.\");\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return [inputShape[0], arrayProd(inputShape, 1)];\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this7 = this;\n\n      return tidy(function () {\n        _this7.invokeCallHook(inputs, kwargs);\n\n        var input = getExactlyOneTensor(inputs);\n\n        if (_this7.dataFormat === 'channelsFirst' && input.rank > 1) {\n          var permutation = [0];\n\n          for (var i = 2; i < input.rank; ++i) {\n            permutation.push(i);\n          }\n\n          permutation.push(1);\n          input = input.transpose(permutation);\n        }\n\n        return K.batchFlatten(input);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {};\n\n      if (this.dataFormat != null) {\n        config['dataFormat'] = this.dataFormat;\n      }\n\n      var baseConfig = _get(_getPrototypeOf(Flatten.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Flatten;\n}(Layer);\n/** @nocollapse */\n\nFlatten.className = 'Flatten';\nserialization.registerClass(Flatten);\nexport var Activation = /*#__PURE__*/function (_Layer4) {\n  _inherits(Activation, _Layer4);\n\n  function Activation(args) {\n    var _this8;\n\n    _classCallCheck(this, Activation);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(Activation).call(this, args));\n    _this8.supportsMasking = true;\n    _this8.activation = getActivation(args.activation);\n    return _this8;\n  }\n\n  _createClass(Activation, [{\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this9 = this;\n\n      return tidy(function () {\n        _this9.invokeCallHook(inputs, kwargs);\n\n        var input = getExactlyOneTensor(inputs);\n        return _this9.activation.apply(input);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        activation: serializeActivation(this.activation)\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Activation.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Activation;\n}(Layer);\n/** @nocollapse */\n\nActivation.className = 'Activation';\nserialization.registerClass(Activation);\nexport var RepeatVector = /*#__PURE__*/function (_Layer5) {\n  _inherits(RepeatVector, _Layer5);\n\n  function RepeatVector(args) {\n    var _this10;\n\n    _classCallCheck(this, RepeatVector);\n\n    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(RepeatVector).call(this, args));\n    _this10.n = args.n;\n    _this10.inputSpec = [{\n      ndim: 2\n    }];\n    return _this10;\n  }\n\n  _createClass(RepeatVector, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return [inputShape[0], this.n, inputShape[1]];\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this11 = this;\n\n      return tidy(function () {\n        inputs = getExactlyOneTensor(inputs);\n        return K.repeat(inputs, _this11.n);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        n: this.n\n      };\n\n      var baseConfig = _get(_getPrototypeOf(RepeatVector.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return RepeatVector;\n}(Layer);\n/** @nocollapse */\n\nRepeatVector.className = 'RepeatVector';\nserialization.registerClass(RepeatVector);\nexport var Reshape = /*#__PURE__*/function (_Layer6) {\n  _inherits(Reshape, _Layer6);\n\n  function Reshape(args) {\n    var _this12;\n\n    _classCallCheck(this, Reshape);\n\n    _this12 = _possibleConstructorReturn(this, _getPrototypeOf(Reshape).call(this, args));\n    _this12.targetShape = args.targetShape; // Make sure that all unknown dimensions are represented as `null`.\n\n    for (var i = 0; i < _this12.targetShape.length; ++i) {\n      if (_this12.isUnknown(_this12.targetShape[i])) {\n        _this12.targetShape[i] = null;\n      }\n    }\n\n    return _this12;\n  }\n\n  _createClass(Reshape, [{\n    key: \"isUnknown\",\n    value: function isUnknown(dim) {\n      return dim < 0 || dim == null;\n    }\n    /**\n     * Finds and replaces a missing dimension in output shape.\n     *\n     * This is a near direct port of the internal Numpy function\n     * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.\n     *\n     * @param inputShape: Original shape of array begin reshape.\n     * @param outputShape: Target shape of the array, with at most a single\n     * `null` or negative number, which indicates an underdetermined dimension\n     * that should be derived from `inputShape` and the known dimensions of\n     *   `outputShape`.\n     * @returns: The output shape with `null` replaced with its computed value.\n     * @throws: ValueError: If `inputShape` and `outputShape` do not match.\n     */\n\n  }, {\n    key: \"fixUnknownDimension\",\n    value: function fixUnknownDimension(inputShape, outputShape) {\n      var errorMsg = 'Total size of new array must be unchanged.';\n      var finalShape = outputShape.slice();\n      var known = 1;\n      var unknown = null;\n\n      for (var i = 0; i < finalShape.length; ++i) {\n        var dim = finalShape[i];\n\n        if (this.isUnknown(dim)) {\n          if (unknown === null) {\n            unknown = i;\n          } else {\n            throw new ValueError('Can only specifiy one unknown dimension.');\n          }\n        } else {\n          known *= dim;\n        }\n      }\n\n      var originalSize = arrayProd(inputShape);\n\n      if (unknown !== null) {\n        if (known === 0 || originalSize % known !== 0) {\n          throw new ValueError(errorMsg);\n        }\n\n        finalShape[unknown] = originalSize / known;\n      } else if (originalSize !== known) {\n        throw new ValueError(errorMsg);\n      }\n\n      return finalShape;\n    }\n  }, {\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      var anyUnknownDims = false;\n\n      for (var i = 0; i < inputShape.length; ++i) {\n        if (this.isUnknown(inputShape[i])) {\n          anyUnknownDims = true;\n          break;\n        }\n      }\n\n      if (anyUnknownDims) {\n        return inputShape.slice(0, 1).concat(this.targetShape);\n      } else {\n        return inputShape.slice(0, 1).concat(this.fixUnknownDimension(inputShape.slice(1), this.targetShape));\n      }\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this13 = this;\n\n      return tidy(function () {\n        _this13.invokeCallHook(inputs, kwargs);\n\n        var input = getExactlyOneTensor(inputs);\n        var inputShape = input.shape;\n        var outputShape = inputShape.slice(0, 1).concat(_this13.fixUnknownDimension(inputShape.slice(1), _this13.targetShape));\n        return input.reshape(outputShape);\n      });\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        targetShape: this.targetShape\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Reshape.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Reshape;\n}(Layer);\n/** @nocollapse */\n\nReshape.className = 'Reshape';\nserialization.registerClass(Reshape);\nexport var Permute = /*#__PURE__*/function (_Layer7) {\n  _inherits(Permute, _Layer7);\n\n  function Permute(args) {\n    var _this14;\n\n    _classCallCheck(this, Permute);\n\n    _this14 = _possibleConstructorReturn(this, _getPrototypeOf(Permute).call(this, args));\n\n    if (args.dims == null) {\n      throw new Error('Required configuration field `dims` is missing during Permute ' + 'constructor call.');\n    }\n\n    if (!Array.isArray(args.dims)) {\n      throw new Error('Permute constructor requires `dims` to be an Array, but received ' + \"\".concat(args.dims, \" instead.\"));\n    } // Check the validity of the permutation indices.\n\n\n    var expectedSortedIndices = range(1, args.dims.length + 1);\n\n    if (!util.arraysEqual(args.dims.slice().sort(), expectedSortedIndices)) {\n      throw new Error('Invalid permutation `dims`: ' + JSON.stringify(args.dims) + ' `dims` must contain consecutive integers starting from 1.');\n    }\n\n    _this14.dims = args.dims;\n    _this14.dimsIncludingBatch = [0].concat(_this14.dims);\n    _this14.inputSpec = [new InputSpec({\n      ndim: _this14.dims.length + 1\n    })];\n    return _this14;\n  }\n\n  _createClass(Permute, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      inputShape = getExactlyOneShape(inputShape);\n      var outputShape = inputShape.slice();\n      this.dims.forEach(function (dim, i) {\n        outputShape[i + 1] = inputShape[dim];\n      });\n      return outputShape;\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      return transpose(getExactlyOneTensor(inputs), this.dimsIncludingBatch);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var config = {\n        dims: this.dims\n      };\n\n      var baseConfig = _get(_getPrototypeOf(Permute.prototype), \"getConfig\", this).call(this);\n\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }]);\n\n  return Permute;\n}(Layer);\n/** @nocollapse */\n\nPermute.className = 'Permute';\nserialization.registerClass(Permute);\nexport var Masking = /*#__PURE__*/function (_Layer8) {\n  _inherits(Masking, _Layer8);\n\n  function Masking(args) {\n    var _this15;\n\n    _classCallCheck(this, Masking);\n\n    _this15 = _possibleConstructorReturn(this, _getPrototypeOf(Masking).call(this, args == null ? {} : args));\n    _this15.supportsMasking = true;\n\n    if (args != null) {\n      _this15.maskValue = args.maskValue == null ? 0 : args.maskValue;\n    } else {\n      _this15.maskValue = 0;\n    }\n\n    return _this15;\n  }\n\n  _createClass(Masking, [{\n    key: \"computeOutputShape\",\n    value: function computeOutputShape(inputShape) {\n      return inputShape;\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var baseConfig = _get(_getPrototypeOf(Masking.prototype), \"getConfig\", this).call(this);\n\n      var config = {\n        maskValue: this.maskValue\n      };\n      Object.assign(config, baseConfig);\n      return config;\n    }\n  }, {\n    key: \"computeMask\",\n    value: function computeMask(inputs, mask) {\n      var input = getExactlyOneTensor(inputs);\n      var axis = -1;\n      return any(notEqual(input, this.maskValue), axis);\n    }\n  }, {\n    key: \"call\",\n    value: function call(inputs, kwargs) {\n      var _this16 = this;\n\n      return tidy(function () {\n        _this16.invokeCallHook(inputs, kwargs);\n\n        var input = getExactlyOneTensor(inputs);\n        var axis = -1;\n        var keepDims = true;\n        var booleanMask = any(notEqual(input, _this16.maskValue), axis, keepDims);\n        var output = input.mul(booleanMask.asType(input.dtype));\n        return output;\n      });\n    }\n  }]);\n\n  return Masking;\n}(Layer);\n/** @nocollapse */\n\nMasking.className = 'Masking';\nserialization.registerClass(Masking);","map":null,"metadata":{},"sourceType":"module"}