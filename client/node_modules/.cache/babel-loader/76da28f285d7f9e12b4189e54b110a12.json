{"ast":null,"code":"import { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\nimport { isTensor3D } from '../utils';\n\nfunction extractorsFactory(weightMap, paramMappings) {\n  var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\n\n  function extractPointwiseConvParams(prefix, idx, mappedPrefix) {\n    var filters = extractWeightEntry(prefix + \"/Conv2d_\" + idx + \"_pointwise/weights\", 4, mappedPrefix + \"/filters\");\n    var batch_norm_offset = extractWeightEntry(prefix + \"/Conv2d_\" + idx + \"_pointwise/convolution_bn_offset\", 1, mappedPrefix + \"/batch_norm_offset\");\n    return {\n      filters: filters,\n      batch_norm_offset: batch_norm_offset\n    };\n  }\n\n  function extractConvPairParams(idx) {\n    var mappedPrefix = \"mobilenetv1/conv_\" + idx;\n    var prefixDepthwiseConv = \"MobilenetV1/Conv2d_\" + idx + \"_depthwise\";\n    var mappedPrefixDepthwiseConv = mappedPrefix + \"/depthwise_conv\";\n    var mappedPrefixPointwiseConv = mappedPrefix + \"/pointwise_conv\";\n    var filters = extractWeightEntry(prefixDepthwiseConv + \"/depthwise_weights\", 4, mappedPrefixDepthwiseConv + \"/filters\");\n    var batch_norm_scale = extractWeightEntry(prefixDepthwiseConv + \"/BatchNorm/gamma\", 1, mappedPrefixDepthwiseConv + \"/batch_norm_scale\");\n    var batch_norm_offset = extractWeightEntry(prefixDepthwiseConv + \"/BatchNorm/beta\", 1, mappedPrefixDepthwiseConv + \"/batch_norm_offset\");\n    var batch_norm_mean = extractWeightEntry(prefixDepthwiseConv + \"/BatchNorm/moving_mean\", 1, mappedPrefixDepthwiseConv + \"/batch_norm_mean\");\n    var batch_norm_variance = extractWeightEntry(prefixDepthwiseConv + \"/BatchNorm/moving_variance\", 1, mappedPrefixDepthwiseConv + \"/batch_norm_variance\");\n    return {\n      depthwise_conv: {\n        filters: filters,\n        batch_norm_scale: batch_norm_scale,\n        batch_norm_offset: batch_norm_offset,\n        batch_norm_mean: batch_norm_mean,\n        batch_norm_variance: batch_norm_variance\n      },\n      pointwise_conv: extractPointwiseConvParams('MobilenetV1', idx, mappedPrefixPointwiseConv)\n    };\n  }\n\n  function extractMobilenetV1Params() {\n    return {\n      conv_0: extractPointwiseConvParams('MobilenetV1', 0, 'mobilenetv1/conv_0'),\n      conv_1: extractConvPairParams(1),\n      conv_2: extractConvPairParams(2),\n      conv_3: extractConvPairParams(3),\n      conv_4: extractConvPairParams(4),\n      conv_5: extractConvPairParams(5),\n      conv_6: extractConvPairParams(6),\n      conv_7: extractConvPairParams(7),\n      conv_8: extractConvPairParams(8),\n      conv_9: extractConvPairParams(9),\n      conv_10: extractConvPairParams(10),\n      conv_11: extractConvPairParams(11),\n      conv_12: extractConvPairParams(12),\n      conv_13: extractConvPairParams(13)\n    };\n  }\n\n  function extractConvParams(prefix, mappedPrefix) {\n    var filters = extractWeightEntry(prefix + \"/weights\", 4, mappedPrefix + \"/filters\");\n    var bias = extractWeightEntry(prefix + \"/biases\", 1, mappedPrefix + \"/bias\");\n    return {\n      filters: filters,\n      bias: bias\n    };\n  }\n\n  function extractBoxPredictorParams(idx) {\n    var box_encoding_predictor = extractConvParams(\"Prediction/BoxPredictor_\" + idx + \"/BoxEncodingPredictor\", \"prediction_layer/box_predictor_\" + idx + \"/box_encoding_predictor\");\n    var class_predictor = extractConvParams(\"Prediction/BoxPredictor_\" + idx + \"/ClassPredictor\", \"prediction_layer/box_predictor_\" + idx + \"/class_predictor\");\n    return {\n      box_encoding_predictor: box_encoding_predictor,\n      class_predictor: class_predictor\n    };\n  }\n\n  function extractPredictionLayerParams() {\n    return {\n      conv_0: extractPointwiseConvParams('Prediction', 0, 'prediction_layer/conv_0'),\n      conv_1: extractPointwiseConvParams('Prediction', 1, 'prediction_layer/conv_1'),\n      conv_2: extractPointwiseConvParams('Prediction', 2, 'prediction_layer/conv_2'),\n      conv_3: extractPointwiseConvParams('Prediction', 3, 'prediction_layer/conv_3'),\n      conv_4: extractPointwiseConvParams('Prediction', 4, 'prediction_layer/conv_4'),\n      conv_5: extractPointwiseConvParams('Prediction', 5, 'prediction_layer/conv_5'),\n      conv_6: extractPointwiseConvParams('Prediction', 6, 'prediction_layer/conv_6'),\n      conv_7: extractPointwiseConvParams('Prediction', 7, 'prediction_layer/conv_7'),\n      box_predictor_0: extractBoxPredictorParams(0),\n      box_predictor_1: extractBoxPredictorParams(1),\n      box_predictor_2: extractBoxPredictorParams(2),\n      box_predictor_3: extractBoxPredictorParams(3),\n      box_predictor_4: extractBoxPredictorParams(4),\n      box_predictor_5: extractBoxPredictorParams(5)\n    };\n  }\n\n  return {\n    extractMobilenetV1Params: extractMobilenetV1Params,\n    extractPredictionLayerParams: extractPredictionLayerParams\n  };\n}\n\nexport function extractParamsFromWeigthMap(weightMap) {\n  var paramMappings = [];\n\n  var _a = extractorsFactory(weightMap, paramMappings),\n      extractMobilenetV1Params = _a.extractMobilenetV1Params,\n      extractPredictionLayerParams = _a.extractPredictionLayerParams;\n\n  var extra_dim = weightMap['Output/extra_dim'];\n  paramMappings.push({\n    originalPath: 'Output/extra_dim',\n    paramPath: 'output_layer/extra_dim'\n  });\n\n  if (!isTensor3D(extra_dim)) {\n    throw new Error(\"expected weightMap['Output/extra_dim'] to be a Tensor3D, instead have \" + extra_dim);\n  }\n\n  var params = {\n    mobilenetv1: extractMobilenetV1Params(),\n    prediction_layer: extractPredictionLayerParams(),\n    output_layer: {\n      extra_dim: extra_dim\n    }\n  };\n  disposeUnusedWeightTensors(weightMap, paramMappings);\n  return {\n    params: params,\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"sources":["../../../src/ssdMobilenetv1/extractParamsFromWeigthMap.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { disposeUnusedWeightTensors, extractWeightEntryFactory } from '../common';\r\nimport { isTensor3D } from '../utils';\r\nfunction extractorsFactory(weightMap, paramMappings) {\r\n    var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);\r\n    function extractPointwiseConvParams(prefix, idx, mappedPrefix) {\r\n        var filters = extractWeightEntry(prefix + \"/Conv2d_\" + idx + \"_pointwise/weights\", 4, mappedPrefix + \"/filters\");\r\n        var batch_norm_offset = extractWeightEntry(prefix + \"/Conv2d_\" + idx + \"_pointwise/convolution_bn_offset\", 1, mappedPrefix + \"/batch_norm_offset\");\r\n        return { filters: filters, batch_norm_offset: batch_norm_offset };\r\n    }\r\n    function extractConvPairParams(idx) {\r\n        var mappedPrefix = \"mobilenetv1/conv_\" + idx;\r\n        var prefixDepthwiseConv = \"MobilenetV1/Conv2d_\" + idx + \"_depthwise\";\r\n        var mappedPrefixDepthwiseConv = mappedPrefix + \"/depthwise_conv\";\r\n        var mappedPrefixPointwiseConv = mappedPrefix + \"/pointwise_conv\";\r\n        var filters = extractWeightEntry(prefixDepthwiseConv + \"/depthwise_weights\", 4, mappedPrefixDepthwiseConv + \"/filters\");\r\n        var batch_norm_scale = extractWeightEntry(prefixDepthwiseConv + \"/BatchNorm/gamma\", 1, mappedPrefixDepthwiseConv + \"/batch_norm_scale\");\r\n        var batch_norm_offset = extractWeightEntry(prefixDepthwiseConv + \"/BatchNorm/beta\", 1, mappedPrefixDepthwiseConv + \"/batch_norm_offset\");\r\n        var batch_norm_mean = extractWeightEntry(prefixDepthwiseConv + \"/BatchNorm/moving_mean\", 1, mappedPrefixDepthwiseConv + \"/batch_norm_mean\");\r\n        var batch_norm_variance = extractWeightEntry(prefixDepthwiseConv + \"/BatchNorm/moving_variance\", 1, mappedPrefixDepthwiseConv + \"/batch_norm_variance\");\r\n        return {\r\n            depthwise_conv: {\r\n                filters: filters,\r\n                batch_norm_scale: batch_norm_scale,\r\n                batch_norm_offset: batch_norm_offset,\r\n                batch_norm_mean: batch_norm_mean,\r\n                batch_norm_variance: batch_norm_variance\r\n            },\r\n            pointwise_conv: extractPointwiseConvParams('MobilenetV1', idx, mappedPrefixPointwiseConv)\r\n        };\r\n    }\r\n    function extractMobilenetV1Params() {\r\n        return {\r\n            conv_0: extractPointwiseConvParams('MobilenetV1', 0, 'mobilenetv1/conv_0'),\r\n            conv_1: extractConvPairParams(1),\r\n            conv_2: extractConvPairParams(2),\r\n            conv_3: extractConvPairParams(3),\r\n            conv_4: extractConvPairParams(4),\r\n            conv_5: extractConvPairParams(5),\r\n            conv_6: extractConvPairParams(6),\r\n            conv_7: extractConvPairParams(7),\r\n            conv_8: extractConvPairParams(8),\r\n            conv_9: extractConvPairParams(9),\r\n            conv_10: extractConvPairParams(10),\r\n            conv_11: extractConvPairParams(11),\r\n            conv_12: extractConvPairParams(12),\r\n            conv_13: extractConvPairParams(13)\r\n        };\r\n    }\r\n    function extractConvParams(prefix, mappedPrefix) {\r\n        var filters = extractWeightEntry(prefix + \"/weights\", 4, mappedPrefix + \"/filters\");\r\n        var bias = extractWeightEntry(prefix + \"/biases\", 1, mappedPrefix + \"/bias\");\r\n        return { filters: filters, bias: bias };\r\n    }\r\n    function extractBoxPredictorParams(idx) {\r\n        var box_encoding_predictor = extractConvParams(\"Prediction/BoxPredictor_\" + idx + \"/BoxEncodingPredictor\", \"prediction_layer/box_predictor_\" + idx + \"/box_encoding_predictor\");\r\n        var class_predictor = extractConvParams(\"Prediction/BoxPredictor_\" + idx + \"/ClassPredictor\", \"prediction_layer/box_predictor_\" + idx + \"/class_predictor\");\r\n        return { box_encoding_predictor: box_encoding_predictor, class_predictor: class_predictor };\r\n    }\r\n    function extractPredictionLayerParams() {\r\n        return {\r\n            conv_0: extractPointwiseConvParams('Prediction', 0, 'prediction_layer/conv_0'),\r\n            conv_1: extractPointwiseConvParams('Prediction', 1, 'prediction_layer/conv_1'),\r\n            conv_2: extractPointwiseConvParams('Prediction', 2, 'prediction_layer/conv_2'),\r\n            conv_3: extractPointwiseConvParams('Prediction', 3, 'prediction_layer/conv_3'),\r\n            conv_4: extractPointwiseConvParams('Prediction', 4, 'prediction_layer/conv_4'),\r\n            conv_5: extractPointwiseConvParams('Prediction', 5, 'prediction_layer/conv_5'),\r\n            conv_6: extractPointwiseConvParams('Prediction', 6, 'prediction_layer/conv_6'),\r\n            conv_7: extractPointwiseConvParams('Prediction', 7, 'prediction_layer/conv_7'),\r\n            box_predictor_0: extractBoxPredictorParams(0),\r\n            box_predictor_1: extractBoxPredictorParams(1),\r\n            box_predictor_2: extractBoxPredictorParams(2),\r\n            box_predictor_3: extractBoxPredictorParams(3),\r\n            box_predictor_4: extractBoxPredictorParams(4),\r\n            box_predictor_5: extractBoxPredictorParams(5)\r\n        };\r\n    }\r\n    return {\r\n        extractMobilenetV1Params: extractMobilenetV1Params,\r\n        extractPredictionLayerParams: extractPredictionLayerParams\r\n    };\r\n}\r\nexport function extractParamsFromWeigthMap(weightMap) {\r\n    var paramMappings = [];\r\n    var _a = extractorsFactory(weightMap, paramMappings), extractMobilenetV1Params = _a.extractMobilenetV1Params, extractPredictionLayerParams = _a.extractPredictionLayerParams;\r\n    var extra_dim = weightMap['Output/extra_dim'];\r\n    paramMappings.push({ originalPath: 'Output/extra_dim', paramPath: 'output_layer/extra_dim' });\r\n    if (!isTensor3D(extra_dim)) {\r\n        throw new Error(\"expected weightMap['Output/extra_dim'] to be a Tensor3D, instead have \" + extra_dim);\r\n    }\r\n    var params = {\r\n        mobilenetv1: extractMobilenetV1Params(),\r\n        prediction_layer: extractPredictionLayerParams(),\r\n        output_layer: {\r\n            extra_dim: extra_dim\r\n        }\r\n    };\r\n    disposeUnusedWeightTensors(weightMap, paramMappings);\r\n    return { params: params, paramMappings: paramMappings };\r\n}\r\n//# sourceMappingURL=extractParamsFromWeigthMap.js.map"]},"metadata":{},"sourceType":"module"}