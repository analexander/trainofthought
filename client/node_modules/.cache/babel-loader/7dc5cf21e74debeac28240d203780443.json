{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { RandGamma } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a gamma distribution.\n *\n * ```js\n * tf.randomGamma([2, 2], 1).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param alpha The shape parameter of the gamma distribution.\n * @param beta The inverse scale parameter of the gamma distribution. Defaults\n *     to 1.\n * @param dtype The data type of the output. Defaults to float32.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\n\nfunction randomGamma_(shape, alpha) {\n  var beta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var dtype = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'float32';\n  var seed = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (beta == null) {\n    beta = 1;\n  }\n\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new Error(\"Unsupported data type \".concat(dtype));\n  }\n\n  var rgamma = new RandGamma(alpha, beta, dtype, seed);\n  var res = buffer(shape, dtype);\n\n  for (var i = 0; i < res.values.length; i++) {\n    res.values[i] = rgamma.nextValue();\n  }\n\n  return res.toTensor();\n}\n\nexport var randomGamma = op({\n  randomGamma_: randomGamma_\n});","map":null,"metadata":{},"sourceType":"module"}