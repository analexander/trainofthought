{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function padV2(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var paddings = attrs.paddings,\n      constantValue = attrs.constantValue;\n  assertNotComplex(x, 'pad');\n  var outShape = paddings.map(function (p, i) {\n    return p[0]\n    /* beforePad */\n    + x.shape[i] + p[1];\n  }\n  /* afterPad */\n  );\n  var start = paddings.map(function (p) {\n    return p[0];\n  });\n  var xVals = backend.data.get(x.dataId).values;\n  var xSize = util.sizeFromShape(x.shape);\n  var xRank = x.shape.length;\n  var xStrides = util.computeStrides(x.shape);\n  var resultSize = util.sizeFromShape(outShape);\n  var resultRank = outShape.length;\n  var resultStrides = util.computeStrides(outShape);\n  var resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (var i = 0; i < xSize; i++) {\n    var coords = util.indexToLoc(i, xRank, xStrides);\n    var outCoords = coords.map(function (c, i) {\n      return c + start[i];\n    });\n    var outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n    resVals[outIndex] = xVals[i];\n  }\n\n  var outId = backend.write(resVals, outShape, x.dtype);\n  return {\n    dataId: outId,\n    shape: outShape,\n    dtype: x.dtype\n  };\n}\nexport var padV2Config = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2\n};","map":null,"metadata":{},"sourceType":"module"}