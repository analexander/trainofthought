{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport var ConcatProgram = // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\nfunction ConcatProgram(shapes) {\n  _classCallCheck(this, ConcatProgram);\n\n  this.outputShape = [];\n  this.outputShape = backend_util.computeOutShape(shapes, 1\n  /* axis */\n  );\n  this.variableNames = shapes.map(function (_, i) {\n    return \"T\".concat(i);\n  });\n  var offsets = new Array(shapes.length - 1);\n  offsets[0] = shapes[0][1];\n\n  for (var i = 1; i < offsets.length; i++) {\n    offsets[i] = offsets[i - 1] + shapes[i][1];\n  }\n\n  var snippets = [\"if (yC < \".concat(offsets[0], \") setOutput(getT0(yR, yC));\")];\n\n  for (var _i = 1; _i < offsets.length; _i++) {\n    var shift = offsets[_i - 1];\n    snippets.push(\"else if (yC < \".concat(offsets[_i], \") \") + \"setOutput(getT\".concat(_i, \"(yR, yC-\").concat(shift, \"));\"));\n  }\n\n  var lastIndex = offsets.length;\n  var lastShift = offsets[offsets.length - 1];\n  snippets.push(\"else setOutput(getT\".concat(lastIndex, \"(yR, yC-\").concat(lastShift, \"));\"));\n  this.userCode = \"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int yR = coords.x;\\n        int yC = coords.y;\\n\\n        \".concat(snippets.join('\\n        '), \"\\n      }\\n    \");\n};","map":null,"metadata":{},"sourceType":"module"}