{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { depthwiseSeparableConv } from '../common/depthwiseSeparableConv';\nexport function denseBlock3(x, denseBlockParams, isFirstLayer) {\n  if (isFirstLayer === void 0) {\n    isFirstLayer = false;\n  }\n\n  return tf.tidy(function () {\n    var out1 = tf.relu(isFirstLayer ? tf.add(tf.conv2d(x, denseBlockParams.conv0.filters, [2, 2], 'same'), denseBlockParams.conv0.bias) : depthwiseSeparableConv(x, denseBlockParams.conv0, [2, 2]));\n    var out2 = depthwiseSeparableConv(out1, denseBlockParams.conv1, [1, 1]);\n    var in3 = tf.relu(tf.add(out1, out2));\n    var out3 = depthwiseSeparableConv(in3, denseBlockParams.conv2, [1, 1]);\n    return tf.relu(tf.add(out1, tf.add(out2, out3)));\n  });\n}\nexport function denseBlock4(x, denseBlockParams, isFirstLayer, isScaleDown) {\n  if (isFirstLayer === void 0) {\n    isFirstLayer = false;\n  }\n\n  if (isScaleDown === void 0) {\n    isScaleDown = true;\n  }\n\n  return tf.tidy(function () {\n    var out1 = tf.relu(isFirstLayer ? tf.add(tf.conv2d(x, denseBlockParams.conv0.filters, isScaleDown ? [2, 2] : [1, 1], 'same'), denseBlockParams.conv0.bias) : depthwiseSeparableConv(x, denseBlockParams.conv0, isScaleDown ? [2, 2] : [1, 1]));\n    var out2 = depthwiseSeparableConv(out1, denseBlockParams.conv1, [1, 1]);\n    var in3 = tf.relu(tf.add(out1, out2));\n    var out3 = depthwiseSeparableConv(in3, denseBlockParams.conv2, [1, 1]);\n    var in4 = tf.relu(tf.add(out1, tf.add(out2, out3)));\n    var out4 = depthwiseSeparableConv(in4, denseBlockParams.conv3, [1, 1]);\n    return tf.relu(tf.add(out1, tf.add(out2, tf.add(out3, out4))));\n  });\n}","map":{"version":3,"sources":["../../../src/faceFeatureExtractor/denseBlock.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { depthwiseSeparableConv } from '../common/depthwiseSeparableConv';\r\nexport function denseBlock3(x, denseBlockParams, isFirstLayer) {\r\n    if (isFirstLayer === void 0) { isFirstLayer = false; }\r\n    return tf.tidy(function () {\r\n        var out1 = tf.relu(isFirstLayer\r\n            ? tf.add(tf.conv2d(x, denseBlockParams.conv0.filters, [2, 2], 'same'), denseBlockParams.conv0.bias)\r\n            : depthwiseSeparableConv(x, denseBlockParams.conv0, [2, 2]));\r\n        var out2 = depthwiseSeparableConv(out1, denseBlockParams.conv1, [1, 1]);\r\n        var in3 = tf.relu(tf.add(out1, out2));\r\n        var out3 = depthwiseSeparableConv(in3, denseBlockParams.conv2, [1, 1]);\r\n        return tf.relu(tf.add(out1, tf.add(out2, out3)));\r\n    });\r\n}\r\nexport function denseBlock4(x, denseBlockParams, isFirstLayer, isScaleDown) {\r\n    if (isFirstLayer === void 0) { isFirstLayer = false; }\r\n    if (isScaleDown === void 0) { isScaleDown = true; }\r\n    return tf.tidy(function () {\r\n        var out1 = tf.relu(isFirstLayer\r\n            ? tf.add(tf.conv2d(x, denseBlockParams.conv0.filters, isScaleDown ? [2, 2] : [1, 1], 'same'), denseBlockParams.conv0.bias)\r\n            : depthwiseSeparableConv(x, denseBlockParams.conv0, isScaleDown ? [2, 2] : [1, 1]));\r\n        var out2 = depthwiseSeparableConv(out1, denseBlockParams.conv1, [1, 1]);\r\n        var in3 = tf.relu(tf.add(out1, out2));\r\n        var out3 = depthwiseSeparableConv(in3, denseBlockParams.conv2, [1, 1]);\r\n        var in4 = tf.relu(tf.add(out1, tf.add(out2, out3)));\r\n        var out4 = depthwiseSeparableConv(in4, denseBlockParams.conv3, [1, 1]);\r\n        return tf.relu(tf.add(out1, tf.add(out2, tf.add(out3, out4))));\r\n    });\r\n}\r\n//# sourceMappingURL=denseBlock.js.map"]},"metadata":{},"sourceType":"module"}