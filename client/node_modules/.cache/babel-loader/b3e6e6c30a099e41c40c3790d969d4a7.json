{"ast":null,"code":"'use strict';\n\nvar _createClass = require(\"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _possibleConstructorReturn = require(\"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _get = require(\"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _classCallCheck = require(\"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar Buffer = require('./buffer.js'); // A readable tar stream creator\n// Technically, this is a transform stream that you write paths into,\n// and tar format comes out of.\n// The `add()` method is like `write()` but returns this,\n// and end() return `this` as well, so you can\n// do `new Pack(opt).add('files').add('dir').end().pipe(output)\n// You could also do something like:\n// streamOfPaths().pipe(new Pack()).pipe(new fs.WriteStream('out.tar'))\n\n\nvar PackJob = function PackJob(path, absolute) {\n  _classCallCheck(this, PackJob);\n\n  this.path = path || './';\n  this.absolute = absolute;\n  this.entry = null;\n  this.stat = null;\n  this.readdir = null;\n  this.pending = false;\n  this.ignore = false;\n  this.piped = false;\n};\n\nvar MiniPass = require('minipass');\n\nvar zlib = require('minizlib');\n\nvar ReadEntry = require('./read-entry.js');\n\nvar WriteEntry = require('./write-entry.js');\n\nvar WriteEntrySync = WriteEntry.Sync;\nvar WriteEntryTar = WriteEntry.Tar;\n\nvar Yallist = require('yallist');\n\nvar EOF = Buffer.alloc(1024);\nvar ONSTAT = Symbol('onStat');\nvar ENDED = Symbol('ended');\nvar QUEUE = Symbol('queue');\nvar CURRENT = Symbol('current');\nvar PROCESS = Symbol('process');\nvar PROCESSING = Symbol('processing');\nvar PROCESSJOB = Symbol('processJob');\nvar JOBS = Symbol('jobs');\nvar JOBDONE = Symbol('jobDone');\nvar ADDFSENTRY = Symbol('addFSEntry');\nvar ADDTARENTRY = Symbol('addTarEntry');\nvar STAT = Symbol('stat');\nvar READDIR = Symbol('readdir');\nvar ONREADDIR = Symbol('onreaddir');\nvar PIPE = Symbol('pipe');\nvar ENTRY = Symbol('entry');\nvar ENTRYOPT = Symbol('entryOpt');\nvar WRITEENTRYCLASS = Symbol('writeEntryClass');\nvar WRITE = Symbol('write');\nvar ONDRAIN = Symbol('ondrain');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar warner = require('./warn-mixin.js');\n\nvar Pack = warner( /*#__PURE__*/function (_MiniPass) {\n  _inherits(Pack, _MiniPass);\n\n  function Pack(opt) {\n    var _thisSuper, _thisSuper2, _this;\n\n    _classCallCheck(this, Pack);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pack).call(this, opt));\n    opt = opt || Object.create(null);\n    _this.opt = opt;\n    _this.cwd = opt.cwd || process.cwd();\n    _this.maxReadSize = opt.maxReadSize;\n    _this.preservePaths = !!opt.preservePaths;\n    _this.strict = !!opt.strict;\n    _this.noPax = !!opt.noPax;\n    _this.prefix = (opt.prefix || '').replace(/(\\\\|\\/)+$/, '');\n    _this.linkCache = opt.linkCache || new Map();\n    _this.statCache = opt.statCache || new Map();\n    _this.readdirCache = opt.readdirCache || new Map();\n    _this[WRITEENTRYCLASS] = WriteEntry;\n    if (typeof opt.onwarn === 'function') _this.on('warn', opt.onwarn);\n    _this.zip = null;\n\n    if (opt.gzip) {\n      if (typeof opt.gzip !== 'object') opt.gzip = {};\n      _this.zip = new zlib.Gzip(opt.gzip);\n\n      _this.zip.on('data', function (chunk) {\n        return _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(Pack.prototype)), \"write\", _thisSuper).call(_thisSuper, chunk);\n      });\n\n      _this.zip.on('end', function (_) {\n        return _get((_thisSuper2 = _assertThisInitialized(_this), _getPrototypeOf(Pack.prototype)), \"end\", _thisSuper2).call(_thisSuper2);\n      });\n\n      _this.zip.on('drain', function (_) {\n        return _this[ONDRAIN]();\n      });\n\n      _this.on('resume', function (_) {\n        return _this.zip.resume();\n      });\n    } else _this.on('drain', _this[ONDRAIN]);\n\n    _this.portable = !!opt.portable;\n    _this.noDirRecurse = !!opt.noDirRecurse;\n    _this.follow = !!opt.follow;\n    _this.noMtime = !!opt.noMtime;\n    _this.mtime = opt.mtime || null;\n    _this.filter = typeof opt.filter === 'function' ? opt.filter : function (_) {\n      return true;\n    };\n    _this[QUEUE] = new Yallist();\n    _this[JOBS] = 0;\n    _this.jobs = +opt.jobs || 4;\n    _this[PROCESSING] = false;\n    _this[ENDED] = false;\n    return _this;\n  }\n\n  _createClass(Pack, [{\n    key: WRITE,\n    value: function value(chunk) {\n      return _get(_getPrototypeOf(Pack.prototype), \"write\", this).call(this, chunk);\n    }\n  }, {\n    key: \"add\",\n    value: function add(path) {\n      this.write(path);\n      return this;\n    }\n  }, {\n    key: \"end\",\n    value: function end(path) {\n      if (path) this.write(path);\n      this[ENDED] = true;\n      this[PROCESS]();\n      return this;\n    }\n  }, {\n    key: \"write\",\n    value: function write(path) {\n      if (this[ENDED]) throw new Error('write after end');\n      if (path instanceof ReadEntry) this[ADDTARENTRY](path);else this[ADDFSENTRY](path);\n      return this.flowing;\n    }\n  }, {\n    key: ADDTARENTRY,\n    value: function value(p) {\n      var _this2 = this;\n\n      var absolute = path.resolve(this.cwd, p.path);\n      if (this.prefix) p.path = this.prefix + '/' + p.path.replace(/^\\.(\\/+|$)/, ''); // in this case, we don't have to wait for the stat\n\n      if (!this.filter(p.path, p)) p.resume();else {\n        var job = new PackJob(p.path, absolute, false);\n        job.entry = new WriteEntryTar(p, this[ENTRYOPT](job));\n        job.entry.on('end', function (_) {\n          return _this2[JOBDONE](job);\n        });\n        this[JOBS] += 1;\n        this[QUEUE].push(job);\n      }\n      this[PROCESS]();\n    }\n  }, {\n    key: ADDFSENTRY,\n    value: function value(p) {\n      var absolute = path.resolve(this.cwd, p);\n      if (this.prefix) p = this.prefix + '/' + p.replace(/^\\.(\\/+|$)/, '');\n      this[QUEUE].push(new PackJob(p, absolute));\n      this[PROCESS]();\n    }\n  }, {\n    key: STAT,\n    value: function value(job) {\n      var _this3 = this;\n\n      job.pending = true;\n      this[JOBS] += 1;\n      var stat = this.follow ? 'stat' : 'lstat';\n      fs[stat](job.absolute, function (er, stat) {\n        job.pending = false;\n        _this3[JOBS] -= 1;\n        if (er) _this3.emit('error', er);else _this3[ONSTAT](job, stat);\n      });\n    }\n  }, {\n    key: ONSTAT,\n    value: function value(job, stat) {\n      this.statCache.set(job.absolute, stat);\n      job.stat = stat; // now we have the stat, we can filter it.\n\n      if (!this.filter(job.path, stat)) job.ignore = true;\n      this[PROCESS]();\n    }\n  }, {\n    key: READDIR,\n    value: function value(job) {\n      var _this4 = this;\n\n      job.pending = true;\n      this[JOBS] += 1;\n      fs.readdir(job.absolute, function (er, entries) {\n        job.pending = false;\n        _this4[JOBS] -= 1;\n        if (er) return _this4.emit('error', er);\n\n        _this4[ONREADDIR](job, entries);\n      });\n    }\n  }, {\n    key: ONREADDIR,\n    value: function value(job, entries) {\n      this.readdirCache.set(job.absolute, entries);\n      job.readdir = entries;\n      this[PROCESS]();\n    }\n  }, {\n    key: PROCESS,\n    value: function value() {\n      if (this[PROCESSING]) return;\n      this[PROCESSING] = true;\n\n      for (var w = this[QUEUE].head; w !== null && this[JOBS] < this.jobs; w = w.next) {\n        this[PROCESSJOB](w.value);\n\n        if (w.value.ignore) {\n          var p = w.next;\n          this[QUEUE].removeNode(w);\n          w.next = p;\n        }\n      }\n\n      this[PROCESSING] = false;\n\n      if (this[ENDED] && !this[QUEUE].length && this[JOBS] === 0) {\n        if (this.zip) this.zip.end(EOF);else {\n          _get(_getPrototypeOf(Pack.prototype), \"write\", this).call(this, EOF);\n\n          _get(_getPrototypeOf(Pack.prototype), \"end\", this).call(this);\n        }\n      }\n    }\n  }, {\n    key: JOBDONE,\n    value: function value(job) {\n      this[QUEUE].shift();\n      this[JOBS] -= 1;\n      this[PROCESS]();\n    }\n  }, {\n    key: PROCESSJOB,\n    value: function value(job) {\n      if (job.pending) return;\n\n      if (job.entry) {\n        if (job === this[CURRENT] && !job.piped) this[PIPE](job);\n        return;\n      }\n\n      if (!job.stat) {\n        if (this.statCache.has(job.absolute)) this[ONSTAT](job, this.statCache.get(job.absolute));else this[STAT](job);\n      }\n\n      if (!job.stat) return; // filtered out!\n\n      if (job.ignore) return;\n\n      if (!this.noDirRecurse && job.stat.isDirectory() && !job.readdir) {\n        if (this.readdirCache.has(job.absolute)) this[ONREADDIR](job, this.readdirCache.get(job.absolute));else this[READDIR](job);\n        if (!job.readdir) return;\n      } // we know it doesn't have an entry, because that got checked above\n\n\n      job.entry = this[ENTRY](job);\n\n      if (!job.entry) {\n        job.ignore = true;\n        return;\n      }\n\n      if (job === this[CURRENT] && !job.piped) this[PIPE](job);\n    }\n  }, {\n    key: ENTRYOPT,\n    value: function value(job) {\n      var _this5 = this;\n\n      return {\n        onwarn: function onwarn(msg, data) {\n          _this5.warn(msg, data);\n        },\n        noPax: this.noPax,\n        cwd: this.cwd,\n        absolute: job.absolute,\n        preservePaths: this.preservePaths,\n        maxReadSize: this.maxReadSize,\n        strict: this.strict,\n        portable: this.portable,\n        linkCache: this.linkCache,\n        statCache: this.statCache,\n        noMtime: this.noMtime,\n        mtime: this.mtime\n      };\n    }\n  }, {\n    key: ENTRY,\n    value: function value(job) {\n      var _this6 = this;\n\n      this[JOBS] += 1;\n\n      try {\n        return new this[WRITEENTRYCLASS](job.path, this[ENTRYOPT](job)).on('end', function () {\n          return _this6[JOBDONE](job);\n        }).on('error', function (er) {\n          return _this6.emit('error', er);\n        });\n      } catch (er) {\n        this.emit('error', er);\n      }\n    }\n  }, {\n    key: ONDRAIN,\n    value: function value() {\n      if (this[CURRENT] && this[CURRENT].entry) this[CURRENT].entry.resume();\n    } // like .pipe() but using super, because our write() is special\n\n  }, {\n    key: PIPE,\n    value: function value(job) {\n      var _this7 = this;\n\n      job.piped = true;\n      if (job.readdir) job.readdir.forEach(function (entry) {\n        var p = _this7.prefix ? job.path.slice(_this7.prefix.length + 1) || './' : job.path;\n        var base = p === './' ? '' : p.replace(/\\/*$/, '/');\n\n        _this7[ADDFSENTRY](base + entry);\n      });\n      var source = job.entry;\n      var zip = this.zip;\n      if (zip) source.on('data', function (chunk) {\n        if (!zip.write(chunk)) source.pause();\n      });else source.on('data', function (chunk) {\n        if (!_get(_getPrototypeOf(Pack.prototype), \"write\", _this7).call(_this7, chunk)) source.pause();\n      });\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.zip) this.zip.pause();\n      return _get(_getPrototypeOf(Pack.prototype), \"pause\", this).call(this);\n    }\n  }, {\n    key: CURRENT,\n    get: function get() {\n      return this[QUEUE] && this[QUEUE].head && this[QUEUE].head.value;\n    }\n  }]);\n\n  return Pack;\n}(MiniPass));\n\nvar PackSync = /*#__PURE__*/function (_Pack) {\n  _inherits(PackSync, _Pack);\n\n  function PackSync(opt) {\n    var _this8;\n\n    _classCallCheck(this, PackSync);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(PackSync).call(this, opt));\n    _this8[WRITEENTRYCLASS] = WriteEntrySync;\n    return _this8;\n  } // pause/resume are no-ops in sync streams.\n\n\n  _createClass(PackSync, [{\n    key: \"pause\",\n    value: function pause() {}\n  }, {\n    key: \"resume\",\n    value: function resume() {}\n  }, {\n    key: STAT,\n    value: function value(job) {\n      var stat = this.follow ? 'statSync' : 'lstatSync';\n      this[ONSTAT](job, fs[stat](job.absolute));\n    }\n  }, {\n    key: READDIR,\n    value: function value(job, stat) {\n      this[ONREADDIR](job, fs.readdirSync(job.absolute));\n    } // gotta get it all in this tick\n\n  }, {\n    key: PIPE,\n    value: function value(job) {\n      var _this9 = this;\n\n      var source = job.entry;\n      var zip = this.zip;\n      if (job.readdir) job.readdir.forEach(function (entry) {\n        var p = _this9.prefix ? job.path.slice(_this9.prefix.length + 1) || './' : job.path;\n        var base = p === './' ? '' : p.replace(/\\/*$/, '/');\n\n        _this9[ADDFSENTRY](base + entry);\n      });\n      if (zip) source.on('data', function (chunk) {\n        zip.write(chunk);\n      });else source.on('data', function (chunk) {\n        _get(_getPrototypeOf(PackSync.prototype), WRITE, _this9).call(_this9, chunk);\n      });\n    }\n  }]);\n\n  return PackSync;\n}(Pack);\n\nPack.Sync = PackSync;\nmodule.exports = Pack;","map":null,"metadata":{},"sourceType":"script"}