{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { seperateWeightMaps } from '../faceProcessor/util';\nimport { TinyXception } from '../xception/TinyXception';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { Gender } from './types';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { NetInput, toNetInput } from '../dom';\n\nvar AgeGenderNet =\n/** @class */\nfunction (_super) {\n  __extends(AgeGenderNet, _super);\n\n  function AgeGenderNet(faceFeatureExtractor) {\n    if (faceFeatureExtractor === void 0) {\n      faceFeatureExtractor = new TinyXception(2);\n    }\n\n    var _this = _super.call(this, 'AgeGenderNet') || this;\n\n    _this._faceFeatureExtractor = faceFeatureExtractor;\n    return _this;\n  }\n\n  Object.defineProperty(AgeGenderNet.prototype, \"faceFeatureExtractor\", {\n    get: function get() {\n      return this._faceFeatureExtractor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AgeGenderNet.prototype.runNet = function (input) {\n    var _this = this;\n\n    var params = this.params;\n\n    if (!params) {\n      throw new Error(this._name + \" - load model before inference\");\n    }\n\n    return tf.tidy(function () {\n      var bottleneckFeatures = input instanceof NetInput ? _this.faceFeatureExtractor.forwardInput(input) : input;\n      var pooled = tf.avgPool(bottleneckFeatures, [7, 7], [2, 2], 'valid').as2D(bottleneckFeatures.shape[0], -1);\n      var age = fullyConnectedLayer(pooled, params.fc.age).as1D();\n      var gender = fullyConnectedLayer(pooled, params.fc.gender);\n      return {\n        age: age,\n        gender: gender\n      };\n    });\n  };\n\n  AgeGenderNet.prototype.forwardInput = function (input) {\n    var _this = this;\n\n    return tf.tidy(function () {\n      var _a = _this.runNet(input),\n          age = _a.age,\n          gender = _a.gender;\n\n      return {\n        age: age,\n        gender: tf.softmax(gender)\n      };\n    });\n  };\n\n  AgeGenderNet.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n\n  AgeGenderNet.prototype.predictAgeAndGender = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var netInput, out, ages, genders, ageAndGenderTensors, predictionsByBatch;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            netInput = _a.sent();\n            return [4\n            /*yield*/\n            , this.forwardInput(netInput)];\n\n          case 2:\n            out = _a.sent();\n            ages = tf.unstack(out.age);\n            genders = tf.unstack(out.gender);\n            ageAndGenderTensors = ages.map(function (ageTensor, i) {\n              return {\n                ageTensor: ageTensor,\n                genderTensor: genders[i]\n              };\n            });\n            return [4\n            /*yield*/\n            , Promise.all(ageAndGenderTensors.map(function (_a) {\n              var ageTensor = _a.ageTensor,\n                  genderTensor = _a.genderTensor;\n              return __awaiter(_this, void 0, void 0, function () {\n                var age, probMale, isMale, gender, genderProbability;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , ageTensor.data()];\n\n                    case 1:\n                      age = _b.sent()[0];\n                      return [4\n                      /*yield*/\n                      , genderTensor.data()];\n\n                    case 2:\n                      probMale = _b.sent()[0];\n                      isMale = probMale > 0.5;\n                      gender = isMale ? Gender.MALE : Gender.FEMALE;\n                      genderProbability = isMale ? probMale : 1 - probMale;\n                      ageTensor.dispose();\n                      genderTensor.dispose();\n                      return [2\n                      /*return*/\n                      , {\n                        age: age,\n                        gender: gender,\n                        genderProbability: genderProbability\n                      }];\n                  }\n                });\n              });\n            }))];\n\n          case 3:\n            predictionsByBatch = _a.sent();\n            out.age.dispose();\n            out.gender.dispose();\n            return [2\n            /*return*/\n            , netInput.isBatchInput ? predictionsByBatch : predictionsByBatch[0]];\n        }\n      });\n    });\n  };\n\n  AgeGenderNet.prototype.getDefaultModelName = function () {\n    return 'age_gender_model';\n  };\n\n  AgeGenderNet.prototype.dispose = function (throwOnRedispose) {\n    if (throwOnRedispose === void 0) {\n      throwOnRedispose = true;\n    }\n\n    this.faceFeatureExtractor.dispose(throwOnRedispose);\n\n    _super.prototype.dispose.call(this, throwOnRedispose);\n  };\n\n  AgeGenderNet.prototype.loadClassifierParams = function (weights) {\n    var _a = this.extractClassifierParams(weights),\n        params = _a.params,\n        paramMappings = _a.paramMappings;\n\n    this._params = params;\n    this._paramMappings = paramMappings;\n  };\n\n  AgeGenderNet.prototype.extractClassifierParams = function (weights) {\n    return extractParams(weights);\n  };\n\n  AgeGenderNet.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    var _a = seperateWeightMaps(weightMap),\n        featureExtractorMap = _a.featureExtractorMap,\n        classifierMap = _a.classifierMap;\n\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\n    return extractParamsFromWeigthMap(classifierMap);\n  };\n\n  AgeGenderNet.prototype.extractParams = function (weights) {\n    var classifierWeightSize = 512 * 1 + 1 + (512 * 2 + 2);\n    var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\n    var classifierWeights = weights.slice(weights.length - classifierWeightSize);\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\n    return this.extractClassifierParams(classifierWeights);\n  };\n\n  return AgeGenderNet;\n}(NeuralNetwork);\n\nexport { AgeGenderNet };","map":{"version":3,"sources":["../../../src/ageGenderNet/AgeGenderNet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\r\nimport { seperateWeightMaps } from '../faceProcessor/util';\r\nimport { TinyXception } from '../xception/TinyXception';\r\nimport { extractParams } from './extractParams';\r\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\r\nimport { Gender } from './types';\r\nimport { NeuralNetwork } from '../NeuralNetwork';\r\nimport { NetInput, toNetInput } from '../dom';\r\nvar AgeGenderNet = /** @class */ (function (_super) {\r\n    __extends(AgeGenderNet, _super);\r\n    function AgeGenderNet(faceFeatureExtractor) {\r\n        if (faceFeatureExtractor === void 0) { faceFeatureExtractor = new TinyXception(2); }\r\n        var _this = _super.call(this, 'AgeGenderNet') || this;\r\n        _this._faceFeatureExtractor = faceFeatureExtractor;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(AgeGenderNet.prototype, \"faceFeatureExtractor\", {\r\n        get: function () {\r\n            return this._faceFeatureExtractor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    AgeGenderNet.prototype.runNet = function (input) {\r\n        var _this = this;\r\n        var params = this.params;\r\n        if (!params) {\r\n            throw new Error(this._name + \" - load model before inference\");\r\n        }\r\n        return tf.tidy(function () {\r\n            var bottleneckFeatures = input instanceof NetInput\r\n                ? _this.faceFeatureExtractor.forwardInput(input)\r\n                : input;\r\n            var pooled = tf.avgPool(bottleneckFeatures, [7, 7], [2, 2], 'valid').as2D(bottleneckFeatures.shape[0], -1);\r\n            var age = fullyConnectedLayer(pooled, params.fc.age).as1D();\r\n            var gender = fullyConnectedLayer(pooled, params.fc.gender);\r\n            return { age: age, gender: gender };\r\n        });\r\n    };\r\n    AgeGenderNet.prototype.forwardInput = function (input) {\r\n        var _this = this;\r\n        return tf.tidy(function () {\r\n            var _a = _this.runNet(input), age = _a.age, gender = _a.gender;\r\n            return { age: age, gender: tf.softmax(gender) };\r\n        });\r\n    };\r\n    AgeGenderNet.prototype.forward = function (input) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = this.forwardInput;\r\n                        return [4 /*yield*/, toNetInput(input)];\r\n                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    AgeGenderNet.prototype.predictAgeAndGender = function (input) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var netInput, out, ages, genders, ageAndGenderTensors, predictionsByBatch;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, toNetInput(input)];\r\n                    case 1:\r\n                        netInput = _a.sent();\r\n                        return [4 /*yield*/, this.forwardInput(netInput)];\r\n                    case 2:\r\n                        out = _a.sent();\r\n                        ages = tf.unstack(out.age);\r\n                        genders = tf.unstack(out.gender);\r\n                        ageAndGenderTensors = ages.map(function (ageTensor, i) { return ({\r\n                            ageTensor: ageTensor,\r\n                            genderTensor: genders[i]\r\n                        }); });\r\n                        return [4 /*yield*/, Promise.all(ageAndGenderTensors.map(function (_a) {\r\n                                var ageTensor = _a.ageTensor, genderTensor = _a.genderTensor;\r\n                                return __awaiter(_this, void 0, void 0, function () {\r\n                                    var age, probMale, isMale, gender, genderProbability;\r\n                                    return __generator(this, function (_b) {\r\n                                        switch (_b.label) {\r\n                                            case 0: return [4 /*yield*/, ageTensor.data()];\r\n                                            case 1:\r\n                                                age = (_b.sent())[0];\r\n                                                return [4 /*yield*/, genderTensor.data()];\r\n                                            case 2:\r\n                                                probMale = (_b.sent())[0];\r\n                                                isMale = probMale > 0.5;\r\n                                                gender = isMale ? Gender.MALE : Gender.FEMALE;\r\n                                                genderProbability = isMale ? probMale : (1 - probMale);\r\n                                                ageTensor.dispose();\r\n                                                genderTensor.dispose();\r\n                                                return [2 /*return*/, { age: age, gender: gender, genderProbability: genderProbability }];\r\n                                        }\r\n                                    });\r\n                                });\r\n                            }))];\r\n                    case 3:\r\n                        predictionsByBatch = _a.sent();\r\n                        out.age.dispose();\r\n                        out.gender.dispose();\r\n                        return [2 /*return*/, netInput.isBatchInput\r\n                                ? predictionsByBatch\r\n                                : predictionsByBatch[0]];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    AgeGenderNet.prototype.getDefaultModelName = function () {\r\n        return 'age_gender_model';\r\n    };\r\n    AgeGenderNet.prototype.dispose = function (throwOnRedispose) {\r\n        if (throwOnRedispose === void 0) { throwOnRedispose = true; }\r\n        this.faceFeatureExtractor.dispose(throwOnRedispose);\r\n        _super.prototype.dispose.call(this, throwOnRedispose);\r\n    };\r\n    AgeGenderNet.prototype.loadClassifierParams = function (weights) {\r\n        var _a = this.extractClassifierParams(weights), params = _a.params, paramMappings = _a.paramMappings;\r\n        this._params = params;\r\n        this._paramMappings = paramMappings;\r\n    };\r\n    AgeGenderNet.prototype.extractClassifierParams = function (weights) {\r\n        return extractParams(weights);\r\n    };\r\n    AgeGenderNet.prototype.extractParamsFromWeigthMap = function (weightMap) {\r\n        var _a = seperateWeightMaps(weightMap), featureExtractorMap = _a.featureExtractorMap, classifierMap = _a.classifierMap;\r\n        this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);\r\n        return extractParamsFromWeigthMap(classifierMap);\r\n    };\r\n    AgeGenderNet.prototype.extractParams = function (weights) {\r\n        var classifierWeightSize = (512 * 1 + 1) + (512 * 2 + 2);\r\n        var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);\r\n        var classifierWeights = weights.slice(weights.length - classifierWeightSize);\r\n        this.faceFeatureExtractor.extractWeights(featureExtractorWeights);\r\n        return this.extractClassifierParams(classifierWeights);\r\n    };\r\n    return AgeGenderNet;\r\n}(NeuralNetwork));\r\nexport { AgeGenderNet };\r\n//# sourceMappingURL=AgeGenderNet.js.map"]},"metadata":{},"sourceType":"module"}