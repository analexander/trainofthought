{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var FFTProgram = function FFTProgram(component, inputShape, inverse) {\n  _classCallCheck(this, FFTProgram);\n\n  this.variableNames = ['real', 'imag'];\n  var innerDim = inputShape[1];\n  this.outputShape = inputShape;\n  var exponentMultiplierSnippet = inverse ? \"2.0 * \".concat(Math.PI) : \"-2.0 * \".concat(Math.PI);\n  var resultDenominator = inverse ? \"\".concat(innerDim, \".0\") : '1.0';\n  var opString;\n\n  if (component === 'real') {\n    opString = 'return real * expR - imag * expI;';\n  } else if (component === 'imag') {\n    opString = 'return real * expI + imag * expR;';\n  } else {\n    throw new Error(\"FFT component must be either \\\"real\\\" or \\\"imag\\\", got \".concat(component, \".\"));\n  }\n\n  this.userCode = \"\\n      const float exponentMultiplier = \".concat(exponentMultiplierSnippet, \";\\n\\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\\n        \").concat(opString, \"\\n      }\\n\\n      float mulMatDFT(int batch, int index) {\\n        float indexRatio = float(index) / float(\").concat(innerDim, \");\\n        float exponentMultiplierTimesIndexRatio =\\n            exponentMultiplier * indexRatio;\\n\\n        float result = 0.0;\\n\\n        for (int i = 0; i < \").concat(innerDim, \"; i++) {\\n          // x = (-2|2 * PI / N) * index * i;\\n          float x = exponentMultiplierTimesIndexRatio * float(i);\\n          float expR = cos(x);\\n          float expI = sin(x);\\n          float real = getReal(batch, i);\\n          float imag = getImag(batch, i);\\n\\n          result +=\\n              unaryOpComplex(real, expR, imag, expI) / \").concat(resultDenominator, \";\\n        }\\n\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        setOutput(mulMatDFT(coords[0], coords[1]));\\n      }\\n    \");\n};","map":null,"metadata":{},"sourceType":"module"}