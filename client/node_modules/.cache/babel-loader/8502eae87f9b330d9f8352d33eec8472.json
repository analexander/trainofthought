{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as seedrandom from 'seedrandom';\nimport { expectNumbersClose, testEpsilon } from '../test_util'; // https://en.wikipedia.org/wiki/Marsaglia_polar_method\n\nexport var MPRandGauss = /*#__PURE__*/function () {\n  function MPRandGauss(mean, stdDeviation, dtype, truncated, seed) {\n    _classCallCheck(this, MPRandGauss);\n\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n\n    var seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n  /** Returns next sample from a Gaussian distribution. */\n\n\n  _createClass(MPRandGauss, [{\n    key: \"nextValue\",\n    value: function nextValue() {\n      if (!isNaN(this.nextVal)) {\n        var value = this.nextVal;\n        this.nextVal = NaN;\n        return value;\n      }\n\n      var resultX, resultY;\n      var isValid = false;\n\n      while (!isValid) {\n        var v1 = void 0,\n            v2 = void 0,\n            s = void 0;\n\n        do {\n          v1 = 2 * this.random() - 1;\n          v2 = 2 * this.random() - 1;\n          s = v1 * v1 + v2 * v2;\n        } while (s >= 1 || s === 0);\n\n        var mul = Math.sqrt(-2.0 * Math.log(s) / s);\n        resultX = this.mean + this.stdDev * v1 * mul;\n        resultY = this.mean + this.stdDev * v2 * mul;\n\n        if (!this.truncated || this.isValidTruncated(resultX)) {\n          isValid = true;\n        }\n      }\n\n      if (!this.truncated || this.isValidTruncated(resultY)) {\n        this.nextVal = this.convertValue(resultY);\n      }\n\n      return this.convertValue(resultX);\n    }\n    /** Handles proper rounding for non-floating-point numbers. */\n\n  }, {\n    key: \"convertValue\",\n    value: function convertValue(value) {\n      if (this.dtype == null || this.dtype === 'float32') {\n        return value;\n      }\n\n      return Math.round(value);\n    }\n    /** Returns true if less than 2-standard-deviations from the mean. */\n\n  }, {\n    key: \"isValidTruncated\",\n    value: function isValidTruncated(value) {\n      return value <= this.upper && value >= this.lower;\n    }\n  }]);\n\n  return MPRandGauss;\n}(); // Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\n\nexport var RandGamma = /*#__PURE__*/function () {\n  function RandGamma(alpha, beta, dtype, seed) {\n    _classCallCheck(this, RandGamma);\n\n    this.alpha = alpha;\n    this.beta = 1 / beta; // convert rate to scale parameter\n\n    this.dtype = dtype;\n    var seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n\n    if (alpha < 1) {\n      this.d = alpha + 2 / 3;\n    } else {\n      this.d = alpha - 1 / 3;\n    }\n\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n  /** Returns next sample from a gamma distribution. */\n\n\n  _createClass(RandGamma, [{\n    key: \"nextValue\",\n    value: function nextValue() {\n      var x2, v0, v1, x, u, v;\n\n      while (true) {\n        do {\n          x = this.randn.nextValue();\n          v = 1 + this.c * x;\n        } while (v <= 0);\n\n        v *= v * v;\n        x2 = x * x;\n        v0 = 1 - 0.331 * x2 * x2;\n        v1 = 0.5 * x2 + this.d * (1 - v + Math.log(v));\n        u = this.randu();\n\n        if (u < v0 || Math.log(u) < v1) {\n          break;\n        }\n      }\n\n      v = 1 / this.beta * this.d * v;\n\n      if (this.alpha < 1) {\n        v *= Math.pow(this.randu(), 1 / this.alpha);\n      }\n\n      return this.convertValue(v);\n    }\n    /** Handles proper rounding for non-floating-point numbers. */\n\n  }, {\n    key: \"convertValue\",\n    value: function convertValue(value) {\n      if (this.dtype === 'float32') {\n        return value;\n      }\n\n      return Math.round(value);\n    }\n  }]);\n\n  return RandGamma;\n}();\nexport var UniformRandom = /*#__PURE__*/function () {\n  function UniformRandom() {\n    var _this = this;\n\n    var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var dtype = arguments.length > 2 ? arguments[2] : undefined;\n    var seed = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, UniformRandom);\n\n    /** Handles proper rounding for non floating point numbers. */\n    this.canReturnFloat = function () {\n      return _this.dtype == null || _this.dtype === 'float32';\n    };\n\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n\n    if (seed == null) {\n      seed = Math.random();\n    }\n\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(\"The difference between \".concat(min, \" - \").concat(max, \" <= 1 and dtype is not float\"));\n    }\n\n    this.random = seedrandom.alea(seed);\n  }\n\n  _createClass(UniformRandom, [{\n    key: \"convertValue\",\n    value: function convertValue(value) {\n      if (this.canReturnFloat()) {\n        return value;\n      }\n\n      return Math.round(value);\n    }\n  }, {\n    key: \"nextValue\",\n    value: function nextValue() {\n      return this.convertValue(this.min + this.range * this.random());\n    }\n  }]);\n\n  return UniformRandom;\n}();\nexport function jarqueBeraNormalityTest(values) {\n  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n  var n = values.length;\n  var s = skewness(values);\n  var k = kurtosis(values);\n  var jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2)); // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n\n  var CHI_SQUARE_2DEG = 5.991;\n\n  if (jb > CHI_SQUARE_2DEG) {\n    throw new Error(\"Invalid p-value for JB: \".concat(jb));\n  }\n}\nexport function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n\n  var actualMean = mean(actual);\n  expectNumbersClose(actualMean, expectedMean, epsilon);\n  expectNumbersClose(standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\n\nfunction mean(values) {\n  var sum = 0;\n\n  for (var i = 0; i < values.length; i++) {\n    sum += values[i];\n  }\n\n  return sum / values.length;\n}\n\nfunction standardDeviation(values, mean) {\n  var squareDiffSum = 0;\n\n  for (var i = 0; i < values.length; i++) {\n    var diff = values[i] - mean;\n    squareDiffSum += diff * diff;\n  }\n\n  return Math.sqrt(squareDiffSum / values.length);\n}\n\nfunction kurtosis(values) {\n  // https://en.wikipedia.org/wiki/Kurtosis\n  var valuesMean = mean(values);\n  var n = values.length;\n  var sum2 = 0;\n  var sum4 = 0;\n\n  for (var i = 0; i < n; i++) {\n    var v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum4 += Math.pow(v, 4);\n  }\n\n  return 1 / n * sum4 / Math.pow(1 / n * sum2, 2);\n}\n\nfunction skewness(values) {\n  // https://en.wikipedia.org/wiki/Skewness\n  var valuesMean = mean(values);\n  var n = values.length;\n  var sum2 = 0;\n  var sum3 = 0;\n\n  for (var i = 0; i < n; i++) {\n    var v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum3 += Math.pow(v, 3);\n  }\n\n  return 1 / n * sum3 / Math.pow(1 / (n - 1) * sum2, 3 / 2);\n}","map":null,"metadata":{},"sourceType":"module"}