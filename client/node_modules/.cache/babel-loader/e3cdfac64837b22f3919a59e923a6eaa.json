{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { DepthToSpace } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Rearranges data from depth into blocks of spatial data. More specifically,\n * this op outputs a copy of the input tensor where values from the `depth`\n * dimension are moved in spatial blocks to the `height` and `width` dimensions.\n * The attr `blockSize` indicates the input block size and how the data is\n * moved.\n *\n *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\n * into non-overlapping blocks of size `blockSize x blockSize`\n *\n *  - The width the output tensor is `inputWidth * blockSize`, whereas the\n * height is `inputHeight * blockSize`\n *\n *  - The Y, X coordinates within each block of the output image are determined\n * by the high order component of the input channel index\n *\n *  - The depth of the input tensor must be divisible by `blockSize *\n * blockSize`\n *\n * The `dataFormat` attr specifies the layout of the input and output tensors\n * with the following options: \"NHWC\": [ `batch, height, width, channels` ]\n * \"NCHW\": [ `batch, channels, height, width` ]\n *\n * ```js\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\n * const blockSize = 2;\n * const dataFormat = \"NHWC\";\n *\n * tf.depthToSpace(x, blockSize, dataFormat).print();\n * ```\n *\n * @param x The input tensor of rank 4\n * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\n\nfunction depthToSpace_(x, blockSize) {\n  var dataFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'NHWC';\n  var $x = convertToTensor(x, 'x', 'depthToSpace');\n  var inputHeight = dataFormat === 'NHWC' ? $x.shape[1] : $x.shape[2];\n  var inputWidth = dataFormat === 'NHWC' ? $x.shape[2] : $x.shape[3];\n  var inputDepth = dataFormat === 'NHWC' ? $x.shape[3] : $x.shape[1];\n  util.assert(inputHeight * blockSize >= 0, function () {\n    return \"Negative dimension size caused by overflow when multiplying\\n    \".concat(inputHeight, \" and \").concat(blockSize, \"  for depthToSpace with input shape\\n    \").concat($x.shape);\n  });\n  util.assert(inputWidth * blockSize >= 0, function () {\n    return \"Negative dimension size caused by overflow when multiplying\\n    \".concat(inputWidth, \" and \").concat(blockSize, \" for depthToSpace with input shape\\n        \").concat($x.shape);\n  });\n  util.assert(inputDepth % (blockSize * blockSize) === 0, function () {\n    return \"Dimension size must be evenly divisible by \".concat(blockSize * blockSize, \" but is \").concat(inputDepth, \" for depthToSpace with input shape \").concat($x.shape);\n  });\n\n  var forward = function forward(backend) {\n    return backend.depthToSpace($x, blockSize, dataFormat);\n  };\n\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    blockSize: blockSize,\n    dataFormat: dataFormat\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , DepthToSpace, attrs);\n}\n\nexport var depthToSpace = op({\n  depthToSpace_: depthToSpace_\n});","map":null,"metadata":{},"sourceType":"module"}