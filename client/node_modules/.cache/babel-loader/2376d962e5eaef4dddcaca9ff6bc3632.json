{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport var MirrorPadProgram = function MirrorPadProgram(xShape, paddings, mode) {\n  _classCallCheck(this, MirrorPadProgram);\n\n  this.variableNames = ['x'];\n  this.outputShape = paddings.map(function (p, i) {\n    return p[0]\n    /* beforePad */\n    + xShape[i] + p[1];\n  }\n  /* afterPad */\n  );\n  var rank = xShape.length;\n  var dtype = getCoordsDataType(rank);\n  var start = paddings.map(function (p) {\n    return p[0];\n  }).join(',');\n  var end = paddings.map(function (p, i) {\n    return p[0] + xShape[i];\n  }).join(',');\n  var unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n  var offset = mode === 'reflect' ? 0 : 1;\n\n  if (rank === 1) {\n    this.userCode = \"\\n        int start = \".concat(start, \";\\n        int end = \").concat(end, \";\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start) {\\n            outC = start * 2 - outC - \").concat(offset, \";\\n          } else if(outC >= end) {\\n            outC = (end - 1) * 2 - outC + \").concat(offset, \";\\n          }\\n          setOutput(getX(outC - start));\\n        }\\n      \");\n    return;\n  }\n\n  this.userCode = \"\\n      \".concat(dtype, \" start = \").concat(dtype, \"(\").concat(start, \");\\n      \").concat(dtype, \" end = \").concat(dtype, \"(\").concat(end, \");\\n\\n      void main() {\\n        \").concat(dtype, \" outC = getOutputCoords();\\n        for (int i = 0; i < \").concat(rank, \"; i++) {\\n          if (outC[i] < start[i]) {\\n            outC[i] = start[i] * 2 - outC[i] - \").concat(offset, \";\\n          } else if(outC[i] >= end[i]) {\\n            outC[i] = (end[i] - 1) * 2 - outC[i] + \").concat(offset, \";\\n          }\\n        }\\n        \").concat(dtype, \" coords = outC - start;\\n        setOutput(getX(\").concat(unpackedCoords, \"));\\n      }\\n    \");\n};","map":null,"metadata":{},"sourceType":"module"}