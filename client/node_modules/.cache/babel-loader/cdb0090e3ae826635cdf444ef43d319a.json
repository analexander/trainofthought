{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { prelu } from './prelu';\nimport { sharedLayer } from './sharedLayers';\nexport function RNet(x, params) {\n  return tf.tidy(function () {\n    var convOut = sharedLayer(x, params);\n    var vectorized = tf.reshape(convOut, [convOut.shape[0], params.fc1.weights.shape[0]]);\n    var fc1 = fullyConnectedLayer(vectorized, params.fc1);\n    var prelu4 = prelu(fc1, params.prelu4_alpha);\n    var fc2_1 = fullyConnectedLayer(prelu4, params.fc2_1);\n    var max = tf.expandDims(tf.max(fc2_1, 1), 1);\n    var prob = tf.softmax(tf.sub(fc2_1, max), 1);\n    var regions = fullyConnectedLayer(prelu4, params.fc2_2);\n    var scores = tf.unstack(prob, 1)[1];\n    return {\n      scores: scores,\n      regions: regions\n    };\n  });\n}","map":{"version":3,"sources":["../../../src/mtcnn/RNet.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAZ,MAAoB,uBAApB;AAEA,SAAS,mBAAT,QAAoC,+BAApC;AACA,SAAS,KAAT,QAAsB,SAAtB;AACA,SAAS,WAAT,QAA4B,gBAA5B;AAGA,OAAM,SAAU,IAAV,CAAe,CAAf,EAA+B,MAA/B,EAAiD;AACrD,SAAO,EAAE,CAAC,IAAH,CAAQ,YAAA;AAEb,QAAM,OAAO,GAAG,WAAW,CAAC,CAAD,EAAI,MAAJ,CAA3B;AACA,QAAM,UAAU,GAAG,EAAE,CAAC,OAAH,CAAW,OAAX,EAAoB,CAAC,OAAO,CAAC,KAAR,CAAc,CAAd,CAAD,EAAmB,MAAM,CAAC,GAAP,CAAW,OAAX,CAAmB,KAAnB,CAAyB,CAAzB,CAAnB,CAApB,CAAnB;AACA,QAAM,GAAG,GAAG,mBAAmB,CAAC,UAAD,EAAa,MAAM,CAAC,GAApB,CAA/B;AACA,QAAM,MAAM,GAAG,KAAK,CAAc,GAAd,EAAmB,MAAM,CAAC,YAA1B,CAApB;AACA,QAAM,KAAK,GAAG,mBAAmB,CAAC,MAAD,EAAS,MAAM,CAAC,KAAhB,CAAjC;AACA,QAAM,GAAG,GAAG,EAAE,CAAC,UAAH,CAAc,EAAE,CAAC,GAAH,CAAO,KAAP,EAAc,CAAd,CAAd,EAAgC,CAAhC,CAAZ;AACA,QAAM,IAAI,GAAG,EAAE,CAAC,OAAH,CAAW,EAAE,CAAC,GAAH,CAAO,KAAP,EAAc,GAAd,CAAX,EAA+B,CAA/B,CAAb;AACA,QAAM,OAAO,GAAG,mBAAmB,CAAC,MAAD,EAAS,MAAM,CAAC,KAAhB,CAAnC;AAEA,QAAM,MAAM,GAAG,EAAE,CAAC,OAAH,CAAW,IAAX,EAAiB,CAAjB,EAAoB,CAApB,CAAf;AACA,WAAO;AAAE,MAAA,MAAM,EAAA,MAAR;AAAU,MAAA,OAAO,EAAA;AAAjB,KAAP;AACD,GAbM,CAAP;AAcD","sourceRoot":"","sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\r\nimport { prelu } from './prelu';\r\nimport { sharedLayer } from './sharedLayers';\r\nexport function RNet(x, params) {\r\n    return tf.tidy(function () {\r\n        var convOut = sharedLayer(x, params);\r\n        var vectorized = tf.reshape(convOut, [convOut.shape[0], params.fc1.weights.shape[0]]);\r\n        var fc1 = fullyConnectedLayer(vectorized, params.fc1);\r\n        var prelu4 = prelu(fc1, params.prelu4_alpha);\r\n        var fc2_1 = fullyConnectedLayer(prelu4, params.fc2_1);\r\n        var max = tf.expandDims(tf.max(fc2_1, 1), 1);\r\n        var prob = tf.softmax(tf.sub(fc2_1, max), 1);\r\n        var regions = fullyConnectedLayer(prelu4, params.fc2_2);\r\n        var scores = tf.unstack(prob, 1)[1];\r\n        return { scores: scores, regions: regions };\r\n    });\r\n}\r\n//# sourceMappingURL=RNet.js.map"]},"metadata":{},"sourceType":"module"}