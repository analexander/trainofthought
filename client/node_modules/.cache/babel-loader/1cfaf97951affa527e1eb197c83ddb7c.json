{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n * into the tensor's shape.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const axis = 1;\n * x.expandDims(axis).print();\n * ```\n *\n * @param x The input tensor whose dimensions to be expanded.\n * @param axis The dimension index at which to insert shape of `1`. Defaults\n *     to 0 (the first dimension).\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\n\nfunction expandDims_(x) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var parseAs = null;\n  var $x = convertToTensor(x, 'x', 'expandDims', parseAs);\n  util.assert(axis <= $x.rank, function () {\n    return 'Axis must be <= rank of the tensor';\n  });\n  var newShape = $x.shape.slice();\n\n  if (axis < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(-($x.rank + 1) <= axis, function () {\n      return \"Axis must be in the interval [\".concat(-($x.rank + 1), \", \").concat($x.rank, \"]\");\n    });\n    axis = $x.rank + axis + 1;\n  }\n\n  newShape.splice(axis, 0, 1);\n  return reshape($x, newShape);\n}\n\nexport var expandDims = op({\n  expandDims_: expandDims_\n});","map":null,"metadata":{},"sourceType":"module"}