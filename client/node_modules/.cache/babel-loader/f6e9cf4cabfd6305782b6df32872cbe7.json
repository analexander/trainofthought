{"ast":null,"code":"import _toConsumableArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat as _concat, keep, reshape, scalar, slice, stack as _stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport var TensorList = /*#__PURE__*/function () {\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  function TensorList(tensors, elementShape, elementDtype) {\n    var maxNumElements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n\n    _classCallCheck(this, TensorList);\n\n    this.tensors = tensors;\n    this.elementShape = elementShape;\n    this.elementDtype = elementDtype;\n\n    if (tensors != null) {\n      tensors.forEach(function (tensor) {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(tensor.dtype));\n        }\n\n        assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n      });\n    }\n\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  _createClass(TensorList, [{\n    key: \"copy\",\n\n    /**\n     * Get a new TensorList containing a copy of the underlying tensor container.\n     */\n    value: function copy() {\n      return new TensorList(_toConsumableArray(this.tensors), this.elementShape, this.elementDtype);\n    }\n    /**\n     * Dispose the tensors and idTensor and clear the tensor list.\n     */\n\n  }, {\n    key: \"clearAndClose\",\n    value: function clearAndClose(keepIds) {\n      this.tensors.forEach(function (tensor) {\n        if (keepIds == null || !keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n      this.tensors.length = 0;\n      this.idTensor.dispose();\n    }\n    /**\n     * The size of the tensors in the tensor list.\n     */\n\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.tensors.length;\n    }\n    /**\n     * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n     * tf.Tensor.\n     * @param elementShape shape of each tensor\n     * @param elementDtype data type of each tensor\n     * @param numElements the number of elements to stack\n     */\n\n  }, {\n    key: \"stack\",\n    value: function stack(elementShape, elementDtype) {\n      var _this = this;\n\n      var numElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n      }\n\n      if (numElements !== -1 && this.tensors.length !== numElements) {\n        throw new Error(\"Operation expected a list with \".concat(numElements, \" elements but got a list with \").concat(this.tensors.length, \" elements.\"));\n      }\n\n      assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n      return tidy(function () {\n        var reshapedTensors = _this.tensors.map(function (tensor) {\n          return reshape(tensor, elementShape);\n        });\n\n        return _stack(reshapedTensors, 0);\n      });\n    }\n    /**\n     * Pop a tensor from the end of the list.\n     * @param elementShape shape of the tensor\n     * @param elementDtype data type of the tensor\n     */\n\n  }, {\n    key: \"popBack\",\n    value: function popBack(elementShape, elementDtype) {\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n      }\n\n      if (this.size() === 0) {\n        throw new Error('Trying to pop from an empty list.');\n      }\n\n      var tensor = this.tensors.pop();\n      assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n      return reshape(tensor, elementShape);\n    }\n    /**\n     * Push a tensor to the end of the list.\n     * @param tensor Tensor to be pushed.\n     */\n\n  }, {\n    key: \"pushBack\",\n    value: function pushBack(tensor) {\n      if (tensor.dtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(tensor.dtype, \", but list elements \").concat(this.elementDtype));\n      }\n\n      assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n      if (this.maxNumElements === this.size()) {\n        throw new Error(\"Trying to push element into a full list.\");\n      }\n\n      keep(tensor);\n      this.tensors.push(tensor);\n    }\n    /**\n     * Update the size of the list.\n     * @param size the new size of the list.\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize(size) {\n      if (size < 0) {\n        throw new Error(\"TensorListResize expects size to be non-negative. Got: \".concat(size));\n      }\n\n      if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n        throw new Error(\"TensorListResize input size \".concat(size, \" is greater maxNumElement \").concat(this.maxNumElements, \".\"));\n      }\n\n      this.tensors.length = size;\n    }\n    /**\n     * Retrieve the element at the provided index\n     * @param elementShape shape of the tensor\n     * @param elementDtype dtype of the tensor\n     * @param elementIndex index of the tensor\n     */\n\n  }, {\n    key: \"getItem\",\n    value: function getItem(elementIndex, elementShape, elementDtype) {\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n      }\n\n      if (elementIndex < 0 || elementIndex > this.tensors.length) {\n        throw new Error(\"Trying to access element \".concat(elementIndex, \" in a list with \").concat(this.tensors.length, \" elements.\"));\n      }\n\n      if (this.tensors[elementIndex] == null) {\n        throw new Error(\"element at index \".concat(elementIndex, \" is null.\"));\n      }\n\n      assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n      return this.tensors[elementIndex];\n    }\n    /**\n     * Set the tensor at the index\n     * @param elementIndex index of the tensor\n     * @param tensor the tensor to be inserted into the list\n     */\n\n  }, {\n    key: \"setItem\",\n    value: function setItem(elementIndex, tensor) {\n      if (tensor.dtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(tensor.dtype, \", but list elements \").concat(this.elementDtype));\n      }\n\n      if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n        throw new Error(\"Trying to set element \".concat(elementIndex, \" in a list with max \").concat(this.maxNumElements, \" elements.\"));\n      }\n\n      assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n      keep(tensor);\n      this.tensors[elementIndex] = tensor;\n    }\n    /**\n     * Return selected values in the TensorList as a stacked Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param indices indices of tensors to gather\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n\n  }, {\n    key: \"gather\",\n    value: function gather(indices, elementDtype, elementShape) {\n      var _this2 = this;\n\n      if (elementDtype !== this.elementDtype) {\n        throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n      }\n\n      assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: '); // When indices is greater than the size of the list, indices beyond the\n      // size of the list are ignored.\n\n      indices = indices.slice(0, this.size());\n\n      if (indices.length === 0) {\n        return tensor([], [0].concat(this.elementShape));\n      }\n\n      return tidy(function () {\n        var tensors = indices.map(function (i) {\n          return reshape(_this2.tensors[i], elementShape);\n        });\n        return _stack(tensors, 0);\n      });\n    }\n    /**\n     * Return the values in the TensorList as a concatenated Tensor.\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n\n  }, {\n    key: \"concat\",\n    value: function concat(elementDtype, elementShape) {\n      var _this3 = this;\n\n      if (!!elementDtype && elementDtype !== this.elementDtype) {\n        throw new Error(\"TensorList dtype is \".concat(this.elementDtype, \" but concat requested dtype \").concat(elementDtype));\n      }\n\n      assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n      if (this.size() === 0) {\n        return tensor([], [0].concat(this.elementShape));\n      }\n\n      return tidy(function () {\n        var tensors = _this3.tensors.map(function (t) {\n          return reshape(t, elementShape);\n        });\n\n        return _concat(tensors, 0);\n      });\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.idTensor.id;\n    }\n  }]);\n\n  return TensorList;\n}();\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\n\nexport function fromTensor(tensor, elementShape, elementDtype) {\n  var dtype = tensor.dtype;\n\n  if (tensor.shape.length < 1) {\n    throw new Error(\"Tensor must be at least a vector, but saw shape: \".concat(tensor.shape));\n  }\n\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(\"Invalid data types; op elements \".concat(tensor.dtype, \", but list elements \").concat(elementDtype));\n  }\n\n  var outputShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(outputShape, elementShape, 'TensorList shape mismatch: ');\n  var tensorList = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\n\nexport function reserve(elementShape, elementDtype, numElements) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\n\nexport function scatter(tensor, indices, elementShape, numElements) {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \".concat(indices.length, \" vs. \").concat(tensor.shape[0]));\n  }\n\n  var maxIndex = Math.max.apply(Math, _toConsumableArray(indices));\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\"Max index must be < array size (\".concat(maxIndex, \"  vs. \").concat(numElements, \")\"));\n  }\n\n  var list = new TensorList([], elementShape, tensor.dtype, numElements);\n  var tensors = unstack(tensor, 0);\n  indices.forEach(function (value, index) {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\n\nexport function split(tensor, length, elementShape) {\n  var totalLength = 0;\n  var cumulativeLengths = length.map(function (len) {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \".concat(totalLength, \", and tensor's shape is: \").concat(tensor.shape));\n  }\n\n  var elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  var tensors = tidy(function () {\n    var tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n\n    for (var i = 0; i < length.length; ++i) {\n      var previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n      var indices = [0, previousLength, 0];\n      var sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(slice(tensor, indices, sizes), elementShape);\n    }\n\n    tensor.dispose();\n    return tensors;\n  });\n  var list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (var i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n\n  return list;\n}","map":null,"metadata":{},"sourceType":"module"}