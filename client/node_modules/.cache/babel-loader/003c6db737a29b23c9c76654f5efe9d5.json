{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { device_util, env } from '@tensorflow/tfjs-core';\nimport { getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled } from './webgl_util';\nvar ENV = env();\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\n\nENV.registerFlag('HAS_WEBGL', function () {\n  return ENV.getNumber('WEBGL_VERSION') > 0;\n});\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\n\nENV.registerFlag('WEBGL_VERSION', function () {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n\n  return 0;\n});\n/** Whether to check for numerical representation problems. */\n\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', function () {\n  return false;\n});\nENV.registerFlag('WEBGL_BUFFER_SUPPORTED', function () {\n  return ENV.get('WEBGL_VERSION') === 2;\n});\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\n\nENV.registerFlag('WEBGL_CPU_FORWARD', function () {\n  return true;\n});\n/** Whether the WebGL backend will always use f16 textures for rendering. */\n\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', function () {\n  return false;\n});\n/** Whether to turn all packing related flags on. */\n\nENV.registerFlag('WEBGL_PACK', function () {\n  return ENV.getBool('HAS_WEBGL');\n});\n/** Whether we will pack the batchnormalization op. */\n\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will pack the clip op. */\n\nENV.registerFlag('WEBGL_PACK_CLIP', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will pack the depthwise conv op. */\n// TODO: https://github.com/tensorflow/tfjs/issues/1679\n\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', function () {\n  return false;\n});\n/** Whether we will pack binary ops. */\n\nENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will pack unary ops. */\n\nENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will pack array ops. */\n\nENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will pack image ops. */\n\nENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will pack reduce ops. */\n\nENV.registerFlag('WEBGL_PACK_REDUCE', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether packed WebGL kernels lazily unpack their outputs. */\n\nENV.registerFlag('WEBGL_LAZILY_UNPACK', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** Whether we will use the im2col algorithm to speed up convolutions. */\n\nENV.registerFlag('WEBGL_CONV_IM2COL', function () {\n  return ENV.getBool('WEBGL_PACK');\n});\n/** The maximum texture dimension. */\n\nENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', function () {\n  return getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION'));\n});\n/** The maximum texture dimension. */\n\nENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', function () {\n  return getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION'));\n});\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\n\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', function () {\n  var webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\n\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', function () {\n  return ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 && !device_util.isMobile();\n});\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\n\nENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', function () {\n  return isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION'));\n});\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\n\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', function () {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ? false : ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\n\nENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', function () {\n  return isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION'));\n});\n/** Whether the fence API is available. */\n\nENV.registerFlag('WEBGL_FENCE_API_ENABLED', function () {\n  return isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION'));\n});\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\n\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', function () {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  var useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\n\nENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', function () {\n  return -1;\n}, function (threshold) {\n  if (threshold < 0 && threshold !== -1) {\n    throw new Error(\"WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never \" + \"delete) or at least 0, but got \".concat(threshold, \".\"));\n  }\n});","map":null,"metadata":{},"sourceType":"module"}