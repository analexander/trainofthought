{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\n\nfunction getCenterCoordinatesAndSizesLayer(x) {\n  var vec = tf.unstack(tf.transpose(x, [1, 0]));\n  var sizes = [tf.sub(vec[2], vec[0]), tf.sub(vec[3], vec[1])];\n  var centers = [tf.add(vec[0], tf.div(sizes[0], tf.scalar(2))), tf.add(vec[1], tf.div(sizes[1], tf.scalar(2)))];\n  return {\n    sizes: sizes,\n    centers: centers\n  };\n}\n\nfunction decodeBoxesLayer(x0, x1) {\n  var _a = getCenterCoordinatesAndSizesLayer(x0),\n      sizes = _a.sizes,\n      centers = _a.centers;\n\n  var vec = tf.unstack(tf.transpose(x1, [1, 0]));\n  var div0_out = tf.div(tf.mul(tf.exp(tf.div(vec[2], tf.scalar(5))), sizes[0]), tf.scalar(2));\n  var add0_out = tf.add(tf.mul(tf.div(vec[0], tf.scalar(10)), sizes[0]), centers[0]);\n  var div1_out = tf.div(tf.mul(tf.exp(tf.div(vec[3], tf.scalar(5))), sizes[1]), tf.scalar(2));\n  var add1_out = tf.add(tf.mul(tf.div(vec[1], tf.scalar(10)), sizes[1]), centers[1]);\n  return tf.transpose(tf.stack([tf.sub(add0_out, div0_out), tf.sub(add1_out, div1_out), tf.add(add0_out, div0_out), tf.add(add1_out, div1_out)]), [1, 0]);\n}\n\nexport function outputLayer(boxPredictions, classPredictions, params) {\n  return tf.tidy(function () {\n    var batchSize = boxPredictions.shape[0];\n    var boxes = decodeBoxesLayer(tf.reshape(tf.tile(params.extra_dim, [batchSize, 1, 1]), [-1, 4]), tf.reshape(boxPredictions, [-1, 4]));\n    boxes = tf.reshape(boxes, [batchSize, boxes.shape[0] / batchSize, 4]);\n    var scoresAndClasses = tf.sigmoid(tf.slice(classPredictions, [0, 0, 1], [-1, -1, -1]));\n    var scores = tf.slice(scoresAndClasses, [0, 0, 0], [-1, -1, 1]);\n    scores = tf.reshape(scores, [batchSize, scores.shape[1]]);\n    var boxesByBatch = tf.unstack(boxes);\n    var scoresByBatch = tf.unstack(scores);\n    return {\n      boxes: boxesByBatch,\n      scores: scoresByBatch\n    };\n  });\n}","map":{"version":3,"sources":["../../../src/ssdMobilenetv1/outputLayer.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAZ,MAAoB,uBAApB;;AAKA,SAAS,iCAAT,CAA2C,CAA3C,EAAyD;AACvD,MAAM,GAAG,GAAG,EAAE,CAAC,OAAH,CAAW,EAAE,CAAC,SAAH,CAAa,CAAb,EAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAAX,CAAZ;AAEA,MAAM,KAAK,GAAG,CACZ,EAAE,CAAC,GAAH,CAAO,GAAG,CAAC,CAAD,CAAV,EAAe,GAAG,CAAC,CAAD,CAAlB,CADY,EAEZ,EAAE,CAAC,GAAH,CAAO,GAAG,CAAC,CAAD,CAAV,EAAe,GAAG,CAAC,CAAD,CAAlB,CAFY,CAAd;AAKA,MAAM,OAAO,GAAG,CACd,EAAE,CAAC,GAAH,CAAO,GAAG,CAAC,CAAD,CAAV,EAAe,EAAE,CAAC,GAAH,CAAO,KAAK,CAAC,CAAD,CAAZ,EAAiB,EAAE,CAAC,MAAH,CAAU,CAAV,CAAjB,CAAf,CADc,EAEd,EAAE,CAAC,GAAH,CAAO,GAAG,CAAC,CAAD,CAAV,EAAe,EAAE,CAAC,GAAH,CAAO,KAAK,CAAC,CAAD,CAAZ,EAAiB,EAAE,CAAC,MAAH,CAAU,CAAV,CAAjB,CAAf,CAFc,CAAhB;AAKA,SAAO;AACL,IAAA,KAAK,EAAA,KADA;AAEL,IAAA,OAAO,EAAA;AAFF,GAAP;AAID;;AAED,SAAS,gBAAT,CAA0B,EAA1B,EAA2C,EAA3C,EAA0D;AAClD,MAAA,EAAA,GAAA,iCAAA,CAAA,EAAA,CAAA;AAAA,MACJ,KAAA,GAAA,EAAA,CAAA,KADI;AAAA,MAEJ,OAAA,GAAA,EAAA,CAAA,OAFI;;AAKN,MAAM,GAAG,GAAG,EAAE,CAAC,OAAH,CAAW,EAAE,CAAC,SAAH,CAAa,EAAb,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,CAAX,CAAZ;AAEA,MAAM,QAAQ,GAAG,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,GAAH,CAAO,GAAG,CAAC,CAAD,CAAV,EAAe,EAAE,CAAC,MAAH,CAAU,CAAV,CAAf,CAAP,CAAP,EAA6C,KAAK,CAAC,CAAD,CAAlD,CAAP,EAA+D,EAAE,CAAC,MAAH,CAAU,CAAV,CAA/D,CAAjB;AACA,MAAM,QAAQ,GAAG,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,GAAH,CAAO,GAAG,CAAC,CAAD,CAAV,EAAe,EAAE,CAAC,MAAH,CAAU,EAAV,CAAf,CAAP,EAAsC,KAAK,CAAC,CAAD,CAA3C,CAAP,EAAwD,OAAO,CAAC,CAAD,CAA/D,CAAjB;AAEA,MAAM,QAAQ,GAAG,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,GAAH,CAAO,GAAG,CAAC,CAAD,CAAV,EAAe,EAAE,CAAC,MAAH,CAAU,CAAV,CAAf,CAAP,CAAP,EAA6C,KAAK,CAAC,CAAD,CAAlD,CAAP,EAA+D,EAAE,CAAC,MAAH,CAAU,CAAV,CAA/D,CAAjB;AACA,MAAM,QAAQ,GAAG,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,GAAH,CAAO,GAAG,CAAC,CAAD,CAAV,EAAe,EAAE,CAAC,MAAH,CAAU,EAAV,CAAf,CAAP,EAAsC,KAAK,CAAC,CAAD,CAA3C,CAAP,EAAwD,OAAO,CAAC,CAAD,CAA/D,CAAjB;AAEA,SAAO,EAAE,CAAC,SAAH,CACL,EAAE,CAAC,KAAH,CAAS,CACP,EAAE,CAAC,GAAH,CAAO,QAAP,EAAiB,QAAjB,CADO,EAEP,EAAE,CAAC,GAAH,CAAO,QAAP,EAAiB,QAAjB,CAFO,EAGP,EAAE,CAAC,GAAH,CAAO,QAAP,EAAiB,QAAjB,CAHO,EAIP,EAAE,CAAC,GAAH,CAAO,QAAP,EAAiB,QAAjB,CAJO,CAAT,CADK,EAOL,CAAC,CAAD,EAAI,CAAJ,CAPK,CAAP;AASD;;AAED,OAAM,SAAU,WAAV,CACJ,cADI,EAEJ,gBAFI,EAGJ,MAHI,EAGqB;AAEzB,SAAO,EAAE,CAAC,IAAH,CAAQ,YAAA;AAEb,QAAM,SAAS,GAAG,cAAc,CAAC,KAAf,CAAqB,CAArB,CAAlB;AAEA,QAAI,KAAK,GAAG,gBAAgB,CAC1B,EAAE,CAAC,OAAH,CAAW,EAAE,CAAC,IAAH,CAAQ,MAAM,CAAC,SAAf,EAA0B,CAAC,SAAD,EAAY,CAAZ,EAAe,CAAf,CAA1B,CAAX,EAAyD,CAAC,CAAC,CAAF,EAAK,CAAL,CAAzD,CAD0B,EAE1B,EAAE,CAAC,OAAH,CAAW,cAAX,EAA2B,CAAC,CAAC,CAAF,EAAK,CAAL,CAA3B,CAF0B,CAA5B;AAIA,IAAA,KAAK,GAAG,EAAE,CAAC,OAAH,CACN,KADM,EAEN,CAAC,SAAD,EAAa,KAAK,CAAC,KAAN,CAAY,CAAZ,IAAiB,SAA9B,EAA0C,CAA1C,CAFM,CAAR;AAKA,QAAM,gBAAgB,GAAG,EAAE,CAAC,OAAH,CAAW,EAAE,CAAC,KAAH,CAAS,gBAAT,EAA2B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA3B,EAAsC,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,CAAtC,CAAX,CAAzB;AACA,QAAI,MAAM,GAAG,EAAE,CAAC,KAAH,CAAS,gBAAT,EAA2B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA3B,EAAsC,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAT,CAAtC,CAAb;AAEA,IAAA,MAAM,GAAG,EAAE,CAAC,OAAH,CACP,MADO,EAEP,CAAC,SAAD,EAAY,MAAM,CAAC,KAAP,CAAa,CAAb,CAAZ,CAFO,CAAT;AAKA,QAAM,YAAY,GAAG,EAAE,CAAC,OAAH,CAAW,KAAX,CAArB;AACA,QAAM,aAAa,GAAG,EAAE,CAAC,OAAH,CAAW,MAAX,CAAtB;AAEA,WAAO;AACL,MAAA,KAAK,EAAE,YADF;AAEL,MAAA,MAAM,EAAE;AAFH,KAAP;AAKD,GA7BM,CAAP;AA8BD","sourceRoot":"","sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nfunction getCenterCoordinatesAndSizesLayer(x) {\r\n    var vec = tf.unstack(tf.transpose(x, [1, 0]));\r\n    var sizes = [\r\n        tf.sub(vec[2], vec[0]),\r\n        tf.sub(vec[3], vec[1])\r\n    ];\r\n    var centers = [\r\n        tf.add(vec[0], tf.div(sizes[0], tf.scalar(2))),\r\n        tf.add(vec[1], tf.div(sizes[1], tf.scalar(2)))\r\n    ];\r\n    return {\r\n        sizes: sizes,\r\n        centers: centers\r\n    };\r\n}\r\nfunction decodeBoxesLayer(x0, x1) {\r\n    var _a = getCenterCoordinatesAndSizesLayer(x0), sizes = _a.sizes, centers = _a.centers;\r\n    var vec = tf.unstack(tf.transpose(x1, [1, 0]));\r\n    var div0_out = tf.div(tf.mul(tf.exp(tf.div(vec[2], tf.scalar(5))), sizes[0]), tf.scalar(2));\r\n    var add0_out = tf.add(tf.mul(tf.div(vec[0], tf.scalar(10)), sizes[0]), centers[0]);\r\n    var div1_out = tf.div(tf.mul(tf.exp(tf.div(vec[3], tf.scalar(5))), sizes[1]), tf.scalar(2));\r\n    var add1_out = tf.add(tf.mul(tf.div(vec[1], tf.scalar(10)), sizes[1]), centers[1]);\r\n    return tf.transpose(tf.stack([\r\n        tf.sub(add0_out, div0_out),\r\n        tf.sub(add1_out, div1_out),\r\n        tf.add(add0_out, div0_out),\r\n        tf.add(add1_out, div1_out)\r\n    ]), [1, 0]);\r\n}\r\nexport function outputLayer(boxPredictions, classPredictions, params) {\r\n    return tf.tidy(function () {\r\n        var batchSize = boxPredictions.shape[0];\r\n        var boxes = decodeBoxesLayer(tf.reshape(tf.tile(params.extra_dim, [batchSize, 1, 1]), [-1, 4]), tf.reshape(boxPredictions, [-1, 4]));\r\n        boxes = tf.reshape(boxes, [batchSize, (boxes.shape[0] / batchSize), 4]);\r\n        var scoresAndClasses = tf.sigmoid(tf.slice(classPredictions, [0, 0, 1], [-1, -1, -1]));\r\n        var scores = tf.slice(scoresAndClasses, [0, 0, 0], [-1, -1, 1]);\r\n        scores = tf.reshape(scores, [batchSize, scores.shape[1]]);\r\n        var boxesByBatch = tf.unstack(boxes);\r\n        var scoresByBatch = tf.unstack(scores);\r\n        return {\r\n            boxes: boxesByBatch,\r\n            scores: scoresByBatch\r\n        };\r\n    });\r\n}\r\n//# sourceMappingURL=outputLayer.js.map"]},"metadata":{},"sourceType":"module"}