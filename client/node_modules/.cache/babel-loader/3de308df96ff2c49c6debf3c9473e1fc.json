{"ast":null,"code":"import _regeneratorRuntime from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose as _dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\n/** @doclink Optimizer */\n\nexport var RMSPropOptimizer = /*#__PURE__*/function (_Optimizer) {\n  _inherits(RMSPropOptimizer, _Optimizer);\n\n  function RMSPropOptimizer(learningRate) {\n    var _this;\n\n    var decay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.9;\n    var momentum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;\n    var epsilon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var centered = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, RMSPropOptimizer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RMSPropOptimizer).call(this));\n    _this.learningRate = learningRate;\n    _this.decay = decay;\n    _this.momentum = momentum;\n    _this.epsilon = epsilon;\n    _this.accumulatedMeanSquares = [];\n    _this.accumulatedMoments = [];\n    _this.accumulatedMeanGrads = [];\n    _this.centered = centered;\n\n    if (epsilon == null) {\n      _this.epsilon = ENGINE.backend.epsilon();\n    }\n\n    if (learningRate == null) {\n      throw new Error(\"learningRate for RMSPropOptimizer must be defined.\");\n    }\n\n    return _this;\n  }\n\n  _createClass(RMSPropOptimizer, [{\n    key: \"applyGradients\",\n    value: function applyGradients(variableGradients) {\n      var _this2 = this;\n\n      var variableNames = Array.isArray(variableGradients) ? variableGradients.map(function (item) {\n        return item.name;\n      }) : Object.keys(variableGradients);\n      variableNames.forEach(function (name, i) {\n        var value = ENGINE.registeredVariables[name];\n        var trainable = false;\n\n        if (_this2.accumulatedMeanSquares[i] == null) {\n          _this2.accumulatedMeanSquares[i] = {\n            originalName: \"\".concat(name, \"/rms\"),\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n\n        if (_this2.accumulatedMoments[i] == null) {\n          _this2.accumulatedMoments[i] = {\n            originalName: \"\".concat(name, \"/momentum\"),\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n\n        if (_this2.accumulatedMeanGrads[i] == null && _this2.centered) {\n          _this2.accumulatedMeanGrads[i] = {\n            originalName: \"\".concat(name, \"/mg\"),\n            variable: tidy(function () {\n              return zerosLike(value).variable(trainable);\n            })\n          };\n        }\n\n        var gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n        if (gradient == null) {\n          return;\n        }\n\n        var accumulatedMeanSquare = _this2.accumulatedMeanSquares[i].variable;\n        var accumulatedMoments = _this2.accumulatedMoments[i].variable;\n        tidy(function () {\n          var newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, _this2.decay), mul(square(gradient), 1 - _this2.decay));\n\n          if (_this2.centered) {\n            var accumulatedMeanGrad = _this2.accumulatedMeanGrads[i].variable; // Centered gradient\n\n            var newAccumulatedMeanGrad = add(mul(accumulatedMeanGrad, _this2.decay), mul(gradient, 1 - _this2.decay));\n            var gradContribution = div(mul(gradient, _this2.learningRate), sqrt(sub(newAccumulatedMeanSquare, add(square(newAccumulatedMeanGrad), _this2.epsilon))));\n            var newAccumulatedMoments = add(mul(accumulatedMoments, _this2.momentum), gradContribution);\n            accumulatedMeanSquare.assign(newAccumulatedMeanSquare);\n            accumulatedMeanGrad.assign(newAccumulatedMeanGrad);\n            accumulatedMoments.assign(newAccumulatedMoments);\n            var newValue = sub(value, newAccumulatedMoments);\n            value.assign(newValue);\n          } else {\n            // Plain gradient\n            var _newAccumulatedMeanSquare = add(mul(accumulatedMeanSquare, _this2.decay), mul(square(gradient), 1 - _this2.decay));\n\n            var _newAccumulatedMoments = add(mul(accumulatedMoments, _this2.momentum), div(mul(gradient, _this2.learningRate), sqrt(add(_newAccumulatedMeanSquare, _this2.epsilon))));\n\n            accumulatedMeanSquare.assign(_newAccumulatedMeanSquare);\n            accumulatedMoments.assign(_newAccumulatedMoments);\n\n            var _newValue = sub(value, _newAccumulatedMoments);\n\n            value.assign(_newValue);\n          }\n        });\n      });\n      this.incrementIterations();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.accumulatedMeanSquares != null) {\n        _dispose(this.accumulatedMeanSquares.map(function (v) {\n          return v.variable;\n        }));\n      }\n\n      if (this.accumulatedMeanGrads != null && this.centered) {\n        _dispose(this.accumulatedMeanGrads.map(function (v) {\n          return v.variable;\n        }));\n      }\n\n      if (this.accumulatedMoments != null) {\n        _dispose(this.accumulatedMoments.map(function (v) {\n          return v.variable;\n        }));\n      }\n    }\n  }, {\n    key: \"getWeights\",\n    value: function () {\n      var _getWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var variables;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Order matters for Python compatibility.\n                variables = [].concat(_toConsumableArray(this.accumulatedMeanSquares), _toConsumableArray(this.accumulatedMoments));\n\n                if (this.centered) {\n                  variables.push.apply(variables, _toConsumableArray(this.accumulatedMeanGrads));\n                }\n\n                _context.next = 4;\n                return this.saveIterations();\n\n              case 4:\n                _context.t0 = _context.sent;\n                return _context.abrupt(\"return\", [_context.t0].concat(variables.map(function (v) {\n                  return {\n                    name: v.originalName,\n                    tensor: v.variable\n                  };\n                })));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getWeights() {\n        return _getWeights.apply(this, arguments);\n      }\n\n      return getWeights;\n    }()\n  }, {\n    key: \"setWeights\",\n    value: function () {\n      var _setWeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(weightValues) {\n        var variableCount, trainable;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.extractIterations(weightValues);\n\n              case 2:\n                weightValues = _context2.sent;\n                variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;\n                trainable = false;\n                this.accumulatedMeanSquares = weightValues.slice(0, variableCount).map(function (v) {\n                  return {\n                    originalName: v.name,\n                    variable: v.tensor.variable(trainable)\n                  };\n                });\n                this.accumulatedMoments = weightValues.slice(variableCount, variableCount * 2).map(function (v) {\n                  return {\n                    originalName: v.name,\n                    variable: v.tensor.variable(trainable)\n                  };\n                });\n\n                if (this.centered) {\n                  this.accumulatedMeanGrads = weightValues.slice(variableCount * 2, variableCount * 3).map(function (v) {\n                    return {\n                      originalName: v.name,\n                      variable: v.tensor.variable(trainable)\n                    };\n                  });\n                }\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setWeights(_x) {\n        return _setWeights.apply(this, arguments);\n      }\n\n      return setWeights;\n    }()\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        'learningRate': this.learningRate,\n        'decay': this.decay,\n        'momentum': this.momentum,\n        'epsilon': this.epsilon,\n        'centered': this.centered\n      };\n    }\n    /** @nocollapse */\n\n  }], [{\n    key: \"fromConfig\",\n    value: function fromConfig(cls, config) {\n      return new cls(config['learningRate'], config['decay'], config['momentum'], config['epsilon'], config['centered']);\n    }\n  }]);\n\n  return RMSPropOptimizer;\n}(Optimizer);\n/** @nocollapse */\n\nRMSPropOptimizer.className = 'RMSProp'; // Note: Name matters for Python compatibility.\n\nregisterClass(RMSPropOptimizer);","map":null,"metadata":{},"sourceType":"module"}