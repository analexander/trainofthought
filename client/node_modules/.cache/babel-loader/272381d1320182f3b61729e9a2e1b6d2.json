{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // Register all kernels.\n\nrequire(\"./register_all_kernels\");\n\nvar tf = require(\"@tensorflow/tfjs\");\n\nvar path = require(\"path\");\n\nvar callbacks_1 = require(\"./callbacks\");\n\nvar file_system_1 = require(\"./io/file_system\");\n\nvar nodeIo = require(\"./io/index\");\n\nvar nodejs_kernel_backend_1 = require(\"./nodejs_kernel_backend\");\n\nvar nodeVersion = require(\"./version\"); // tslint:disable-next-line:no-require-imports\n\n\nvar binary = require('node-pre-gyp');\n\nvar bindingPath = binary.find(path.resolve(path.join(__dirname, '/../package.json'))); // Check if the node native addon module exists.\n// tslint:disable-next-line:no-require-imports\n\nvar fs = require('fs');\n\nif (!fs.existsSync(bindingPath)) {\n  throw new Error(\"The Node.js native addon module (tfjs_binding.node) can not \" + \"be found at path: \" + String(bindingPath) + \". \\nPlease run command \" + \"'npm rebuild @tensorflow/tfjs-node build-addon-from-source' to \" + \"rebuild the native addon module. \\nIf you have problem with building \" + \"the addon module, please check \" + \"https://github.com/tensorflow/tfjs/blob/master/tfjs-node/\" + \"WINDOWS_TROUBLESHOOTING.md or file an issue.\");\n} // tslint:disable-next-line:no-require-imports\n\n\nvar bindings = require(bindingPath); // Merge version and io namespaces.\n\n\nexports.version = __assign({}, tf.version, {\n  'tfjs-node': nodeVersion.version\n});\nexports.io = __assign({}, tf.io, nodeIo); // Export all union package symbols\n\n__export(require(\"@tensorflow/tfjs\"));\n\n__export(require(\"./node\")); // tslint:disable-next-line:no-require-imports\n\n\nvar pjson = require('../package.json'); // Side effects for default initialization of Node backend.\n\n\ntf.registerBackend('tensorflow', function () {\n  return new nodejs_kernel_backend_1.NodeJSKernelBackend(bindings, pjson.name);\n}, 3\n/* priority */\n);\nvar success = tf.setBackend('tensorflow');\n\nif (!success) {\n  throw new Error(\"Could not initialize TensorFlow backend.\");\n} // Register the model saving and loading handlers for the 'file://' URL scheme.\n\n\ntf.io.registerLoadRouter(file_system_1.nodeFileSystemRouter);\ntf.io.registerSaveRouter(file_system_1.nodeFileSystemRouter); // Register the ProgbarLogger for Model.fit() at verbosity level 1.\n\ntf.registerCallbackConstructor(1, callbacks_1.ProgbarLogger);","map":null,"metadata":{},"sourceType":"script"}