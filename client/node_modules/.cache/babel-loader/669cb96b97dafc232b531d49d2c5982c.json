{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n  // Normalize and validate axis.\n  var $axis = util.parseAxisParam(axis, shape)[0]; // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n\n  var newShape = [1, shape[0], 1];\n\n  for (var i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n\n  newShape[1] = shape[$axis];\n\n  for (var _i = $axis + 1; _i < shape.length; _i++) {\n    newShape[2] *= shape[_i];\n  } // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n\n\n  var uniqueElements = {}; // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n\n  var indices = new Int32Array(shape[$axis]); // Create a buffer so we can easily extract value at a given location.\n\n  var inputBuffer = new TensorBuffer(newShape, dtype, values); // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n\n  var uniqueIndices = [];\n  var is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n\n  for (var _i2 = 0; _i2 < shape[$axis]; _i2++) {\n    // Extract values along the axis.\n    var element = void 0;\n\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[_i2].toString();\n    } else {\n      var axisValues = [];\n\n      for (var m = 0; m < newShape[0]; m++) {\n        for (var n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, _i2, n));\n        }\n      }\n\n      element = axisValues.join(',');\n    } // Dedup and update various indices.\n\n\n    if (uniqueElements[element] !== undefined) {\n      indices[_i2] = uniqueElements[element];\n    } else {\n      var uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[_i2] = uniqueIndex;\n      uniqueIndices.push(_i2);\n    }\n  } // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n\n\n  var outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  var outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach(function (uniqueElementIndex, i) {\n    for (var _m = 0; _m < newShape[0]; _m++) {\n      for (var _n = 0; _n < newShape[2]; _n++) {\n        outputBuffer.set(inputBuffer.get(_m, uniqueElementIndex, _n), _m, i, _n);\n      }\n    }\n  }); // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n\n  var outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n  return {\n    outputValues: outputBuffer.values,\n    outputShape: outputShape,\n    indices: indices\n  };\n}","map":null,"metadata":{},"sourceType":"module"}