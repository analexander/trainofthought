{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\n\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\"); // TODO(nsthorat, dsmilkov): Remove dependency on tensors, use dataId.\n\n\nexports.nonMaxSuppressionV4Config = {\n  kernelName: tfjs_1.NonMaxSuppressionV4,\n  backendName: 'tensorflow',\n  kernelFunc: function kernelFunc(_a) {\n    var inputs = _a.inputs,\n        backend = _a.backend,\n        attrs = _a.attrs;\n    var _b = inputs,\n        boxes = _b.boxes,\n        scores = _b.scores;\n    var _c = attrs,\n        maxOutputSize = _c.maxOutputSize,\n        iouThreshold = _c.iouThreshold,\n        scoreThreshold = _c.scoreThreshold,\n        padToMaxOutputSize = _c.padToMaxOutputSize;\n    var maxOutputSizeTensor = tfjs_1.scalar(maxOutputSize, 'int32');\n    var iouThresholdTensor = tfjs_1.scalar(iouThreshold, 'float32');\n    var scoreThresholdTensor = tfjs_1.scalar(scoreThreshold, 'float32');\n    var nodeBackend = backend;\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', boxes.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('T_threshold', 'float32'), {\n      name: 'pad_to_max_output_size',\n      type: nodeBackend.binding.TF_ATTR_BOOL,\n      value: padToMaxOutputSize\n    }];\n\n    var _d = nodeBackend.executeMultipleOutputs('NonMaxSuppressionV4', opAttrs, [boxes, scores, maxOutputSizeTensor, iouThresholdTensor, scoreThresholdTensor], 2),\n        selectedIndices = _d[0],\n        validOutputs = _d[1];\n\n    maxOutputSizeTensor.dispose();\n    iouThresholdTensor.dispose();\n    scoreThresholdTensor.dispose();\n    return [selectedIndices, validOutputs];\n  }\n};","map":null,"metadata":{},"sourceType":"script"}