{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropFilter, TensorBuffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropFilter(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      dy = inputs.dy;\n  var strides = attrs.strides,\n      dilations = attrs.dilations,\n      pad = attrs.pad,\n      dimRoundingMode = attrs.dimRoundingMode,\n      filterShape = attrs.filterShape;\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  var strideHeight = convInfo.strideHeight,\n      strideWidth = convInfo.strideWidth,\n      filterHeight = convInfo.filterHeight,\n      filterWidth = convInfo.filterWidth;\n  var dW = new TensorBuffer(convInfo.filterShape, 'float32');\n  var leftPad = convInfo.padInfo.left;\n  var topPad = convInfo.padInfo.top;\n  var chMul = convInfo.outChannels / convInfo.inChannels;\n  var xVals = backend.data.get(x.dataId).values;\n  var xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  var dyVals = backend.data.get(dy.dataId).values;\n  var dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (var wR = 0; wR < filterHeight; ++wR) {\n    var yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    var yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (var wC = 0; wC < filterWidth; ++wC) {\n      var yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      var yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        var d1 = Math.trunc(d2 / chMul);\n        var dm = d2 % chMul;\n        var dotProd = 0;\n\n        for (var b = 0; b < convInfo.batchSize; ++b) {\n          for (var yR = yRMin; yR < yRMax; ++yR) {\n            var xR = wR + yR * strideHeight - topPad;\n\n            for (var yC = yCMin; yC < yCMax; ++yC) {\n              var xC = wC + yC * strideWidth - leftPad;\n              dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n            }\n          }\n        }\n\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nexport var depthwiseConv2dNativeBackpropFilterConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter\n};","map":null,"metadata":{},"sourceType":"module"}