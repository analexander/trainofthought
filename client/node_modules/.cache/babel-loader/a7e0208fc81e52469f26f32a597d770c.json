{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(inShape, outShape) {\n  var inRank = inShape.length;\n  var dims = [];\n\n  for (var i = 0; i < inRank; i++) {\n    var dim = inRank - 1 - i;\n    var a = inShape[dim] || 1;\n    var b = outShape[outShape.length - 1 - i] || 1;\n\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n\n  return dims;\n}\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\n\nexport function getReductionAxes(inShape, outShape) {\n  var result = [];\n\n  for (var i = 0; i < outShape.length; i++) {\n    var inDim = inShape[inShape.length - i - 1];\n    var outAxis = outShape.length - i - 1;\n    var outDim = outShape[outAxis];\n\n    if (inDim == null || inDim === 1 && outDim > 1) {\n      result.unshift(outAxis);\n    }\n  }\n\n  return result;\n}\nexport function assertAndGetBroadcastShape(shapeA, shapeB) {\n  var result = [];\n  var l = Math.max(shapeA.length, shapeB.length);\n\n  for (var i = 0; i < l; i++) {\n    var a = shapeA[shapeA.length - i - 1];\n\n    if (a == null) {\n      a = 1;\n    }\n\n    var b = shapeB[shapeB.length - i - 1];\n\n    if (b == null) {\n      b = 1;\n    }\n\n    if (a === 1) {\n      result.unshift(b);\n    } else if (b === 1) {\n      result.unshift(a);\n    } else if (a !== b) {\n      var errMsg = \"Operands could not be broadcast together with shapes \" + \"\".concat(shapeA, \" and \").concat(shapeB, \".\");\n      throw Error(errMsg);\n    } else {\n      result.unshift(a);\n    }\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}