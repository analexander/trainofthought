{"ast":null,"code":"'use strict';\n\nvar platform = require('os').platform();\n\nvar spawnSync = require('child_process').spawnSync;\n\nvar readdirSync = require('fs').readdirSync;\n\nvar GLIBC = 'glibc';\nvar MUSL = 'musl';\nvar spawnOptions = {\n  encoding: 'utf8',\n  env: process.env\n};\n\nif (!spawnSync) {\n  spawnSync = function spawnSync() {\n    return {\n      status: 126,\n      stdout: '',\n      stderr: ''\n    };\n  };\n}\n\nfunction contains(needle) {\n  return function (haystack) {\n    return haystack.indexOf(needle) !== -1;\n  };\n}\n\nfunction versionFromMuslLdd(out) {\n  return out.split(/[\\r\\n]+/)[1].trim().split(/\\s/)[1];\n}\n\nfunction safeReaddirSync(path) {\n  try {\n    return readdirSync(path);\n  } catch (e) {}\n\n  return [];\n}\n\nvar family = '';\nvar version = '';\nvar method = '';\n\nif (platform === 'linux') {\n  // Try getconf\n  var glibc = spawnSync('getconf', ['GNU_LIBC_VERSION'], spawnOptions);\n\n  if (glibc.status === 0) {\n    family = GLIBC;\n    version = glibc.stdout.trim().split(' ')[1];\n    method = 'getconf';\n  } else {\n    // Try ldd\n    var ldd = spawnSync('ldd', ['--version'], spawnOptions);\n\n    if (ldd.status === 0 && ldd.stdout.indexOf(MUSL) !== -1) {\n      family = MUSL;\n      version = versionFromMuslLdd(ldd.stdout);\n      method = 'ldd';\n    } else if (ldd.status === 1 && ldd.stderr.indexOf(MUSL) !== -1) {\n      family = MUSL;\n      version = versionFromMuslLdd(ldd.stderr);\n      method = 'ldd';\n    } else {\n      // Try filesystem (family only)\n      var lib = safeReaddirSync('/lib');\n\n      if (lib.some(contains('-linux-gnu'))) {\n        family = GLIBC;\n        method = 'filesystem';\n      } else if (lib.some(contains('libc.musl-'))) {\n        family = MUSL;\n        method = 'filesystem';\n      } else if (lib.some(contains('ld-musl-'))) {\n        family = MUSL;\n        method = 'filesystem';\n      } else {\n        var usrSbin = safeReaddirSync('/usr/sbin');\n\n        if (usrSbin.some(contains('glibc'))) {\n          family = GLIBC;\n          method = 'filesystem';\n        }\n      }\n    }\n  }\n}\n\nvar isNonGlibcLinux = family !== '' && family !== GLIBC;\nmodule.exports = {\n  GLIBC: GLIBC,\n  MUSL: MUSL,\n  family: family,\n  version: version,\n  method: method,\n  isNonGlibcLinux: isNonGlibcLinux\n};","map":null,"metadata":{},"sourceType":"script"}