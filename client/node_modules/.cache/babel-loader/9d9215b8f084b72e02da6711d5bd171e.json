{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n\nfunction nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n  if (iouThreshold == null) {\n    iouThreshold = 0.5;\n  }\n\n  if (scoreThreshold == null) {\n    scoreThreshold = Number.NEGATIVE_INFINITY;\n  }\n\n  if (softNmsSigma == null) {\n    softNmsSigma = 0.0;\n  }\n\n  var numBoxes = boxes.shape[0];\n  maxOutputSize = Math.min(maxOutputSize, numBoxes);\n  util.assert(0 <= iouThreshold && iouThreshold <= 1, function () {\n    return \"iouThreshold must be in [0, 1], but was '\".concat(iouThreshold, \"'\");\n  });\n  util.assert(boxes.rank === 2, function () {\n    return \"boxes must be a 2D tensor, but was of rank '\".concat(boxes.rank, \"'\");\n  });\n  util.assert(boxes.shape[1] === 4, function () {\n    return \"boxes must have 4 columns, but 2nd dimension was \".concat(boxes.shape[1]);\n  });\n  util.assert(scores.rank === 1, function () {\n    return 'scores must be a 1D tensor';\n  });\n  util.assert(scores.shape[0] === numBoxes, function () {\n    return \"scores has incompatible shape with boxes. Expected \".concat(numBoxes, \", \") + \"but was \".concat(scores.shape[0]);\n  });\n  util.assert(0 <= softNmsSigma && softNmsSigma <= 1, function () {\n    return \"softNmsSigma must be in [0, 1], but was '\".concat(softNmsSigma, \"'\");\n  });\n  return {\n    maxOutputSize: maxOutputSize,\n    iouThreshold: iouThreshold,\n    scoreThreshold: scoreThreshold,\n    softNmsSigma: softNmsSigma\n  };\n}\n\nexport { nonMaxSuppSanityCheck };","map":null,"metadata":{},"sourceType":"module"}