{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { DepthwiseConv2dNativeBackpropInput } from '../kernel_names';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n\nfunction depthwiseConv2dNativeBackpropInput_(xShape, dy, filter, strides, pad) {\n  var dilations = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1];\n  var dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  var dy4D = dy;\n  var reshapedTo4D = false;\n\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n\n  var forward = function forward(backend) {\n    var convInfo = conv_util.computeConv2DInfo(xShape, filter.shape, strides, dilations, pad, dimRoundingMode, true\n    /* depthwise */\n    );\n    return backend.depthwiseConv2DDerInput(dy4D, filter, convInfo);\n  };\n\n  var inputs = {\n    dy: dy4D,\n    filter: filter\n  };\n  var attrs = {\n    strides: strides,\n    pad: pad,\n    dimRoundingMode: dimRoundingMode,\n    dilations: dilations,\n    inputShape: xShape\n  };\n  var res = ENGINE.runKernelFunc(forward, inputs, null, DepthwiseConv2dNativeBackpropInput, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport var depthwiseConv2dNativeBackpropInput = op({\n  depthwiseConv2dNativeBackpropInput_: depthwiseConv2dNativeBackpropInput_\n});","map":null,"metadata":{},"sourceType":"module"}