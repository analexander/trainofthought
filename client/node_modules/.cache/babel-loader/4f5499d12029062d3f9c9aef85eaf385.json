{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { MtcnnOptions } from '../mtcnn/MtcnnOptions';\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1';\nimport { TinyYolov2Options } from '../tinyYolov2';\nimport { detectAllFaces } from './detectFaces'; // export allFaces API for backward compatibility\n\nexport function allFacesSsdMobilenetv1(input, minConfidence) {\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          console.warn('allFacesSsdMobilenetv1 is deprecated and will be removed soon, use the high level api instead');\n          return [4\n          /*yield*/\n          , detectAllFaces(input, new SsdMobilenetv1Options(minConfidence ? {\n            minConfidence: minConfidence\n          } : {})).withFaceLandmarks().withFaceDescriptors()];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\nexport function allFacesTinyYolov2(input, forwardParams) {\n  if (forwardParams === void 0) {\n    forwardParams = {};\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          console.warn('allFacesTinyYolov2 is deprecated and will be removed soon, use the high level api instead');\n          return [4\n          /*yield*/\n          , detectAllFaces(input, new TinyYolov2Options(forwardParams)).withFaceLandmarks().withFaceDescriptors()];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\nexport function allFacesMtcnn(input, forwardParams) {\n  if (forwardParams === void 0) {\n    forwardParams = {};\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          console.warn('allFacesMtcnn is deprecated and will be removed soon, use the high level api instead');\n          return [4\n          /*yield*/\n          , detectAllFaces(input, new MtcnnOptions(forwardParams)).withFaceLandmarks().withFaceDescriptors()];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\nexport var allFaces = allFacesSsdMobilenetv1;","map":null,"metadata":{},"sourceType":"module"}