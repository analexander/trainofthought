{"ast":null,"code":"/*!\n * node-progress\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Expose `ProgressBar`.\n */\nexports = module.exports = ProgressBar;\n/**\n * Initialize a `ProgressBar` with the given `fmt` string and `options` or\n * `total`.\n *\n * Options:\n *\n *   - `curr` current completed index\n *   - `total` total number of ticks to complete\n *   - `width` the displayed width of the progress bar defaulting to total\n *   - `stream` the output stream defaulting to stderr\n *   - `head` head character defaulting to complete character\n *   - `complete` completion character defaulting to \"=\"\n *   - `incomplete` incomplete character defaulting to \"-\"\n *   - `renderThrottle` minimum time between updates in milliseconds defaulting to 16\n *   - `callback` optional function to call when the progress bar completes\n *   - `clear` will clear the progress bar upon termination\n *\n * Tokens:\n *\n *   - `:bar` the progress bar itself\n *   - `:current` current tick number\n *   - `:total` total ticks\n *   - `:elapsed` time elapsed in seconds\n *   - `:percent` completion percentage\n *   - `:eta` eta in seconds\n *   - `:rate` rate of ticks per second\n *\n * @param {string} fmt\n * @param {object|number} options or total\n * @api public\n */\n\nfunction ProgressBar(fmt, options) {\n  this.stream = options.stream || process.stderr;\n\n  if (typeof options == 'number') {\n    var total = options;\n    options = {};\n    options.total = total;\n  } else {\n    options = options || {};\n    if ('string' != typeof fmt) throw new Error('format required');\n    if ('number' != typeof options.total) throw new Error('total required');\n  }\n\n  this.fmt = fmt;\n  this.curr = options.curr || 0;\n  this.total = options.total;\n  this.width = options.width || this.total;\n  this.clear = options.clear;\n  this.chars = {\n    complete: options.complete || '=',\n    incomplete: options.incomplete || '-',\n    head: options.head || options.complete || '='\n  };\n  this.renderThrottle = options.renderThrottle !== 0 ? options.renderThrottle || 16 : 0;\n  this.lastRender = -Infinity;\n\n  this.callback = options.callback || function () {};\n\n  this.tokens = {};\n  this.lastDraw = '';\n}\n/**\n * \"tick\" the progress bar with optional `len` and optional `tokens`.\n *\n * @param {number|object} len or tokens\n * @param {object} tokens\n * @api public\n */\n\n\nProgressBar.prototype.tick = function (len, tokens) {\n  if (len !== 0) len = len || 1; // swap tokens\n\n  if ('object' == typeof len) tokens = len, len = 1;\n  if (tokens) this.tokens = tokens; // start time for eta\n\n  if (0 == this.curr) this.start = new Date();\n  this.curr += len; // try to render\n\n  this.render(); // progress complete\n\n  if (this.curr >= this.total) {\n    this.render(undefined, true);\n    this.complete = true;\n    this.terminate();\n    this.callback(this);\n    return;\n  }\n};\n/**\n * Method to render the progress bar with optional `tokens` to place in the\n * progress bar's `fmt` field.\n *\n * @param {object} tokens\n * @api public\n */\n\n\nProgressBar.prototype.render = function (tokens, force) {\n  force = force !== undefined ? force : false;\n  if (tokens) this.tokens = tokens;\n  if (!this.stream.isTTY) return;\n  var now = Date.now();\n  var delta = now - this.lastRender;\n\n  if (!force && delta < this.renderThrottle) {\n    return;\n  } else {\n    this.lastRender = now;\n  }\n\n  var ratio = this.curr / this.total;\n  ratio = Math.min(Math.max(ratio, 0), 1);\n  var percent = Math.floor(ratio * 100);\n  var incomplete, complete, completeLength;\n  var elapsed = new Date() - this.start;\n  var eta = percent == 100 ? 0 : elapsed * (this.total / this.curr - 1);\n  var rate = this.curr / (elapsed / 1000);\n  /* populate the bar template with percentages and timestamps */\n\n  var str = this.fmt.replace(':current', this.curr).replace(':total', this.total).replace(':elapsed', isNaN(elapsed) ? '0.0' : (elapsed / 1000).toFixed(1)).replace(':eta', isNaN(eta) || !isFinite(eta) ? '0.0' : (eta / 1000).toFixed(1)).replace(':percent', percent.toFixed(0) + '%').replace(':rate', Math.round(rate));\n  /* compute the available space (non-zero) for the bar */\n\n  var availableSpace = Math.max(0, this.stream.columns - str.replace(':bar', '').length);\n\n  if (availableSpace && process.platform === 'win32') {\n    availableSpace = availableSpace - 1;\n  }\n\n  var width = Math.min(this.width, availableSpace);\n  /* TODO: the following assumes the user has one ':bar' token */\n\n  completeLength = Math.round(width * ratio);\n  complete = Array(Math.max(0, completeLength + 1)).join(this.chars.complete);\n  incomplete = Array(Math.max(0, width - completeLength + 1)).join(this.chars.incomplete);\n  /* add head to the complete string */\n\n  if (completeLength > 0) complete = complete.slice(0, -1) + this.chars.head;\n  /* fill in the actual progress bar */\n\n  str = str.replace(':bar', complete + incomplete);\n  /* replace the extra tokens */\n\n  if (this.tokens) for (var key in this.tokens) {\n    str = str.replace(':' + key, this.tokens[key]);\n  }\n\n  if (this.lastDraw !== str) {\n    this.stream.cursorTo(0);\n    this.stream.write(str);\n    this.stream.clearLine(1);\n    this.lastDraw = str;\n  }\n};\n/**\n * \"update\" the progress bar to represent an exact percentage.\n * The ratio (between 0 and 1) specified will be multiplied by `total` and\n * floored, representing the closest available \"tick.\" For example, if a\n * progress bar has a length of 3 and `update(0.5)` is called, the progress\n * will be set to 1.\n *\n * A ratio of 0.5 will attempt to set the progress to halfway.\n *\n * @param {number} ratio The ratio (between 0 and 1 inclusive) to set the\n *   overall completion to.\n * @api public\n */\n\n\nProgressBar.prototype.update = function (ratio, tokens) {\n  var goal = Math.floor(ratio * this.total);\n  var delta = goal - this.curr;\n  this.tick(delta, tokens);\n};\n/**\n * \"interrupt\" the progress bar and write a message above it.\n * @param {string} message The message to write.\n * @api public\n */\n\n\nProgressBar.prototype.interrupt = function (message) {\n  // clear the current line\n  this.stream.clearLine(); // move the cursor to the start of the line\n\n  this.stream.cursorTo(0); // write the message text\n\n  this.stream.write(message); // terminate the line after writing the message\n\n  this.stream.write('\\n'); // re-display the progress bar with its lastDraw\n\n  this.stream.write(this.lastDraw);\n};\n/**\n * Terminates a progress bar.\n *\n * @api public\n */\n\n\nProgressBar.prototype.terminate = function () {\n  if (this.clear) {\n    if (this.stream.clearLine) {\n      this.stream.clearLine();\n      this.stream.cursorTo(0);\n    }\n  } else {\n    this.stream.write('\\n');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}