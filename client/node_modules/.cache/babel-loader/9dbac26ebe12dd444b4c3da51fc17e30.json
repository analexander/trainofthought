{"ast":null,"code":"import _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from '../kernels/Cast';\nimport { complex } from '../kernels/Complex';\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\n\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n  if (complexImpl == null) {\n    return function (_ref) {\n      var inputs = _ref.inputs,\n          backend = _ref.backend;\n      var a = inputs.a,\n          b = inputs.b;\n      var cpuBackend = backend;\n      assertNotComplex([a, b], name);\n      var aVals = cpuBackend.data.get(a.dataId).values;\n      var bVals = cpuBackend.data.get(b.dataId).values;\n      var $dtype = dtype || a.dtype;\n\n      var _simpleImpl = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype),\n          _simpleImpl2 = _slicedToArray(_simpleImpl, 2),\n          resultData = _simpleImpl2[0],\n          resultShape = _simpleImpl2[1];\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return function (_ref2) {\n    var inputs = _ref2.inputs,\n        backend = _ref2.backend;\n    var a = inputs.a,\n        b = inputs.b;\n    var cpuBackend = backend;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      var $aComplex = cast({\n        inputs: {\n          x: a\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      var $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n      var aReal = $aComplexVals.complexTensorInfos.real;\n      var aImag = $aComplexVals.complexTensorInfos.imag;\n      var aRealVals = cpuBackend.data.get(aReal.dataId).values;\n      var aImagVals = cpuBackend.data.get(aImag.dataId).values;\n      var $bComplex = cast({\n        inputs: {\n          x: b\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      var $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n      var bReal = $bComplexVals.complexTensorInfos.real;\n      var bImag = $bComplexVals.complexTensorInfos.imag;\n      var bRealVals = cpuBackend.data.get(bReal.dataId).values;\n      var bImagVals = cpuBackend.data.get(bImag.dataId).values;\n\n      var _complexImpl = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals),\n          _complexImpl2 = _slicedToArray(_complexImpl, 3),\n          resultRealData = _complexImpl2[0],\n          resultImagData = _complexImpl2[1],\n          resultShape = _complexImpl2[2];\n\n      var resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n      var resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n      var result = complex({\n        inputs: {\n          real: resultReal,\n          imag: resultImag\n        },\n        backend: cpuBackend\n      });\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n      return result;\n    } else {\n      var aVals = cpuBackend.data.get(a.dataId).values;\n      var bVals = cpuBackend.data.get(b.dataId).values;\n      var $dtype = dtype || a.dtype;\n\n      var _simpleImpl3 = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype),\n          _simpleImpl4 = _slicedToArray(_simpleImpl3, 2),\n          resultData = _simpleImpl4[0],\n          _resultShape = _simpleImpl4[1];\n\n      return cpuBackend.makeTensorInfo(_resultShape, $dtype, resultData);\n    }\n  };\n}\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\n\nexport function createComplexBinaryKernelImpl(op) {\n  return function (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) {\n    var resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    var resultSize = util.sizeFromShape(resultShape);\n    var resultRank = resultShape.length;\n    var resultStrides = util.computeStrides(resultShape);\n    var resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    var resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n    var aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    var bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n    var aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    var bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n    var aRank = aShape.length;\n    var aStrides = util.computeStrides(aShape);\n    var bRank = bShape.length;\n    var bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (var i = 0; i < resultRealVals.length; i++) {\n        var aIdx = i % aVals.length;\n        var bIdx = i % bVals.length;\n        var result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      var _loop = function _loop(_i) {\n        var loc = util.indexToLoc(_i, resultRank, resultStrides);\n        var aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(function (d) {\n          return aLoc[d] = 0;\n        });\n        var aIndex = util.locToIndex(aLoc, aRank, aStrides);\n        var bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(function (d) {\n          return bLoc[d] = 0;\n        });\n        var bIndex = util.locToIndex(bLoc, bRank, bStrides);\n        var opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n        resultRealVals[_i] = opResult.real;\n        resultImagVals[_i] = opResult.imag;\n      };\n\n      for (var _i = 0; _i < resultRealVals.length; _i++) {\n        _loop(_i);\n      }\n    }\n\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}","map":null,"metadata":{},"sourceType":"module"}