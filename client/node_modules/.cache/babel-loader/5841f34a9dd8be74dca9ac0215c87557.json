{"ast":null,"code":"import _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// Layer activation functions\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject } from './utils/generic_utils';\n/**\n * Base class for Activations.\n *\n * Special note: due to cross-language compatibility reasons, the\n * static readonly className field in this family of classes must be set to\n * the initialLowerCamelCase name of the activation.\n */\n\nexport var Activation = /*#__PURE__*/function (_serialization$Serial) {\n  _inherits(Activation, _serialization$Serial);\n\n  function Activation() {\n    _classCallCheck(this, Activation);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Activation).apply(this, arguments));\n  }\n\n  _createClass(Activation, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {};\n    }\n  }]);\n\n  return Activation;\n}(serialization.Serializable);\n/**\n * Exponential linear unit (ELU).\n * Reference: https://arxiv.org/abs/1511.07289\n */\n\nexport var Elu = /*#__PURE__*/function (_Activation) {\n  _inherits(Elu, _Activation);\n\n  function Elu() {\n    _classCallCheck(this, Elu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Elu).apply(this, arguments));\n  }\n\n  _createClass(Elu, [{\n    key: \"apply\",\n\n    /**\n     * Calculate the activation function.\n     *\n     * @param x: Input.\n     * @param alpha: Scaling factor the negative section.\n     * @return Output of the ELU activation.\n     */\n    value: function apply(x) {\n      var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return K.elu(x, alpha);\n    }\n  }]);\n\n  return Elu;\n}(Activation);\n/** @nocollapse */\n\nElu.className = 'elu';\nserialization.registerClass(Elu);\n/**\n * Scaled Exponential Linear Unit. (Klambauer et al., 2017).\n * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515\n * Notes:\n *   - To be used together with the initialization \"lecunNormal\".\n *   - To be used together with the dropout variant \"AlphaDropout\".\n */\n\nexport var Selu = /*#__PURE__*/function (_Activation2) {\n  _inherits(Selu, _Activation2);\n\n  function Selu() {\n    _classCallCheck(this, Selu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Selu).apply(this, arguments));\n  }\n\n  _createClass(Selu, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return tfc.selu(x);\n    }\n  }]);\n\n  return Selu;\n}(Activation);\n/** @nocollapse */\n\nSelu.className = 'selu';\nserialization.registerClass(Selu);\n/**\n *  Rectified linear unit\n */\n\nexport var Relu = /*#__PURE__*/function (_Activation3) {\n  _inherits(Relu, _Activation3);\n\n  function Relu() {\n    _classCallCheck(this, Relu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Relu).apply(this, arguments));\n  }\n\n  _createClass(Relu, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return tfc.relu(x);\n    }\n  }]);\n\n  return Relu;\n}(Activation);\n/** @nocollapse */\n\nRelu.className = 'relu';\nserialization.registerClass(Relu);\n/**\n * Rectified linear unit activation maxing out at 6.0.\n */\n\nexport var Relu6 = /*#__PURE__*/function (_Activation4) {\n  _inherits(Relu6, _Activation4);\n\n  function Relu6() {\n    _classCallCheck(this, Relu6);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Relu6).apply(this, arguments));\n  }\n\n  _createClass(Relu6, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return tidy(function () {\n        return tfc.minimum(6.0, tfc.relu(x));\n      });\n    }\n  }]);\n\n  return Relu6;\n}(Activation);\n/** @nocollapse */\n\nRelu6.className = 'relu6';\nserialization.registerClass(Relu6); //* Linear activation (no-op) */\n\nexport var Linear = /*#__PURE__*/function (_Activation5) {\n  _inherits(Linear, _Activation5);\n\n  function Linear() {\n    _classCallCheck(this, Linear);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Linear).apply(this, arguments));\n  }\n\n  _createClass(Linear, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return x;\n    }\n  }]);\n\n  return Linear;\n}(Activation);\n/** @nocollapse */\n\nLinear.className = 'linear';\nserialization.registerClass(Linear);\n/**\n * Sigmoid activation function.\n */\n\nexport var Sigmoid = /*#__PURE__*/function (_Activation6) {\n  _inherits(Sigmoid, _Activation6);\n\n  function Sigmoid() {\n    _classCallCheck(this, Sigmoid);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Sigmoid).apply(this, arguments));\n  }\n\n  _createClass(Sigmoid, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return tfc.sigmoid(x);\n    }\n  }]);\n\n  return Sigmoid;\n}(Activation);\n/** @nocollapse */\n\nSigmoid.className = 'sigmoid';\nserialization.registerClass(Sigmoid);\n/**\n * Segment-wise linear approximation of sigmoid.\n */\n\nexport var HardSigmoid = /*#__PURE__*/function (_Activation7) {\n  _inherits(HardSigmoid, _Activation7);\n\n  function HardSigmoid() {\n    _classCallCheck(this, HardSigmoid);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HardSigmoid).apply(this, arguments));\n  }\n\n  _createClass(HardSigmoid, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return K.hardSigmoid(x);\n    }\n  }]);\n\n  return HardSigmoid;\n}(Activation);\n/** @nocollapse */\n\nHardSigmoid.className = 'hardSigmoid';\nserialization.registerClass(HardSigmoid);\n/**\n * Softplus activation function.\n */\n\nexport var Softplus = /*#__PURE__*/function (_Activation8) {\n  _inherits(Softplus, _Activation8);\n\n  function Softplus() {\n    _classCallCheck(this, Softplus);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Softplus).apply(this, arguments));\n  }\n\n  _createClass(Softplus, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return tfc.softplus(x);\n    }\n  }]);\n\n  return Softplus;\n}(Activation);\n/** @nocollapse */\n\nSoftplus.className = 'softplus';\nserialization.registerClass(Softplus);\n/**\n * Softsign activation function.\n */\n\nexport var Softsign = /*#__PURE__*/function (_Activation9) {\n  _inherits(Softsign, _Activation9);\n\n  function Softsign() {\n    _classCallCheck(this, Softsign);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Softsign).apply(this, arguments));\n  }\n\n  _createClass(Softsign, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return K.softsign(x);\n    }\n  }]);\n\n  return Softsign;\n}(Activation);\n/** @nocollapse */\n\nSoftsign.className = 'softsign';\nserialization.registerClass(Softsign);\n/**\n * Hyperbolic tangent function.\n */\n\nexport var Tanh = /*#__PURE__*/function (_Activation10) {\n  _inherits(Tanh, _Activation10);\n\n  function Tanh() {\n    _classCallCheck(this, Tanh);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Tanh).apply(this, arguments));\n  }\n\n  _createClass(Tanh, [{\n    key: \"apply\",\n    value: function apply(x) {\n      return tfc.tanh(x);\n    }\n  }]);\n\n  return Tanh;\n}(Activation);\n/** @nocollapse */\n\nTanh.className = 'tanh';\nserialization.registerClass(Tanh);\n/**\n * Softmax activation function\n */\n\nexport var Softmax = /*#__PURE__*/function (_Activation11) {\n  _inherits(Softmax, _Activation11);\n\n  function Softmax() {\n    _classCallCheck(this, Softmax);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Softmax).apply(this, arguments));\n  }\n\n  _createClass(Softmax, [{\n    key: \"apply\",\n\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @param axis Integer, axis along which the softmax normalization is applied.\n     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n     * an error.\n     *\n     * @returns a Tensor of the same shape as x\n     *\n     * @throws ValueError: In case `dim(x) < 2`.\n     */\n    value: function apply(x) {\n      var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n      return tfc.softmax(x, axis);\n    }\n  }]);\n\n  return Softmax;\n}(Activation);\n/** @nocollapse */\n\nSoftmax.className = 'softmax';\nserialization.registerClass(Softmax);\n/**\n * Log softmax activation function\n */\n\nexport var LogSoftmax = /*#__PURE__*/function (_Activation12) {\n  _inherits(LogSoftmax, _Activation12);\n\n  function LogSoftmax() {\n    _classCallCheck(this, LogSoftmax);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LogSoftmax).apply(this, arguments));\n  }\n\n  _createClass(LogSoftmax, [{\n    key: \"apply\",\n\n    /**\n     * Calculate the activation function of log softmax:\n     * log( exp(x_i) / sum(exp(x)) )\n     *\n     * @param x Tensor.\n     * @param axis Integer, axis along which the softmax normalization is applied.\n     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n     * an error.\n     *\n     * @returns a Tensor of the same shape as x\n     *\n     * @throws ValueError: In case `dim(x) < 2`.\n     */\n    value: function apply(x) {\n      var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n      return tfc.logSoftmax(x, axis);\n    }\n  }]);\n\n  return LogSoftmax;\n}(Activation);\n/** @nocollapse */\n\nLogSoftmax.className = 'logSoftmax';\nserialization.registerClass(LogSoftmax);\n/**\n * Swish activation function\n */\n\nexport var Swish = /*#__PURE__*/function (_Activation13) {\n  _inherits(Swish, _Activation13);\n\n  function Swish() {\n    _classCallCheck(this, Swish);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Swish).apply(this, arguments));\n  }\n\n  _createClass(Swish, [{\n    key: \"apply\",\n\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @param alpha Scaling factor for the sigmoid function.\n     * @returns a Tensor of the same shape as x\n     */\n    value: function apply(x) {\n      var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      return tidy(function () {\n        return tfc.sigmoid(x.mul(alpha)).mul(x);\n      });\n    }\n  }]);\n\n  return Swish;\n}(Activation);\n/** @nocollapse */\n\nSwish.className = 'swish';\nserialization.registerClass(Swish);\nexport function serializeActivation(activation) {\n  return activation.getClassName();\n}\nexport function deserializeActivation(config) {\n  var customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'activation');\n}\nexport function getActivation(identifier) {\n  if (identifier == null) {\n    var config = {};\n    config['className'] = 'linear';\n    config['config'] = {};\n    return deserializeActivation(config);\n  }\n\n  if (typeof identifier === 'string') {\n    var _config = {};\n    _config['className'] = identifier;\n    _config['config'] = {};\n    return deserializeActivation(_config);\n  } else if (identifier instanceof Activation) {\n    return identifier;\n  } else {\n    return deserializeActivation(identifier);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}