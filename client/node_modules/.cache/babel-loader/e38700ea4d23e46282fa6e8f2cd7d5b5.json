{"ast":null,"code":"import { extractConvParamsFactory, extractSeparableConvParamsFactory, extractWeightsFactory } from '../common';\nimport { range } from '../utils';\n\nfunction extractorsFactory(extractWeights, paramMappings) {\n  var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);\n  var extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings);\n\n  function extractReductionBlockParams(channelsIn, channelsOut, mappedPrefix) {\n    var separable_conv0 = extractSeparableConvParams(channelsIn, channelsOut, mappedPrefix + \"/separable_conv0\");\n    var separable_conv1 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + \"/separable_conv1\");\n    var expansion_conv = extractConvParams(channelsIn, channelsOut, 1, mappedPrefix + \"/expansion_conv\");\n    return {\n      separable_conv0: separable_conv0,\n      separable_conv1: separable_conv1,\n      expansion_conv: expansion_conv\n    };\n  }\n\n  function extractMainBlockParams(channels, mappedPrefix) {\n    var separable_conv0 = extractSeparableConvParams(channels, channels, mappedPrefix + \"/separable_conv0\");\n    var separable_conv1 = extractSeparableConvParams(channels, channels, mappedPrefix + \"/separable_conv1\");\n    var separable_conv2 = extractSeparableConvParams(channels, channels, mappedPrefix + \"/separable_conv2\");\n    return {\n      separable_conv0: separable_conv0,\n      separable_conv1: separable_conv1,\n      separable_conv2: separable_conv2\n    };\n  }\n\n  return {\n    extractConvParams: extractConvParams,\n    extractSeparableConvParams: extractSeparableConvParams,\n    extractReductionBlockParams: extractReductionBlockParams,\n    extractMainBlockParams: extractMainBlockParams\n  };\n}\n\nexport function extractParams(weights, numMainBlocks) {\n  var paramMappings = [];\n\n  var _a = extractWeightsFactory(weights),\n      extractWeights = _a.extractWeights,\n      getRemainingWeights = _a.getRemainingWeights;\n\n  var _b = extractorsFactory(extractWeights, paramMappings),\n      extractConvParams = _b.extractConvParams,\n      extractSeparableConvParams = _b.extractSeparableConvParams,\n      extractReductionBlockParams = _b.extractReductionBlockParams,\n      extractMainBlockParams = _b.extractMainBlockParams;\n\n  var entry_flow_conv_in = extractConvParams(3, 32, 3, 'entry_flow/conv_in');\n  var entry_flow_reduction_block_0 = extractReductionBlockParams(32, 64, 'entry_flow/reduction_block_0');\n  var entry_flow_reduction_block_1 = extractReductionBlockParams(64, 128, 'entry_flow/reduction_block_1');\n  var entry_flow = {\n    conv_in: entry_flow_conv_in,\n    reduction_block_0: entry_flow_reduction_block_0,\n    reduction_block_1: entry_flow_reduction_block_1\n  };\n  var middle_flow = {};\n  range(numMainBlocks, 0, 1).forEach(function (idx) {\n    middle_flow[\"main_block_\" + idx] = extractMainBlockParams(128, \"middle_flow/main_block_\" + idx);\n  });\n  var exit_flow_reduction_block = extractReductionBlockParams(128, 256, 'exit_flow/reduction_block');\n  var exit_flow_separable_conv = extractSeparableConvParams(256, 512, 'exit_flow/separable_conv');\n  var exit_flow = {\n    reduction_block: exit_flow_reduction_block,\n    separable_conv: exit_flow_separable_conv\n  };\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\n  }\n\n  return {\n    paramMappings: paramMappings,\n    params: {\n      entry_flow: entry_flow,\n      middle_flow: middle_flow,\n      exit_flow: exit_flow\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/xception/extractParams.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { extractConvParamsFactory, extractSeparableConvParamsFactory, extractWeightsFactory } from '../common';\r\nimport { range } from '../utils';\r\nfunction extractorsFactory(extractWeights, paramMappings) {\r\n    var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);\r\n    var extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings);\r\n    function extractReductionBlockParams(channelsIn, channelsOut, mappedPrefix) {\r\n        var separable_conv0 = extractSeparableConvParams(channelsIn, channelsOut, mappedPrefix + \"/separable_conv0\");\r\n        var separable_conv1 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + \"/separable_conv1\");\r\n        var expansion_conv = extractConvParams(channelsIn, channelsOut, 1, mappedPrefix + \"/expansion_conv\");\r\n        return { separable_conv0: separable_conv0, separable_conv1: separable_conv1, expansion_conv: expansion_conv };\r\n    }\r\n    function extractMainBlockParams(channels, mappedPrefix) {\r\n        var separable_conv0 = extractSeparableConvParams(channels, channels, mappedPrefix + \"/separable_conv0\");\r\n        var separable_conv1 = extractSeparableConvParams(channels, channels, mappedPrefix + \"/separable_conv1\");\r\n        var separable_conv2 = extractSeparableConvParams(channels, channels, mappedPrefix + \"/separable_conv2\");\r\n        return { separable_conv0: separable_conv0, separable_conv1: separable_conv1, separable_conv2: separable_conv2 };\r\n    }\r\n    return {\r\n        extractConvParams: extractConvParams,\r\n        extractSeparableConvParams: extractSeparableConvParams,\r\n        extractReductionBlockParams: extractReductionBlockParams,\r\n        extractMainBlockParams: extractMainBlockParams\r\n    };\r\n}\r\nexport function extractParams(weights, numMainBlocks) {\r\n    var paramMappings = [];\r\n    var _a = extractWeightsFactory(weights), extractWeights = _a.extractWeights, getRemainingWeights = _a.getRemainingWeights;\r\n    var _b = extractorsFactory(extractWeights, paramMappings), extractConvParams = _b.extractConvParams, extractSeparableConvParams = _b.extractSeparableConvParams, extractReductionBlockParams = _b.extractReductionBlockParams, extractMainBlockParams = _b.extractMainBlockParams;\r\n    var entry_flow_conv_in = extractConvParams(3, 32, 3, 'entry_flow/conv_in');\r\n    var entry_flow_reduction_block_0 = extractReductionBlockParams(32, 64, 'entry_flow/reduction_block_0');\r\n    var entry_flow_reduction_block_1 = extractReductionBlockParams(64, 128, 'entry_flow/reduction_block_1');\r\n    var entry_flow = {\r\n        conv_in: entry_flow_conv_in,\r\n        reduction_block_0: entry_flow_reduction_block_0,\r\n        reduction_block_1: entry_flow_reduction_block_1\r\n    };\r\n    var middle_flow = {};\r\n    range(numMainBlocks, 0, 1).forEach(function (idx) {\r\n        middle_flow[\"main_block_\" + idx] = extractMainBlockParams(128, \"middle_flow/main_block_\" + idx);\r\n    });\r\n    var exit_flow_reduction_block = extractReductionBlockParams(128, 256, 'exit_flow/reduction_block');\r\n    var exit_flow_separable_conv = extractSeparableConvParams(256, 512, 'exit_flow/separable_conv');\r\n    var exit_flow = {\r\n        reduction_block: exit_flow_reduction_block,\r\n        separable_conv: exit_flow_separable_conv\r\n    };\r\n    if (getRemainingWeights().length !== 0) {\r\n        throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\r\n    }\r\n    return {\r\n        paramMappings: paramMappings,\r\n        params: { entry_flow: entry_flow, middle_flow: middle_flow, exit_flow: exit_flow }\r\n    };\r\n}\r\n//# sourceMappingURL=extractParams.js.map"]},"metadata":{},"sourceType":"module"}