{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { MaxPoolBackprop } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\n/**\n * Computes the backprop of a 2D max pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The original input image, of rank 4, of shape\n *     [batchSize, height, width, channels].\n * @param output The original output image, of rank 4, of shape\n *     [batchSize, outHeight, outWidth, channels].\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. The\n *     rounding mode used when computing output dimensions if pad is a\n *     number. If none is provided, it will not round and error if the output\n *     is of fractional size.\n */\n\nfunction maxPoolBackprop_(dy, input, output, filterSize, strides, pad, dimRoundingMode) {\n  var $dy = convertToTensor(dy, 'dy', 'maxPoolBackprop');\n  var $input = convertToTensor(input, 'input', 'maxPoolBackprop');\n  var $output = convertToTensor(output, 'output', 'maxPoolBackprop');\n  util.assert($input.rank === $dy.rank, function () {\n    return \"Rank of input (\".concat($input.rank, \") does not match rank of dy \") + \"(\".concat($dy.rank, \")\");\n  });\n  util.assert($dy.rank === 4, function () {\n    return \"Error in maxPoolBackprop: dy must be rank 4 but got rank \" + \"\".concat($dy.rank, \".\");\n  });\n  util.assert($input.rank === 4, function () {\n    return \"Error in maxPoolBackprop: input must be rank 4 but got rank \" + \"\".concat($input.rank, \".\");\n  });\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), function () {\n      return \"Error in maxPoolBackprop: pad must be an integer when using, \" + \"dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\");\n    });\n  }\n\n  var forward = function forward(backend) {\n    var convInfo = conv_util.computePool2DInfo($input.shape, filterSize, strides, 1\n    /* dilations */\n    , pad, dimRoundingMode);\n    return backend.maxPoolBackprop($dy, $input, $output, convInfo);\n  };\n\n  var inputs = {\n    dy: $dy,\n    input: $input,\n    output: $output\n  };\n  var attrs = {\n    filterSize: filterSize,\n    strides: strides,\n    pad: pad,\n    dimRoundingMode: dimRoundingMode\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null, MaxPoolBackprop, attrs);\n}\n\nexport var maxPoolBackprop = op({\n  maxPoolBackprop_: maxPoolBackprop_\n});","map":null,"metadata":{},"sourceType":"module"}