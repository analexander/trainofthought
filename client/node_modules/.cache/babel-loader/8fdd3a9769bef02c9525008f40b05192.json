{"ast":null,"code":"import _regeneratorRuntime from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\nimport { assert } from '../util';\nimport { IORouterRegistry } from './router_registry';\nvar URL_SCHEME_SUFFIX = '://';\nexport var ModelStoreManagerRegistry = /*#__PURE__*/function () {\n  function ModelStoreManagerRegistry() {\n    _classCallCheck(this, ModelStoreManagerRegistry);\n\n    this.managers = {};\n  }\n\n  _createClass(ModelStoreManagerRegistry, null, [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (ModelStoreManagerRegistry.instance == null) {\n        ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n      }\n\n      return ModelStoreManagerRegistry.instance;\n    }\n    /**\n     * Register a save-handler router.\n     *\n     * @param saveRouter A function that maps a URL-like string onto an instance\n     * of `IOHandler` with the `save` method defined or `null`.\n     */\n\n  }, {\n    key: \"registerManager\",\n    value: function registerManager(scheme, manager) {\n      assert(scheme != null, function () {\n        return 'scheme must not be undefined or null.';\n      });\n\n      if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n        scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n      }\n\n      assert(scheme.length > 0, function () {\n        return 'scheme must not be an empty string.';\n      });\n      var registry = ModelStoreManagerRegistry.getInstance();\n      assert(registry.managers[scheme] == null, function () {\n        return \"A model store manager is already registered for scheme '\".concat(scheme, \"'.\");\n      });\n      registry.managers[scheme] = manager;\n    }\n  }, {\n    key: \"getManager\",\n    value: function getManager(scheme) {\n      var manager = this.getInstance().managers[scheme];\n\n      if (manager == null) {\n        throw new Error(\"Cannot find model manager for scheme '\".concat(scheme, \"'\"));\n      }\n\n      return manager;\n    }\n  }, {\n    key: \"getSchemes\",\n    value: function getSchemes() {\n      return Object.keys(this.getInstance().managers);\n    }\n  }]);\n\n  return ModelStoreManagerRegistry;\n}();\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\n\nfunction parseURL(url) {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(\"The url string provided does not contain a scheme. \" + \"Supported schemes are: \" + \"\".concat(ModelStoreManagerRegistry.getSchemes().join(',')));\n  }\n\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1]\n  };\n}\n\nfunction cloneModelInternal(_x, _x2) {\n  return _cloneModelInternal.apply(this, arguments);\n}\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\n\nfunction _cloneModelInternal() {\n  _cloneModelInternal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sourceURL, destURL) {\n    var deleteSource,\n        loadHandlers,\n        loadHandler,\n        saveHandlers,\n        saveHandler,\n        sourceScheme,\n        sourcePath,\n        sameMedium,\n        modelArtifacts,\n        saveResult,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            deleteSource = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;\n            assert(sourceURL !== destURL, function () {\n              return \"Old path and new path are the same: '\".concat(sourceURL, \"'\");\n            });\n            loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n            assert(loadHandlers.length > 0, function () {\n              return \"Copying failed because no load handler is found for source URL \".concat(sourceURL, \".\");\n            });\n            assert(loadHandlers.length < 2, function () {\n              return \"Copying failed because more than one (\".concat(loadHandlers.length, \") \") + \"load handlers for source URL \".concat(sourceURL, \".\");\n            });\n            loadHandler = loadHandlers[0];\n            saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n            assert(saveHandlers.length > 0, function () {\n              return \"Copying failed because no save handler is found for destination \" + \"URL \".concat(destURL, \".\");\n            });\n            assert(saveHandlers.length < 2, function () {\n              return \"Copying failed because more than one (\".concat(loadHandlers.length, \") \") + \"save handlers for destination URL \".concat(destURL, \".\");\n            });\n            saveHandler = saveHandlers[0];\n            sourceScheme = parseURL(sourceURL).scheme;\n            sourcePath = parseURL(sourceURL).path;\n            sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n            _context.next = 15;\n            return loadHandler.load();\n\n          case 15:\n            modelArtifacts = _context.sent;\n\n            if (!(deleteSource && sameMedium)) {\n              _context.next = 19;\n              break;\n            }\n\n            _context.next = 19;\n            return ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n\n          case 19:\n            _context.next = 21;\n            return saveHandler.save(modelArtifacts);\n\n          case 21:\n            saveResult = _context.sent;\n\n            if (!(deleteSource && !sameMedium)) {\n              _context.next = 25;\n              break;\n            }\n\n            _context.next = 25;\n            return ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n\n          case 25:\n            return _context.abrupt(\"return\", saveResult.modelArtifactsInfo);\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _cloneModelInternal.apply(this, arguments);\n}\n\nfunction listModels() {\n  return _listModels.apply(this, arguments);\n}\n/**\n * Remove a model specified by URL from a reigstered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\n\nfunction _listModels() {\n  _listModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var schemes, out, _iterator, _step, scheme, schemeOut, path, url;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            schemes = ModelStoreManagerRegistry.getSchemes();\n            out = {};\n            _iterator = _createForOfIteratorHelper(schemes);\n            _context2.prev = 3;\n\n            _iterator.s();\n\n          case 5:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 13;\n              break;\n            }\n\n            scheme = _step.value;\n            _context2.next = 9;\n            return ModelStoreManagerRegistry.getManager(scheme).listModels();\n\n          case 9:\n            schemeOut = _context2.sent;\n\n            for (path in schemeOut) {\n              url = scheme + URL_SCHEME_SUFFIX + path;\n              out[url] = schemeOut[path];\n            }\n\n          case 11:\n            _context2.next = 5;\n            break;\n\n          case 13:\n            _context2.next = 18;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](3);\n\n            _iterator.e(_context2.t0);\n\n          case 18:\n            _context2.prev = 18;\n\n            _iterator.f();\n\n            return _context2.finish(18);\n\n          case 21:\n            return _context2.abrupt(\"return\", out);\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 15, 18, 21]]);\n  }));\n  return _listModels.apply(this, arguments);\n}\n\nfunction removeModel(_x3) {\n  return _removeModel.apply(this, arguments);\n}\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\n\nfunction _removeModel() {\n  _removeModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url) {\n    var schemeAndPath, manager;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            schemeAndPath = parseURL(url);\n            manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n            return _context3.abrupt(\"return\", manager.removeModel(schemeAndPath.path));\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _removeModel.apply(this, arguments);\n}\n\nfunction copyModel(_x4, _x5) {\n  return _copyModel.apply(this, arguments);\n}\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\n\nfunction _copyModel() {\n  _copyModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(sourceURL, destURL) {\n    var deleteSource;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            deleteSource = false;\n            return _context4.abrupt(\"return\", cloneModelInternal(sourceURL, destURL, deleteSource));\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _copyModel.apply(this, arguments);\n}\n\nfunction moveModel(_x6, _x7) {\n  return _moveModel.apply(this, arguments);\n}\n\nfunction _moveModel() {\n  _moveModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(sourceURL, destURL) {\n    var deleteSource;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            deleteSource = true;\n            return _context5.abrupt(\"return\", cloneModelInternal(sourceURL, destURL, deleteSource));\n\n          case 2:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _moveModel.apply(this, arguments);\n}\n\nexport { moveModel, copyModel, removeModel, listModels };","map":null,"metadata":{},"sourceType":"module"}