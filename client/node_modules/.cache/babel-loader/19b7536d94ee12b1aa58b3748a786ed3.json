{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { batchNorm } from './batchnorm';\nimport { op } from './operation';\n/**\n * Batch normalization, strictly for 4D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\n\nfunction batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon) {\n  var $x = convertToTensor(x, 'x', 'batchNorm');\n  var $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  var $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  var $scale;\n\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n\n  var $offset;\n\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n\n  util.assert($x.rank === 4, function () {\n    return \"Error in batchNorm4D: x must be rank 4 but got rank \" + \"\".concat($x.rank, \".\");\n  });\n  util.assert($mean.rank === 4 || $mean.rank === 1, function () {\n    return \"Error in batchNorm4D: mean must be rank 4 or rank 1 but \" + \"got rank \".concat($mean.rank, \".\");\n  });\n  util.assert($variance.rank === 4 || $variance.rank === 1, function () {\n    return \"Error in batchNorm4D: variance must be rank 4 or rank 1 \" + \"but got rank \".concat($variance.rank, \".\");\n  });\n\n  if ($scale != null) {\n    util.assert($scale.rank === 4 || $scale.rank === 1, function () {\n      return \"Error in batchNorm4D: scale must be rank 4 or rank 1 \" + \"but got rank \".concat($scale.rank, \".\");\n    });\n  }\n\n  if ($offset != null) {\n    util.assert($offset.rank === 4 || $offset.rank === 1, function () {\n      return \"Error in batchNorm4D: offset must be rank 4 or rank 1 \" + \"but got rank \".concat($offset.rank, \".\");\n    });\n  }\n\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\nexport var batchNorm4d = op({\n  batchNorm4d_: batchNorm4d_\n});","map":null,"metadata":{},"sourceType":"module"}