{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { depthwiseSeparableConv } from '../common';\nimport { toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { range } from '../utils';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\n\nfunction conv(x, params, stride) {\n  return tf.add(tf.conv2d(x, params.filters, stride, 'same'), params.bias);\n}\n\nfunction reductionBlock(x, params, isActivateInput) {\n  if (isActivateInput === void 0) {\n    isActivateInput = true;\n  }\n\n  var out = isActivateInput ? tf.relu(x) : x;\n  out = depthwiseSeparableConv(out, params.separable_conv0, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\n  out = tf.maxPool(out, [3, 3], [2, 2], 'same');\n  out = tf.add(out, conv(x, params.expansion_conv, [2, 2]));\n  return out;\n}\n\nfunction mainBlock(x, params) {\n  var out = depthwiseSeparableConv(tf.relu(x), params.separable_conv0, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv2, [1, 1]);\n  out = tf.add(out, x);\n  return out;\n}\n\nvar TinyXception =\n/** @class */\nfunction (_super) {\n  __extends(TinyXception, _super);\n\n  function TinyXception(numMainBlocks) {\n    var _this = _super.call(this, 'TinyXception') || this;\n\n    _this._numMainBlocks = numMainBlocks;\n    return _this;\n  }\n\n  TinyXception.prototype.forwardInput = function (input) {\n    var _this = this;\n\n    var params = this.params;\n\n    if (!params) {\n      throw new Error('TinyXception - load model before inference');\n    }\n\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256));\n      var out = tf.relu(conv(normalized, params.entry_flow.conv_in, [2, 2]));\n      out = reductionBlock(out, params.entry_flow.reduction_block_0, false);\n      out = reductionBlock(out, params.entry_flow.reduction_block_1);\n      range(_this._numMainBlocks, 0, 1).forEach(function (idx) {\n        out = mainBlock(out, params.middle_flow[\"main_block_\" + idx]);\n      });\n      out = reductionBlock(out, params.exit_flow.reduction_block);\n      out = tf.relu(depthwiseSeparableConv(out, params.exit_flow.separable_conv, [1, 1]));\n      return out;\n    });\n  };\n\n  TinyXception.prototype.forward = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this.forwardInput;\n            return [4\n            /*yield*/\n            , toNetInput(input)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.apply(this, [_b.sent()])];\n        }\n      });\n    });\n  };\n\n  TinyXception.prototype.getDefaultModelName = function () {\n    return 'tiny_xception_model';\n  };\n\n  TinyXception.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap, this._numMainBlocks);\n  };\n\n  TinyXception.prototype.extractParams = function (weights) {\n    return extractParams(weights, this._numMainBlocks);\n  };\n\n  return TinyXception;\n}(NeuralNetwork);\n\nexport { TinyXception };","map":{"version":3,"sources":["../../../src/xception/TinyXception.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { depthwiseSeparableConv } from '../common';\r\nimport { toNetInput } from '../dom';\r\nimport { NeuralNetwork } from '../NeuralNetwork';\r\nimport { normalize } from '../ops';\r\nimport { range } from '../utils';\r\nimport { extractParams } from './extractParams';\r\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\r\nfunction conv(x, params, stride) {\r\n    return tf.add(tf.conv2d(x, params.filters, stride, 'same'), params.bias);\r\n}\r\nfunction reductionBlock(x, params, isActivateInput) {\r\n    if (isActivateInput === void 0) { isActivateInput = true; }\r\n    var out = isActivateInput ? tf.relu(x) : x;\r\n    out = depthwiseSeparableConv(out, params.separable_conv0, [1, 1]);\r\n    out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\r\n    out = tf.maxPool(out, [3, 3], [2, 2], 'same');\r\n    out = tf.add(out, conv(x, params.expansion_conv, [2, 2]));\r\n    return out;\r\n}\r\nfunction mainBlock(x, params) {\r\n    var out = depthwiseSeparableConv(tf.relu(x), params.separable_conv0, [1, 1]);\r\n    out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1]);\r\n    out = depthwiseSeparableConv(tf.relu(out), params.separable_conv2, [1, 1]);\r\n    out = tf.add(out, x);\r\n    return out;\r\n}\r\nvar TinyXception = /** @class */ (function (_super) {\r\n    __extends(TinyXception, _super);\r\n    function TinyXception(numMainBlocks) {\r\n        var _this = _super.call(this, 'TinyXception') || this;\r\n        _this._numMainBlocks = numMainBlocks;\r\n        return _this;\r\n    }\r\n    TinyXception.prototype.forwardInput = function (input) {\r\n        var _this = this;\r\n        var params = this.params;\r\n        if (!params) {\r\n            throw new Error('TinyXception - load model before inference');\r\n        }\r\n        return tf.tidy(function () {\r\n            var batchTensor = input.toBatchTensor(112, true);\r\n            var meanRgb = [122.782, 117.001, 104.298];\r\n            var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256));\r\n            var out = tf.relu(conv(normalized, params.entry_flow.conv_in, [2, 2]));\r\n            out = reductionBlock(out, params.entry_flow.reduction_block_0, false);\r\n            out = reductionBlock(out, params.entry_flow.reduction_block_1);\r\n            range(_this._numMainBlocks, 0, 1).forEach(function (idx) {\r\n                out = mainBlock(out, params.middle_flow[\"main_block_\" + idx]);\r\n            });\r\n            out = reductionBlock(out, params.exit_flow.reduction_block);\r\n            out = tf.relu(depthwiseSeparableConv(out, params.exit_flow.separable_conv, [1, 1]));\r\n            return out;\r\n        });\r\n    };\r\n    TinyXception.prototype.forward = function (input) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = this.forwardInput;\r\n                        return [4 /*yield*/, toNetInput(input)];\r\n                    case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TinyXception.prototype.getDefaultModelName = function () {\r\n        return 'tiny_xception_model';\r\n    };\r\n    TinyXception.prototype.extractParamsFromWeigthMap = function (weightMap) {\r\n        return extractParamsFromWeigthMap(weightMap, this._numMainBlocks);\r\n    };\r\n    TinyXception.prototype.extractParams = function (weights) {\r\n        return extractParams(weights, this._numMainBlocks);\r\n    };\r\n    return TinyXception;\r\n}(NeuralNetwork));\r\nexport { TinyXception };\r\n//# sourceMappingURL=TinyXception.js.map"]},"metadata":{},"sourceType":"module"}