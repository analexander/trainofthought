{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AddN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\n\nfunction addN_(tensors) {\n  util.assert(Array.isArray(tensors), function () {\n    return 'The argument passed to tf.addN() must be a list of tensors';\n  });\n  util.assert(tensors.length >= 1, function () {\n    return \"Must pass at least one tensor to tf.addN(), but got \" + \"\".concat(tensors.length);\n  });\n  var $tensors = tensors.map(function (t, i) {\n    return convertToTensor(t, \"tensors\".concat(i), 'addN');\n  });\n  var firstTensor = $tensors[0];\n  $tensors.forEach(function (t) {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error('All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n  $tensors.forEach(function (t) {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error('All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n\n  var forward = function forward(backend, save) {\n    var res = backend.addN($tensors);\n    save($tensors);\n    return res;\n  };\n\n  var inputs = $tensors;\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , AddN);\n}\n\nexport var addN = op({\n  addN_: addN_\n});","map":null,"metadata":{},"sourceType":"module"}