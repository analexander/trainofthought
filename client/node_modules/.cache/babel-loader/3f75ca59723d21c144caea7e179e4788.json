{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { MeanProgram } from '../mean_gpu';\nimport { ReduceProgram } from '../reduce_gpu'; // Returns an array of configuration objects that describe each stage of the\n// reduction.\n\nfunction getReductionStages(inShape) {\n  var stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    var outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    var windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize: windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(x, dtype, reductionType, backend) {\n  var reductionStages = getReductionStages(x.shape);\n  var result = x;\n\n  for (var i = 0; i < reductionStages.length; i++) {\n    var _reductionStages$i = reductionStages[i],\n        inSize = _reductionStages$i.inSize,\n        windowSize = _reductionStages$i.windowSize,\n        outSize = _reductionStages$i.outSize;\n    var program = void 0;\n    var previousResult = void 0;\n\n    if (reductionType === 'mean') {\n      program = i === 0 ? new MeanProgram({\n        windowSize: windowSize,\n        inSize: inSize,\n        batchSize: x.shape[0],\n        outSize: outSize\n      }, inSize) : new MeanProgram({\n        windowSize: windowSize,\n        inSize: inSize,\n        batchSize: x.shape[0],\n        outSize: outSize\n      });\n    } else {\n      program = new ReduceProgram({\n        windowSize: windowSize,\n        inSize: inSize,\n        batchSize: x.shape[0],\n        outSize: outSize\n      }, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}