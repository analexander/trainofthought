{"ast":null,"code":"import { ENGINE } from '../engine';\nimport { Min } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport * as axis_util from './axis_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the minimum value from the input.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axes`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axes` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.min().print();  // or tf.min(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.min(axis).print();  // or tf.min(x, axis)\n * ```\n *\n * @param x The input Tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\n\nfunction min_(x) {\n  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var keepDims = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var $x = convertToTensor(x, 'x', 'min');\n\n  var forward = function forward(backend, save) {\n    var origAxes = parseAxisParam(axis, $x.shape);\n    var axes = origAxes;\n    var permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n    var minInput = $x;\n\n    if (permutedAxes != null) {\n      minInput = transpose($x, permutedAxes);\n      axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n    }\n\n    var y = backend.min(minInput, axes);\n\n    if (permutedAxes != null) {\n      minInput.dispose();\n    }\n\n    var res = y;\n\n    if (keepDims) {\n      var expandedShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n      res = reshape(y, expandedShape);\n      y.dispose();\n    }\n\n    save([$x, res]);\n    return res;\n  };\n\n  var inputs = {\n    x: $x\n  };\n  var attrs = {\n    axis: axis,\n    keepDims: keepDims\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , Min, attrs);\n}\n\nexport var min = op({\n  min_: min_\n});","map":null,"metadata":{},"sourceType":"module"}