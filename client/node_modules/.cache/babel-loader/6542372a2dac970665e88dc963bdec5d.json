{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { extendWithFaceDescriptor } from '../factories/WithFaceDescriptor';\nimport { ComposableTask } from './ComposableTask';\nimport { extractAllFacesAndComputeResults, extractSingleFaceAndComputeResult } from './extractFacesAndComputeResults';\nimport { nets } from './nets';\nimport { PredictAllAgeAndGenderWithFaceAlignmentTask, PredictSingleAgeAndGenderWithFaceAlignmentTask } from './PredictAgeAndGenderTask';\nimport { PredictAllFaceExpressionsWithFaceAlignmentTask, PredictSingleFaceExpressionsWithFaceAlignmentTask } from './PredictFaceExpressionsTask';\n\nvar ComputeFaceDescriptorsTaskBase =\n/** @class */\nfunction (_super) {\n  __extends(ComputeFaceDescriptorsTaskBase, _super);\n\n  function ComputeFaceDescriptorsTaskBase(parentTask, input) {\n    var _this = _super.call(this) || this;\n\n    _this.parentTask = parentTask;\n    _this.input = input;\n    return _this;\n  }\n\n  return ComputeFaceDescriptorsTaskBase;\n}(ComposableTask);\n\nexport { ComputeFaceDescriptorsTaskBase };\n\nvar ComputeAllFaceDescriptorsTask =\n/** @class */\nfunction (_super) {\n  __extends(ComputeAllFaceDescriptorsTask, _super);\n\n  function ComputeAllFaceDescriptorsTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ComputeAllFaceDescriptorsTask.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var parentResults, descriptors;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.parentTask];\n\n          case 1:\n            parentResults = _a.sent();\n            return [4\n            /*yield*/\n            , extractAllFacesAndComputeResults(parentResults, this.input, function (faces) {\n              return Promise.all(faces.map(function (face) {\n                return nets.faceRecognitionNet.computeFaceDescriptor(face);\n              }));\n            }, null, function (parentResult) {\n              return parentResult.landmarks.align(null, {\n                useDlibAlignment: true\n              });\n            })];\n\n          case 2:\n            descriptors = _a.sent();\n            return [2\n            /*return*/\n            , descriptors.map(function (descriptor, i) {\n              return extendWithFaceDescriptor(parentResults[i], descriptor);\n            })];\n        }\n      });\n    });\n  };\n\n  ComputeAllFaceDescriptorsTask.prototype.withFaceExpressions = function () {\n    return new PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  };\n\n  ComputeAllFaceDescriptorsTask.prototype.withAgeAndGender = function () {\n    return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  };\n\n  return ComputeAllFaceDescriptorsTask;\n}(ComputeFaceDescriptorsTaskBase);\n\nexport { ComputeAllFaceDescriptorsTask };\n\nvar ComputeSingleFaceDescriptorTask =\n/** @class */\nfunction (_super) {\n  __extends(ComputeSingleFaceDescriptorTask, _super);\n\n  function ComputeSingleFaceDescriptorTask() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ComputeSingleFaceDescriptorTask.prototype.run = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var parentResult, descriptor;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.parentTask];\n\n          case 1:\n            parentResult = _a.sent();\n\n            if (!parentResult) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , extractSingleFaceAndComputeResult(parentResult, this.input, function (face) {\n              return nets.faceRecognitionNet.computeFaceDescriptor(face);\n            }, null, function (parentResult) {\n              return parentResult.landmarks.align(null, {\n                useDlibAlignment: true\n              });\n            })];\n\n          case 2:\n            descriptor = _a.sent();\n            return [2\n            /*return*/\n            , extendWithFaceDescriptor(parentResult, descriptor)];\n        }\n      });\n    });\n  };\n\n  ComputeSingleFaceDescriptorTask.prototype.withFaceExpressions = function () {\n    return new PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input);\n  };\n\n  ComputeSingleFaceDescriptorTask.prototype.withAgeAndGender = function () {\n    return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input);\n  };\n\n  return ComputeSingleFaceDescriptorTask;\n}(ComputeFaceDescriptorsTaskBase);\n\nexport { ComputeSingleFaceDescriptorTask };","map":{"version":3,"sources":["../../../src/globalApi/ComputeFaceDescriptorsTasks.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\r\nimport { extendWithFaceDescriptor } from '../factories/WithFaceDescriptor';\r\nimport { ComposableTask } from './ComposableTask';\r\nimport { extractAllFacesAndComputeResults, extractSingleFaceAndComputeResult } from './extractFacesAndComputeResults';\r\nimport { nets } from './nets';\r\nimport { PredictAllAgeAndGenderWithFaceAlignmentTask, PredictSingleAgeAndGenderWithFaceAlignmentTask, } from './PredictAgeAndGenderTask';\r\nimport { PredictAllFaceExpressionsWithFaceAlignmentTask, PredictSingleFaceExpressionsWithFaceAlignmentTask, } from './PredictFaceExpressionsTask';\r\nvar ComputeFaceDescriptorsTaskBase = /** @class */ (function (_super) {\r\n    __extends(ComputeFaceDescriptorsTaskBase, _super);\r\n    function ComputeFaceDescriptorsTaskBase(parentTask, input) {\r\n        var _this = _super.call(this) || this;\r\n        _this.parentTask = parentTask;\r\n        _this.input = input;\r\n        return _this;\r\n    }\r\n    return ComputeFaceDescriptorsTaskBase;\r\n}(ComposableTask));\r\nexport { ComputeFaceDescriptorsTaskBase };\r\nvar ComputeAllFaceDescriptorsTask = /** @class */ (function (_super) {\r\n    __extends(ComputeAllFaceDescriptorsTask, _super);\r\n    function ComputeAllFaceDescriptorsTask() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ComputeAllFaceDescriptorsTask.prototype.run = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parentResults, descriptors;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.parentTask];\r\n                    case 1:\r\n                        parentResults = _a.sent();\r\n                        return [4 /*yield*/, extractAllFacesAndComputeResults(parentResults, this.input, function (faces) { return Promise.all(faces.map(function (face) {\r\n                                return nets.faceRecognitionNet.computeFaceDescriptor(face);\r\n                            })); }, null, function (parentResult) { return parentResult.landmarks.align(null, { useDlibAlignment: true }); })];\r\n                    case 2:\r\n                        descriptors = _a.sent();\r\n                        return [2 /*return*/, descriptors.map(function (descriptor, i) { return extendWithFaceDescriptor(parentResults[i], descriptor); })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ComputeAllFaceDescriptorsTask.prototype.withFaceExpressions = function () {\r\n        return new PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input);\r\n    };\r\n    ComputeAllFaceDescriptorsTask.prototype.withAgeAndGender = function () {\r\n        return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input);\r\n    };\r\n    return ComputeAllFaceDescriptorsTask;\r\n}(ComputeFaceDescriptorsTaskBase));\r\nexport { ComputeAllFaceDescriptorsTask };\r\nvar ComputeSingleFaceDescriptorTask = /** @class */ (function (_super) {\r\n    __extends(ComputeSingleFaceDescriptorTask, _super);\r\n    function ComputeSingleFaceDescriptorTask() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ComputeSingleFaceDescriptorTask.prototype.run = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parentResult, descriptor;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.parentTask];\r\n                    case 1:\r\n                        parentResult = _a.sent();\r\n                        if (!parentResult) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        return [4 /*yield*/, extractSingleFaceAndComputeResult(parentResult, this.input, function (face) { return nets.faceRecognitionNet.computeFaceDescriptor(face); }, null, function (parentResult) { return parentResult.landmarks.align(null, { useDlibAlignment: true }); })];\r\n                    case 2:\r\n                        descriptor = _a.sent();\r\n                        return [2 /*return*/, extendWithFaceDescriptor(parentResult, descriptor)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ComputeSingleFaceDescriptorTask.prototype.withFaceExpressions = function () {\r\n        return new PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input);\r\n    };\r\n    ComputeSingleFaceDescriptorTask.prototype.withAgeAndGender = function () {\r\n        return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input);\r\n    };\r\n    return ComputeSingleFaceDescriptorTask;\r\n}(ComputeFaceDescriptorsTaskBase));\r\nexport { ComputeSingleFaceDescriptorTask };\r\n//# sourceMappingURL=ComputeFaceDescriptorsTasks.js.map"]},"metadata":{},"sourceType":"module"}