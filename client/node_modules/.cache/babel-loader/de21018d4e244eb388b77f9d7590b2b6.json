{"ast":null,"code":"'use strict';\n/**\n * Font RegExp helpers.\n */\n\nvar weights = 'bold|bolder|lighter|[1-9]00',\n    styles = 'italic|oblique',\n    variants = 'small-caps',\n    stretches = 'ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded',\n    units = 'px|pt|pc|in|cm|mm|%|em|ex|ch|rem|q',\n    string = '\\'([^\\']+)\\'|\"([^\"]+)\"|[\\\\w\\\\s-]+'; // [ [ <‘font-style’> || <font-variant-css21> || <‘font-weight’> || <‘font-stretch’> ]?\n//    <‘font-size’> [ / <‘line-height’> ]? <‘font-family’> ]\n// https://drafts.csswg.org/css-fonts-3/#font-prop\n\nvar weightRe = new RegExp('(' + weights + ') +', 'i');\nvar styleRe = new RegExp('(' + styles + ') +', 'i');\nvar variantRe = new RegExp('(' + variants + ') +', 'i');\nvar stretchRe = new RegExp('(' + stretches + ') +', 'i');\nvar sizeFamilyRe = new RegExp('([\\\\d\\\\.]+)(' + units + ') *' + '((?:' + string + ')( *, *(?:' + string + '))*)');\n/**\n * Cache font parsing.\n */\n\nvar cache = {};\nvar defaultHeight = 16; // pt, common browser default\n\n/**\n * Parse font `str`.\n *\n * @param {String} str\n * @return {Object} Parsed font. `size` is in device units. `unit` is the unit\n *   appearing in the input string.\n * @api private\n */\n\nmodule.exports = function (str) {\n  // Cached\n  if (cache[str]) return cache[str]; // Try for required properties first.\n\n  var sizeFamily = sizeFamilyRe.exec(str);\n  if (!sizeFamily) return; // invalid\n  // Default values and required properties\n\n  var font = {\n    weight: 'normal',\n    style: 'normal',\n    stretch: 'normal',\n    variant: 'normal',\n    size: parseFloat(sizeFamily[1]),\n    unit: sizeFamily[2],\n    family: sizeFamily[3].replace(/[\"']/g, '').replace(/ *, */g, ',')\n  }; // Optional, unordered properties.\n\n  var weight, style, variant, stretch; // Stop search at `sizeFamily.index`\n\n  var substr = str.substring(0, sizeFamily.index);\n  if (weight = weightRe.exec(substr)) font.weight = weight[1];\n  if (style = styleRe.exec(substr)) font.style = style[1];\n  if (variant = variantRe.exec(substr)) font.variant = variant[1];\n  if (stretch = stretchRe.exec(substr)) font.stretch = stretch[1]; // Convert to device units. (`font.unit` is the original unit)\n  // TODO: ch, ex\n\n  switch (font.unit) {\n    case 'pt':\n      font.size /= 0.75;\n      break;\n\n    case 'pc':\n      font.size *= 16;\n      break;\n\n    case 'in':\n      font.size *= 96;\n      break;\n\n    case 'cm':\n      font.size *= 96.0 / 2.54;\n      break;\n\n    case 'mm':\n      font.size *= 96.0 / 25.4;\n      break;\n\n    case '%':\n      // TODO disabled because existing unit tests assume 100\n      // font.size *= defaultHeight / 100 / 0.75\n      break;\n\n    case 'em':\n    case 'rem':\n      font.size *= defaultHeight / 0.75;\n      break;\n\n    case 'q':\n      font.size *= 96 / 25.4 / 4;\n      break;\n  }\n\n  return cache[str] = font;\n};","map":null,"metadata":{},"sourceType":"script"}