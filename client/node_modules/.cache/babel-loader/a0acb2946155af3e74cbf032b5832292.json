{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tf = require(\"@tensorflow/tfjs\");\n\nvar fs = require(\"fs\");\n\nvar path_1 = require(\"path\");\n\nvar util_1 = require(\"util\");\n\nvar io_utils_1 = require(\"./io_utils\");\n\nvar stat = util_1.promisify(fs.stat);\nvar writeFile = util_1.promisify(fs.writeFile);\nvar readFile = util_1.promisify(fs.readFile);\nvar mkdir = util_1.promisify(fs.mkdir);\n\nfunction doesNotExistHandler(name) {\n  return function (e) {\n    switch (e.code) {\n      case 'ENOENT':\n        throw new Error(name + \" \" + e.path + \" does not exist: loading failed\");\n\n      default:\n        throw e;\n    }\n  };\n}\n\nvar NodeFileSystem =\n/** @class */\nfunction () {\n  /**\n   * Constructor of the NodeFileSystem IOHandler.\n   * @param path A single path or an Array of paths.\n   *   For saving: expects a single path pointing to an existing or nonexistent\n   *     directory. If the directory does not exist, it will be\n   *     created.\n   *   For loading:\n   *     - If the model has JSON topology (e.g., `tf.Model`), a single path\n   *       pointing to the JSON file (usually named `model.json`) is expected.\n   *       The JSON file is expected to contain `modelTopology` and/or\n   *       `weightsManifest`. If `weightManifest` exists, the values of the\n   *       weights will be loaded from relative paths (relative to the directory\n   *       of `model.json`) as contained in `weightManifest`.\n   *     - If the model has binary (protocol buffer GraphDef) topology,\n   *       an Array of two paths is expected: the first path should point to the\n   *       .pb file and the second path should point to the weight manifest\n   *       JSON file.\n   */\n  function NodeFileSystem(path) {\n    this.MODEL_JSON_FILENAME = 'model.json';\n    this.WEIGHTS_BINARY_FILENAME = 'weights.bin';\n    this.MODEL_BINARY_FILENAME = 'tensorflowjs.pb';\n\n    if (Array.isArray(path)) {\n      tf.util.assert(path.length === 2, function () {\n        return 'file paths must have a length of 2, ' + (\"(actual length is \" + path.length + \").\");\n      });\n      this.path = path.map(function (p) {\n        return path_1.resolve(p);\n      });\n    } else {\n      this.path = path_1.resolve(path);\n    }\n  }\n\n  NodeFileSystem.prototype.save = function (modelArtifacts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var weightsBinPath, weightsManifest, modelJSON, modelJSONPath;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (Array.isArray(this.path)) {\n              throw new Error('Cannot perform saving to multiple paths.');\n            }\n\n            return [4\n            /*yield*/\n            , this.createOrVerifyDirectory()];\n\n          case 1:\n            _a.sent();\n\n            if (!(modelArtifacts.modelTopology instanceof ArrayBuffer)) return [3\n            /*break*/\n            , 2];\n            throw new Error('NodeFileSystem.save() does not support saving model topology ' + 'in binary format yet.');\n\n          case 2:\n            weightsBinPath = path_1.join(this.path, this.WEIGHTS_BINARY_FILENAME);\n            weightsManifest = [{\n              paths: [this.WEIGHTS_BINARY_FILENAME],\n              weights: modelArtifacts.weightSpecs\n            }];\n            modelJSON = {\n              modelTopology: modelArtifacts.modelTopology,\n              weightsManifest: weightsManifest,\n              format: modelArtifacts.format,\n              generatedBy: modelArtifacts.generatedBy,\n              convertedBy: modelArtifacts.convertedBy\n            };\n\n            if (modelArtifacts.trainingConfig != null) {\n              modelJSON.trainingConfig = modelArtifacts.trainingConfig;\n            }\n\n            if (modelArtifacts.userDefinedMetadata != null) {\n              modelJSON.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n            }\n\n            modelJSONPath = path_1.join(this.path, this.MODEL_JSON_FILENAME);\n            return [4\n            /*yield*/\n            , writeFile(modelJSONPath, JSON.stringify(modelJSON), 'utf8')];\n\n          case 3:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , writeFile(weightsBinPath, Buffer.from(modelArtifacts.weightData), 'binary')];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              // TODO(cais): Use explicit tf.io.ModelArtifactsInfo type below once it\n              // is available.\n              // tslint:disable-next-line:no-any\n              modelArtifactsInfo: io_utils_1.getModelArtifactsInfoForJSON(modelArtifacts)\n            }];\n        }\n      });\n    });\n  };\n\n  NodeFileSystem.prototype.load = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Array.isArray(this.path) ? this.loadBinaryModel() : this.loadJSONModel()];\n      });\n    });\n  };\n\n  NodeFileSystem.prototype.loadBinaryModel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var topologyPath, weightManifestPath, topology, weightManifest, modelTopology, weightsManifest, _a, _b, modelArtifacts, _c, weightSpecs, weightData;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            topologyPath = this.path[0];\n            weightManifestPath = this.path[1];\n            return [4\n            /*yield*/\n            , stat(topologyPath).catch(doesNotExistHandler('Topology Path'))];\n\n          case 1:\n            topology = _d.sent();\n            return [4\n            /*yield*/\n            , stat(weightManifestPath).catch(doesNotExistHandler('Weight Manifest Path'))];\n\n          case 2:\n            weightManifest = _d.sent(); // `this.path` can be either a directory or a file. If it is a file, assume\n            // it is model.json file.\n\n            if (!topology.isFile()) {\n              throw new Error('File specified for topology is not a file!');\n            }\n\n            if (!weightManifest.isFile()) {\n              throw new Error('File specified for the weight manifest is not a file!');\n            }\n\n            return [4\n            /*yield*/\n            , readFile(this.path[0])];\n\n          case 3:\n            modelTopology = _d.sent();\n            _b = (_a = JSON).parse;\n            return [4\n            /*yield*/\n            , readFile(this.path[1], 'utf8')];\n\n          case 4:\n            weightsManifest = _b.apply(_a, [_d.sent()]);\n            modelArtifacts = {\n              modelTopology: modelTopology\n            };\n            return [4\n            /*yield*/\n            , this.loadWeights(weightsManifest, this.path[1])];\n\n          case 5:\n            _c = _d.sent(), weightSpecs = _c[0], weightData = _c[1];\n            modelArtifacts.weightSpecs = weightSpecs;\n            modelArtifacts.weightData = weightData;\n            return [2\n            /*return*/\n            , modelArtifacts];\n        }\n      });\n    });\n  };\n\n  NodeFileSystem.prototype.loadJSONModel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, info, modelJSON, _a, _b, modelArtifacts, _c, weightSpecs, weightData;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            path = this.path;\n            return [4\n            /*yield*/\n            , stat(path).catch(doesNotExistHandler('Path'))];\n\n          case 1:\n            info = _d.sent();\n            if (!info.isFile()) return [3\n            /*break*/\n            , 5];\n            _b = (_a = JSON).parse;\n            return [4\n            /*yield*/\n            , readFile(path, 'utf8')];\n\n          case 2:\n            modelJSON = _b.apply(_a, [_d.sent()]);\n            modelArtifacts = {\n              modelTopology: modelJSON.modelTopology,\n              format: modelJSON.format,\n              generatedBy: modelJSON.generatedBy,\n              convertedBy: modelJSON.convertedBy\n            };\n            if (!(modelJSON.weightsManifest != null)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.loadWeights(modelJSON.weightsManifest, path)];\n\n          case 3:\n            _c = _d.sent(), weightSpecs = _c[0], weightData = _c[1];\n            modelArtifacts.weightSpecs = weightSpecs;\n            modelArtifacts.weightData = weightData;\n            _d.label = 4;\n\n          case 4:\n            if (modelJSON.trainingConfig != null) {\n              modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n            }\n\n            if (modelJSON.userDefinedMetadata != null) {\n              modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n            }\n\n            return [2\n            /*return*/\n            , modelArtifacts];\n\n          case 5:\n            throw new Error('The path to load from must be a file. Loading from a directory ' + 'is not supported.');\n        }\n      });\n    });\n  };\n\n  NodeFileSystem.prototype.loadWeights = function (weightsManifest, path) {\n    return __awaiter(this, void 0, void 0, function () {\n      var dirName, buffers, weightSpecs, _i, weightsManifest_1, group, _a, _b, path_2, weightFilePath, buffer;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            dirName = path_1.dirname(path);\n            buffers = [];\n            weightSpecs = [];\n            _i = 0, weightsManifest_1 = weightsManifest;\n            _c.label = 1;\n\n          case 1:\n            if (!(_i < weightsManifest_1.length)) return [3\n            /*break*/\n            , 7];\n            group = weightsManifest_1[_i];\n            _a = 0, _b = group.paths;\n            _c.label = 2;\n\n          case 2:\n            if (!(_a < _b.length)) return [3\n            /*break*/\n            , 5];\n            path_2 = _b[_a];\n            weightFilePath = path_1.join(dirName, path_2);\n            return [4\n            /*yield*/\n            , readFile(weightFilePath).catch(doesNotExistHandler('Weight file'))];\n\n          case 3:\n            buffer = _c.sent();\n            buffers.push(buffer);\n            _c.label = 4;\n\n          case 4:\n            _a++;\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            weightSpecs.push.apply(weightSpecs, group.weights);\n            _c.label = 6;\n\n          case 6:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 7:\n            return [2\n            /*return*/\n            , [weightSpecs, io_utils_1.toArrayBuffer(buffers)]];\n        }\n      });\n    });\n  };\n  /**\n   * For each item in `this.path`, creates a directory at the path or verify\n   * that the path exists as a directory.\n   */\n\n\n  NodeFileSystem.prototype.createOrVerifyDirectory = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var paths, _i, paths_1, path, e_1;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            paths = Array.isArray(this.path) ? this.path : [this.path];\n            _i = 0, paths_1 = paths;\n            _a.label = 1;\n\n          case 1:\n            if (!(_i < paths_1.length)) return [3\n            /*break*/\n            , 9];\n            path = paths_1[_i];\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 8]);\n\n            return [4\n            /*yield*/\n            , mkdir(path)];\n\n          case 3:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 4:\n            e_1 = _a.sent();\n            if (!(e_1.code === 'EEXIST')) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , stat(path)];\n\n          case 5:\n            if (_a.sent().isFile()) {\n              throw new Error(\"Path \" + path + \" exists as a file. The path must be \" + \"nonexistent or point to a directory.\");\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            throw e_1;\n\n          case 7:\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  NodeFileSystem.URL_SCHEME = 'file://';\n  return NodeFileSystem;\n}();\n\nexports.NodeFileSystem = NodeFileSystem;\n\nexports.nodeFileSystemRouter = function (url) {\n  if (Array.isArray(url)) {\n    if (url.every(function (urlElement) {\n      return urlElement.startsWith(NodeFileSystem.URL_SCHEME);\n    })) {\n      return new NodeFileSystem(url.map(function (urlElement) {\n        return urlElement.slice(NodeFileSystem.URL_SCHEME.length);\n      }));\n    } else {\n      return null;\n    }\n  } else {\n    if (url.startsWith(NodeFileSystem.URL_SCHEME)) {\n      return new NodeFileSystem(url.slice(NodeFileSystem.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n}; // Registration of `nodeFileSystemRouter` is done in index.ts.\n\n/**\n * Factory function for Node.js native file system IO Handler.\n *\n * @param path A single path or an Array of paths.\n *   For saving: expects a single path pointing to an existing or nonexistent\n *     directory. If the directory does not exist, it will be\n *     created.\n *   For loading:\n *     - If the model has JSON topology (e.g., `tf.Model`), a single path\n *       pointing to the JSON file (usually named `model.json`) is expected.\n *       The JSON file is expected to contain `modelTopology` and/or\n *       `weightsManifest`. If `weightManifest` exists, the values of the\n *       weights will be loaded from relative paths (relative to the directory\n *       of `model.json`) as contained in `weightManifest`.\n *     - If the model has binary (protocol buffer GraphDef) topology,\n *       an Array of two paths is expected: the first path should point to the\n *        .pb file and the second path should point to the weight manifest\n *       JSON file.\n */\n\n\nfunction fileSystem(path) {\n  return new NodeFileSystem(path);\n}\n\nexports.fileSystem = fileSystem;","map":null,"metadata":{},"sourceType":"script"}