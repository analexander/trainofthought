{"ast":null,"code":"'use strict';\n\nvar Progress = require('are-we-there-yet');\n\nvar Gauge = require('gauge');\n\nvar EE = require('events').EventEmitter;\n\nvar log = exports = module.exports = new EE();\n\nvar util = require('util');\n\nvar setBlocking = require('set-blocking');\n\nvar consoleControl = require('console-control-strings');\n\nsetBlocking(true);\nvar stream = process.stderr;\nObject.defineProperty(log, 'stream', {\n  set: function set(newStream) {\n    stream = newStream;\n    if (this.gauge) this.gauge.setWriteTo(stream, stream);\n  },\n  get: function get() {\n    return stream;\n  }\n}); // by default, decide based on tty-ness.\n\nvar colorEnabled;\n\nlog.useColor = function () {\n  return colorEnabled != null ? colorEnabled : stream.isTTY;\n};\n\nlog.enableColor = function () {\n  colorEnabled = true;\n  this.gauge.setTheme({\n    hasColor: colorEnabled,\n    hasUnicode: unicodeEnabled\n  });\n};\n\nlog.disableColor = function () {\n  colorEnabled = false;\n  this.gauge.setTheme({\n    hasColor: colorEnabled,\n    hasUnicode: unicodeEnabled\n  });\n}; // default level\n\n\nlog.level = 'info';\nlog.gauge = new Gauge(stream, {\n  enabled: false,\n  // no progress bars unless asked\n  theme: {\n    hasColor: log.useColor()\n  },\n  template: [{\n    type: 'progressbar',\n    length: 20\n  }, {\n    type: 'activityIndicator',\n    kerning: 1,\n    length: 1\n  }, {\n    type: 'section',\n    default: ''\n  }, ':', {\n    type: 'logline',\n    kerning: 1,\n    default: ''\n  }]\n});\nlog.tracker = new Progress.TrackerGroup(); // we track this separately as we may need to temporarily disable the\n// display of the status bar for our own loggy purposes.\n\nlog.progressEnabled = log.gauge.isEnabled();\nvar unicodeEnabled;\n\nlog.enableUnicode = function () {\n  unicodeEnabled = true;\n  this.gauge.setTheme({\n    hasColor: this.useColor(),\n    hasUnicode: unicodeEnabled\n  });\n};\n\nlog.disableUnicode = function () {\n  unicodeEnabled = false;\n  this.gauge.setTheme({\n    hasColor: this.useColor(),\n    hasUnicode: unicodeEnabled\n  });\n};\n\nlog.setGaugeThemeset = function (themes) {\n  this.gauge.setThemeset(themes);\n};\n\nlog.setGaugeTemplate = function (template) {\n  this.gauge.setTemplate(template);\n};\n\nlog.enableProgress = function () {\n  if (this.progressEnabled) return;\n  this.progressEnabled = true;\n  this.tracker.on('change', this.showProgress);\n  if (this._pause) return;\n  this.gauge.enable();\n};\n\nlog.disableProgress = function () {\n  if (!this.progressEnabled) return;\n  this.progressEnabled = false;\n  this.tracker.removeListener('change', this.showProgress);\n  this.gauge.disable();\n};\n\nvar trackerConstructors = ['newGroup', 'newItem', 'newStream'];\n\nvar mixinLog = function mixinLog(tracker) {\n  // mixin the public methods from log into the tracker\n  // (except: conflicts and one's we handle specially)\n  Object.keys(log).forEach(function (P) {\n    if (P[0] === '_') return;\n    if (trackerConstructors.filter(function (C) {\n      return C === P;\n    }).length) return;\n    if (tracker[P]) return;\n    if (typeof log[P] !== 'function') return;\n    var func = log[P];\n\n    tracker[P] = function () {\n      return func.apply(log, arguments);\n    };\n  }); // if the new tracker is a group, make sure any subtrackers get\n  // mixed in too\n\n  if (tracker instanceof Progress.TrackerGroup) {\n    trackerConstructors.forEach(function (C) {\n      var func = tracker[C];\n\n      tracker[C] = function () {\n        return mixinLog(func.apply(tracker, arguments));\n      };\n    });\n  }\n\n  return tracker;\n}; // Add tracker constructors to the top level log object\n\n\ntrackerConstructors.forEach(function (C) {\n  log[C] = function () {\n    return mixinLog(this.tracker[C].apply(this.tracker, arguments));\n  };\n});\n\nlog.clearProgress = function (cb) {\n  if (!this.progressEnabled) return cb && process.nextTick(cb);\n  this.gauge.hide(cb);\n};\n\nlog.showProgress = function (name, completed) {\n  if (!this.progressEnabled) return;\n  var values = {};\n  if (name) values.section = name;\n  var last = log.record[log.record.length - 1];\n\n  if (last) {\n    values.subsection = last.prefix;\n    var disp = log.disp[last.level] || last.level;\n\n    var logline = this._format(disp, log.style[last.level]);\n\n    if (last.prefix) logline += ' ' + this._format(last.prefix, this.prefixStyle);\n    logline += ' ' + last.message.split(/\\r?\\n/)[0];\n    values.logline = logline;\n  }\n\n  values.completed = completed || this.tracker.completed();\n  this.gauge.show(values);\n}.bind(log); // bind for use in tracker's on-change listener\n// temporarily stop emitting, but don't drop\n\n\nlog.pause = function () {\n  this._paused = true;\n  if (this.progressEnabled) this.gauge.disable();\n};\n\nlog.resume = function () {\n  if (!this._paused) return;\n  this._paused = false;\n  var b = this._buffer;\n  this._buffer = [];\n  b.forEach(function (m) {\n    this.emitLog(m);\n  }, this);\n  if (this.progressEnabled) this.gauge.enable();\n};\n\nlog._buffer = [];\nvar id = 0;\nlog.record = [];\nlog.maxRecordSize = 10000;\n\nlog.log = function (lvl, prefix, message) {\n  var l = this.levels[lvl];\n\n  if (l === undefined) {\n    return this.emit('error', new Error(util.format('Undefined log level: %j', lvl)));\n  }\n\n  var a = new Array(arguments.length - 2);\n  var stack = null;\n\n  for (var i = 2; i < arguments.length; i++) {\n    var arg = a[i - 2] = arguments[i]; // resolve stack traces to a plain string.\n\n    if (typeof arg === 'object' && arg && arg instanceof Error && arg.stack) {\n      Object.defineProperty(arg, 'stack', {\n        value: stack = arg.stack + '',\n        enumerable: true,\n        writable: true\n      });\n    }\n  }\n\n  if (stack) a.unshift(stack + '\\n');\n  message = util.format.apply(util, a);\n  var m = {\n    id: id++,\n    level: lvl,\n    prefix: String(prefix || ''),\n    message: message,\n    messageRaw: a\n  };\n  this.emit('log', m);\n  this.emit('log.' + lvl, m);\n  if (m.prefix) this.emit(m.prefix, m);\n  this.record.push(m);\n  var mrs = this.maxRecordSize;\n  var n = this.record.length - mrs;\n\n  if (n > mrs / 10) {\n    var newSize = Math.floor(mrs * 0.9);\n    this.record = this.record.slice(-1 * newSize);\n  }\n\n  this.emitLog(m);\n}.bind(log);\n\nlog.emitLog = function (m) {\n  if (this._paused) {\n    this._buffer.push(m);\n\n    return;\n  }\n\n  if (this.progressEnabled) this.gauge.pulse(m.prefix);\n  var l = this.levels[m.level];\n  if (l === undefined) return;\n  if (l < this.levels[this.level]) return;\n  if (l > 0 && !isFinite(l)) return; // If 'disp' is null or undefined, use the lvl as a default\n  // Allows: '', 0 as valid disp\n\n  var disp = log.disp[m.level] != null ? log.disp[m.level] : m.level;\n  this.clearProgress();\n  m.message.split(/\\r?\\n/).forEach(function (line) {\n    if (this.heading) {\n      this.write(this.heading, this.headingStyle);\n      this.write(' ');\n    }\n\n    this.write(disp, log.style[m.level]);\n    var p = m.prefix || '';\n    if (p) this.write(' ');\n    this.write(p, this.prefixStyle);\n    this.write(' ' + line + '\\n');\n  }, this);\n  this.showProgress();\n};\n\nlog._format = function (msg, style) {\n  if (!stream) return;\n  var output = '';\n\n  if (this.useColor()) {\n    style = style || {};\n    var settings = [];\n    if (style.fg) settings.push(style.fg);\n    if (style.bg) settings.push('bg' + style.bg[0].toUpperCase() + style.bg.slice(1));\n    if (style.bold) settings.push('bold');\n    if (style.underline) settings.push('underline');\n    if (style.inverse) settings.push('inverse');\n    if (settings.length) output += consoleControl.color(settings);\n    if (style.beep) output += consoleControl.beep();\n  }\n\n  output += msg;\n\n  if (this.useColor()) {\n    output += consoleControl.color('reset');\n  }\n\n  return output;\n};\n\nlog.write = function (msg, style) {\n  if (!stream) return;\n  stream.write(this._format(msg, style));\n};\n\nlog.addLevel = function (lvl, n, style, disp) {\n  // If 'disp' is null or undefined, use the lvl as a default\n  if (disp == null) disp = lvl;\n  this.levels[lvl] = n;\n  this.style[lvl] = style;\n\n  if (!this[lvl]) {\n    this[lvl] = function () {\n      var a = new Array(arguments.length + 1);\n      a[0] = lvl;\n\n      for (var i = 0; i < arguments.length; i++) {\n        a[i + 1] = arguments[i];\n      }\n\n      return this.log.apply(this, a);\n    }.bind(this);\n  }\n\n  this.disp[lvl] = disp;\n};\n\nlog.prefixStyle = {\n  fg: 'magenta'\n};\nlog.headingStyle = {\n  fg: 'white',\n  bg: 'black'\n};\nlog.style = {};\nlog.levels = {};\nlog.disp = {};\nlog.addLevel('silly', -Infinity, {\n  inverse: true\n}, 'sill');\nlog.addLevel('verbose', 1000, {\n  fg: 'blue',\n  bg: 'black'\n}, 'verb');\nlog.addLevel('info', 2000, {\n  fg: 'green'\n});\nlog.addLevel('timing', 2500, {\n  fg: 'green',\n  bg: 'black'\n});\nlog.addLevel('http', 3000, {\n  fg: 'green',\n  bg: 'black'\n});\nlog.addLevel('notice', 3500, {\n  fg: 'blue',\n  bg: 'black'\n});\nlog.addLevel('warn', 4000, {\n  fg: 'black',\n  bg: 'yellow'\n}, 'WARN');\nlog.addLevel('error', 5000, {\n  fg: 'red',\n  bg: 'black'\n}, 'ERR!');\nlog.addLevel('silent', Infinity); // allow 'error' prefix\n\nlog.on('error', function () {});","map":null,"metadata":{},"sourceType":"script"}