{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2D(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      filter = inputs.filter;\n  var strides = attrs.strides,\n      pad = attrs.pad,\n      dataFormat = attrs.dataFormat,\n      dilations = attrs.dilations,\n      dimRoundingMode = attrs.dimRoundingMode;\n  assertNotComplex([x, filter], 'conv2d');\n  var $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  var convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  var filterHeight = convInfo.filterHeight;\n  var filterWidth = convInfo.filterWidth;\n  var dilationHeight = convInfo.dilationHeight;\n  var dilationWidth = convInfo.dilationWidth;\n  var padLeft = convInfo.padInfo.left;\n  var padTop = convInfo.padInfo.top;\n  var isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  var y = new TensorBuffer(convInfo.outShape, x.dtype);\n  var xStrides = util.computeStrides(x.shape);\n  var filterStrides = util.computeStrides(filter.shape);\n  var xBatchStride = xStrides[0];\n  var xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  var xColStride = isChannelsLast ? xStrides[2] : 1;\n  var xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  var yBatchStride = y.strides[0];\n  var yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  var yColStride = isChannelsLast ? y.strides[2] : 1;\n  var yChannelStride = isChannelsLast ? 1 : y.strides[1];\n  var xVals = backend.data.get(x.dataId).values;\n  var wVals = backend.data.get(filter.dataId).values;\n  var yVals = y.values;\n\n  for (var b = 0; b < convInfo.batchSize; ++b) {\n    var xOffset1 = b * xBatchStride;\n    var yOffset1 = b * yBatchStride;\n\n    for (var yR = 0; yR < convInfo.outHeight; ++yR) {\n      var yOffset2 = yOffset1 + yR * yRowStride;\n      var xRCorner = yR * convInfo.strideHeight - padTop;\n\n      for (var wR = 0; wR < filterHeight; ++wR) {\n        var xR = xRCorner + wR * dilationHeight;\n\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n\n        var wOffset1 = wR * filterStrides[0];\n        var xOffset2 = xOffset1 + xR * xRowStride;\n\n        for (var yC = 0; yC < convInfo.outWidth; ++yC) {\n          var yOffset3 = yOffset2 + yC * yColStride;\n          var xCCorner = yC * convInfo.strideWidth - padLeft;\n\n          for (var wC = 0; wC < filterWidth; ++wC) {\n            var xC = xCCorner + wC * dilationWidth;\n\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n\n            var wOffset2 = wOffset1 + wC * filterStrides[1];\n            var xOffset3 = xOffset2 + xC * xColStride;\n            var wOffset3 = wOffset2;\n\n            for (var d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              var xVal = xVals[xOffset3 + d1 * xChannelStride];\n\n              for (var d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] += xVal * wVals[wOffset3 + d2];\n              }\n\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\nexport var conv2DConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D\n};","map":null,"metadata":{},"sourceType":"module"}