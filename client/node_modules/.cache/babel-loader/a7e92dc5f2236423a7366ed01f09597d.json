{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SelectV2 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assert, assertShapesMatch } from '../util';\nimport { broadcastTo } from './broadcast_to';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the elements, either `a` or `b` depending on the `condition`.\n *\n * If the condition is true, select from `a`, otherwise select from `b`.\n *\n * ```js\n * const cond = tf.tensor1d([false, false, true], 'bool');\n * const a = tf.tensor1d([1 , 2, 3]);\n * const b = tf.tensor1d([-1, -2, -3]);\n *\n * a.where(cond, b).print();\n * ```\n *\n * @param condition The input condition. Must be of dtype bool.\n * @param a If `condition` is rank 1, `a` may have a higher rank but\n *     its first dimension must match the size of `condition`.\n * @param b A tensor with the same dtype as `a` and with shape that is\n *     compatible with `a`.\n * @return A tensor with same dtype as `a` and `b`, and shape that is\n *     broadcastable from `a` and `b`.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\n\nfunction where_(condition, a, b) {\n  var $a = convertToTensor(a, 'a', 'where');\n  var $b = convertToTensor(b, 'b', 'where');\n  var $condition = convertToTensor(condition, 'condition', 'where', 'bool'); // TODO: move this logic to forward function when the broadcastTo op is\n  // implemented in WASM.\n  // Find the broadcastable shape for $a and $b.\n\n  var broadcastShape = assertAndGetBroadcastShape($a.shape, $b.shape);\n  var $broadcastedA = broadcastTo($a, broadcastShape);\n  var $broadcastedB = broadcastTo($b, broadcastShape);\n\n  if ($condition.rank === 1) {\n    // If condition rank is 1, then the first dimension must match the size of\n    // condition.\n    assert($condition.shape[0] === $a.shape[0], function () {\n      return 'The first dimension of `a` must match the size of `condition`.';\n    });\n  }\n\n  if ($condition.rank !== 1) {\n    // A must have the same shape as condition.\n    assertShapesMatch($condition.shape, $broadcastedB.shape, 'Error in where: ');\n  }\n\n  var forward = function forward(backend, save) {\n    var res = backend.select($condition, $broadcastedA, $broadcastedB);\n    save([$condition]);\n    return res;\n  };\n\n  var inputs = {\n    condition: $condition,\n    t: $broadcastedA,\n    e: $broadcastedB\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , SelectV2);\n}\n\nexport var where = op({\n  where_: where_\n});","map":null,"metadata":{},"sourceType":"module"}