{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Convert an ArrayBuffer to a Buffer.\n */\n\nfunction toBuffer(ab) {\n  var view = new Uint8Array(ab);\n  return Buffer.from(view); // copies data\n}\n\nexports.toBuffer = toBuffer;\n/**\n * Convert a Buffer or an Array of Buffers to an ArrayBuffer.\n *\n * If the input is an Array of Buffers, they will be concatenated in the\n * specified order to form the output ArrayBuffer.\n */\n\nfunction toArrayBuffer(buf) {\n  if (Array.isArray(buf)) {\n    // An Array of Buffers.\n    var totalLength = 0;\n\n    for (var _i = 0, buf_1 = buf; _i < buf_1.length; _i++) {\n      var buffer = buf_1[_i];\n      totalLength += buffer.length;\n    }\n\n    var ab = new ArrayBuffer(totalLength);\n    var view = new Uint8Array(ab);\n    var pos = 0;\n\n    for (var _a = 0, buf_2 = buf; _a < buf_2.length; _a++) {\n      var buffer = buf_2[_a];\n      pos += buffer.copy(view, pos);\n    }\n\n    return ab;\n  } else {\n    // A single Buffer. Return a copy of the underlying ArrayBuffer slice.\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n}\n\nexports.toArrayBuffer = toArrayBuffer; // TODO(cais): Use explicit tf.io.ModelArtifactsInfo return type below once it\n// is available.\n\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\n\nfunction getModelArtifactsInfoForJSON(modelArtifacts) {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : Buffer.byteLength(JSON.stringify(modelArtifacts.modelTopology), 'utf8'),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : Buffer.byteLength(JSON.stringify(modelArtifacts.weightSpecs), 'utf8'),\n    weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength\n  };\n}\n\nexports.getModelArtifactsInfoForJSON = getModelArtifactsInfoForJSON;","map":null,"metadata":{},"sourceType":"script"}