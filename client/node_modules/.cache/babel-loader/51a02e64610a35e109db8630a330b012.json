{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport var executeOp = function executeOp(node, tensorMap, context) {\n  switch (node.op) {\n    case 'ResizeBilinear':\n      {\n        var images = getParamValue('images', node, tensorMap, context);\n        var size = getParamValue('size', node, tensorMap, context);\n        var alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n        return [tfOps.image.resizeBilinear(images, [size[0], size[1]], alignCorners)];\n      }\n\n    case 'ResizeNearestNeighbor':\n      {\n        var _images = getParamValue('images', node, tensorMap, context);\n\n        var _size = getParamValue('size', node, tensorMap, context);\n\n        var _alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n\n        return [tfOps.image.resizeNearestNeighbor(_images, [_size[0], _size[1]], _alignCorners)];\n      }\n\n    case 'CropAndResize':\n      {\n        var image = getParamValue('image', node, tensorMap, context);\n        var boxes = getParamValue('boxes', node, tensorMap, context);\n        var boxInd = getParamValue('boxInd', node, tensorMap, context);\n        var cropSize = getParamValue('cropSize', node, tensorMap, context);\n        var method = getParamValue('method', node, tensorMap, context);\n        var extrapolationValue = getParamValue('extrapolationValue', node, tensorMap, context);\n        return [tfOps.image.cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)];\n      }\n\n    default:\n      throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n  }\n};\nexport var CATEGORY = 'image';","map":null,"metadata":{},"sourceType":"module"}