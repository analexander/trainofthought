{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { MPRandGauss } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a truncated normal\n * distribution.\n *\n * ```js\n * tf.truncatedNormal([2, 2]).print();\n * ```\n *\n * The generated values follow a normal distribution with specified mean and\n * standard deviation, except that values whose magnitude is more than 2\n * standard deviations from the mean are dropped and re-picked.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output tensor.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\n\nfunction truncatedNormal_(shape) {\n  var mean = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var stdDev = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var dtype = arguments.length > 3 ? arguments[3] : undefined;\n  var seed = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (dtype != null && dtype === 'bool') {\n    throw new Error(\"Unsupported data type $ { dtype }\");\n  }\n\n  var randGauss = new MPRandGauss(mean, stdDev, dtype, true\n  /* truncated */\n  , seed);\n  var res = buffer(shape, dtype);\n\n  for (var i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n\n  return res.toTensor();\n}\n\nexport var truncatedNormal = op({\n  truncatedNormal_: truncatedNormal_\n});","map":null,"metadata":{},"sourceType":"module"}