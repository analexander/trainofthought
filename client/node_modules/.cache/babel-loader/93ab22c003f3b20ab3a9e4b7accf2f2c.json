{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { extractConvParamsFactory } from '../common';\nimport { extractSeparableConvParamsFactory } from '../common/extractSeparableConvParamsFactory';\nimport { extractWeightsFactory } from '../common/extractWeightsFactory';\n\nfunction extractorsFactory(extractWeights, paramMappings) {\n  var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);\n\n  function extractBatchNormParams(size, mappedPrefix) {\n    var sub = tf.tensor1d(extractWeights(size));\n    var truediv = tf.tensor1d(extractWeights(size));\n    paramMappings.push({\n      paramPath: mappedPrefix + \"/sub\"\n    }, {\n      paramPath: mappedPrefix + \"/truediv\"\n    });\n    return {\n      sub: sub,\n      truediv: truediv\n    };\n  }\n\n  function extractConvWithBatchNormParams(channelsIn, channelsOut, mappedPrefix) {\n    var conv = extractConvParams(channelsIn, channelsOut, 3, mappedPrefix + \"/conv\");\n    var bn = extractBatchNormParams(channelsOut, mappedPrefix + \"/bn\");\n    return {\n      conv: conv,\n      bn: bn\n    };\n  }\n\n  var extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings);\n  return {\n    extractConvParams: extractConvParams,\n    extractConvWithBatchNormParams: extractConvWithBatchNormParams,\n    extractSeparableConvParams: extractSeparableConvParams\n  };\n}\n\nexport function extractParams(weights, config, boxEncodingSize, filterSizes) {\n  var _a = extractWeightsFactory(weights),\n      extractWeights = _a.extractWeights,\n      getRemainingWeights = _a.getRemainingWeights;\n\n  var paramMappings = [];\n\n  var _b = extractorsFactory(extractWeights, paramMappings),\n      extractConvParams = _b.extractConvParams,\n      extractConvWithBatchNormParams = _b.extractConvWithBatchNormParams,\n      extractSeparableConvParams = _b.extractSeparableConvParams;\n\n  var params;\n\n  if (config.withSeparableConvs) {\n    var s0 = filterSizes[0],\n        s1 = filterSizes[1],\n        s2 = filterSizes[2],\n        s3 = filterSizes[3],\n        s4 = filterSizes[4],\n        s5 = filterSizes[5],\n        s6 = filterSizes[6],\n        s7 = filterSizes[7],\n        s8 = filterSizes[8];\n    var conv0 = config.isFirstLayerConv2d ? extractConvParams(s0, s1, 3, 'conv0') : extractSeparableConvParams(s0, s1, 'conv0');\n    var conv1 = extractSeparableConvParams(s1, s2, 'conv1');\n    var conv2 = extractSeparableConvParams(s2, s3, 'conv2');\n    var conv3 = extractSeparableConvParams(s3, s4, 'conv3');\n    var conv4 = extractSeparableConvParams(s4, s5, 'conv4');\n    var conv5 = extractSeparableConvParams(s5, s6, 'conv5');\n    var conv6 = s7 ? extractSeparableConvParams(s6, s7, 'conv6') : undefined;\n    var conv7 = s8 ? extractSeparableConvParams(s7, s8, 'conv7') : undefined;\n    var conv8 = extractConvParams(s8 || s7 || s6, 5 * boxEncodingSize, 1, 'conv8');\n    params = {\n      conv0: conv0,\n      conv1: conv1,\n      conv2: conv2,\n      conv3: conv3,\n      conv4: conv4,\n      conv5: conv5,\n      conv6: conv6,\n      conv7: conv7,\n      conv8: conv8\n    };\n  } else {\n    var s0 = filterSizes[0],\n        s1 = filterSizes[1],\n        s2 = filterSizes[2],\n        s3 = filterSizes[3],\n        s4 = filterSizes[4],\n        s5 = filterSizes[5],\n        s6 = filterSizes[6],\n        s7 = filterSizes[7],\n        s8 = filterSizes[8];\n    var conv0 = extractConvWithBatchNormParams(s0, s1, 'conv0');\n    var conv1 = extractConvWithBatchNormParams(s1, s2, 'conv1');\n    var conv2 = extractConvWithBatchNormParams(s2, s3, 'conv2');\n    var conv3 = extractConvWithBatchNormParams(s3, s4, 'conv3');\n    var conv4 = extractConvWithBatchNormParams(s4, s5, 'conv4');\n    var conv5 = extractConvWithBatchNormParams(s5, s6, 'conv5');\n    var conv6 = extractConvWithBatchNormParams(s6, s7, 'conv6');\n    var conv7 = extractConvWithBatchNormParams(s7, s8, 'conv7');\n    var conv8 = extractConvParams(s8, 5 * boxEncodingSize, 1, 'conv8');\n    params = {\n      conv0: conv0,\n      conv1: conv1,\n      conv2: conv2,\n      conv3: conv3,\n      conv4: conv4,\n      conv5: conv5,\n      conv6: conv6,\n      conv7: conv7,\n      conv8: conv8\n    };\n  }\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\n  }\n\n  return {\n    params: params,\n    paramMappings: paramMappings\n  };\n}","map":{"version":3,"sources":["../../../src/tinyYolov2/extractParams.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAZ,MAAoB,uBAApB;AAEA,SAAS,wBAAT,QAAyC,WAAzC;AACA,SAAS,iCAAT,QAAkD,6CAAlD;AACA,SAAS,qBAAT,QAAsC,iCAAtC;;AAKA,SAAS,iBAAT,CAA2B,cAA3B,EAAmE,aAAnE,EAAgG;AAE9F,MAAM,iBAAiB,GAAG,wBAAwB,CAAC,cAAD,EAAiB,aAAjB,CAAlD;;AAEA,WAAS,sBAAT,CAAgC,IAAhC,EAA8C,YAA9C,EAAkE;AAEhE,QAAM,GAAG,GAAG,EAAE,CAAC,QAAH,CAAY,cAAc,CAAC,IAAD,CAA1B,CAAZ;AACA,QAAM,OAAO,GAAG,EAAE,CAAC,QAAH,CAAY,cAAc,CAAC,IAAD,CAA1B,CAAhB;AAEA,IAAA,aAAa,CAAC,IAAd,CACE;AAAE,MAAA,SAAS,EAAK,YAAY,GAAA;AAA5B,KADF,EAEE;AAAE,MAAA,SAAS,EAAK,YAAY,GAAA;AAA5B,KAFF;AAKA,WAAO;AAAE,MAAA,GAAG,EAAA,GAAL;AAAO,MAAA,OAAO,EAAA;AAAd,KAAP;AACD;;AAED,WAAS,8BAAT,CAAwC,UAAxC,EAA4D,WAA5D,EAAiF,YAAjF,EAAqG;AAEnG,QAAM,IAAI,GAAG,iBAAiB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAA1B,EAAgC,YAAY,GAAA,OAA5C,CAA9B;AACA,QAAM,EAAE,GAAG,sBAAsB,CAAC,WAAD,EAAiB,YAAY,GAAA,KAA7B,CAAjC;AAEA,WAAO;AAAE,MAAA,IAAI,EAAA,IAAN;AAAQ,MAAA,EAAE,EAAA;AAAV,KAAP;AACD;;AACD,MAAM,0BAA0B,GAAG,iCAAiC,CAAC,cAAD,EAAiB,aAAjB,CAApE;AAEA,SAAO;AACL,IAAA,iBAAiB,EAAA,iBADZ;AAEL,IAAA,8BAA8B,EAAA,8BAFzB;AAGL,IAAA,0BAA0B,EAAA;AAHrB,GAAP;AAMD;;AAED,OAAM,SAAU,aAAV,CACJ,OADI,EAEJ,MAFI,EAGJ,eAHI,EAIJ,WAJI,EAIiB;AAGf,MAAA,EAAA,GAAA,qBAAA,CAAA,OAAA,CAAA;AAAA,MACJ,cAAA,GAAA,EAAA,CAAA,cADI;AAAA,MAEJ,mBAAA,GAAA,EAAA,CAAA,mBAFI;;AAKN,MAAM,aAAa,GAAmB,EAAtC;;AAEM,MAAA,EAAA,GAAA,iBAAA,CAAA,cAAA,EAAA,aAAA,CAAA;AAAA,MACJ,iBAAA,GAAA,EAAA,CAAA,iBADI;AAAA,MAEJ,8BAAA,GAAA,EAAA,CAAA,8BAFI;AAAA,MAGJ,0BAAA,GAAA,EAAA,CAAA,0BAHI;;AAMN,MAAI,MAAJ;;AAEA,MAAI,MAAM,CAAC,kBAAX,EAA+B;AACtB,QAAA,EAAA,GAAA,WAAA,CAAA,CAAA,CAAA;AAAA,QAAI,EAAA,GAAA,WAAA,CAAA,CAAA,CAAJ;AAAA,QAAQ,EAAA,GAAA,WAAA,CAAA,CAAA,CAAR;AAAA,QAAY,EAAA,GAAA,WAAA,CAAA,CAAA,CAAZ;AAAA,QAAgB,EAAA,GAAA,WAAA,CAAA,CAAA,CAAhB;AAAA,QAAoB,EAAA,GAAA,WAAA,CAAA,CAAA,CAApB;AAAA,QAAwB,EAAA,GAAA,WAAA,CAAA,CAAA,CAAxB;AAAA,QAA4B,EAAA,GAAA,WAAA,CAAA,CAAA,CAA5B;AAAA,QAAgC,EAAA,GAAA,WAAA,CAAA,CAAA,CAAhC;AAEP,QAAM,KAAK,GAAG,MAAM,CAAC,kBAAP,GACV,iBAAiB,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,OAAZ,CADP,GAEV,0BAA0B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAF9B;AAGA,QAAM,KAAK,GAAG,0BAA0B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAAxC;AACA,QAAM,KAAK,GAAG,0BAA0B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAAxC;AACA,QAAM,KAAK,GAAG,0BAA0B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAAxC;AACA,QAAM,KAAK,GAAG,0BAA0B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAAxC;AACA,QAAM,KAAK,GAAG,0BAA0B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAAxC;AACA,QAAM,KAAK,GAAG,EAAE,GAAG,0BAA0B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAA7B,GAAiD,SAAjE;AACA,QAAM,KAAK,GAAG,EAAE,GAAG,0BAA0B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAA7B,GAAiD,SAAjE;AACA,QAAM,KAAK,GAAG,iBAAiB,CAAC,EAAE,IAAI,EAAN,IAAY,EAAb,EAAiB,IAAI,eAArB,EAAsC,CAAtC,EAAyC,OAAzC,CAA/B;AACA,IAAA,MAAM,GAAG;AAAE,MAAA,KAAK,EAAA,KAAP;AAAS,MAAA,KAAK,EAAA,KAAd;AAAgB,MAAA,KAAK,EAAA,KAArB;AAAuB,MAAA,KAAK,EAAA,KAA5B;AAA8B,MAAA,KAAK,EAAA,KAAnC;AAAqC,MAAA,KAAK,EAAA,KAA1C;AAA4C,MAAA,KAAK,EAAA,KAAjD;AAAmD,MAAA,KAAK,EAAA,KAAxD;AAA0D,MAAA,KAAK,EAAA;AAA/D,KAAT;AACD,GAfD,MAeO;AACE,QAAA,EAAA,GAAA,WAAA,CAAA,CAAA,CAAA;AAAA,QAAI,EAAA,GAAA,WAAA,CAAA,CAAA,CAAJ;AAAA,QAAQ,EAAA,GAAA,WAAA,CAAA,CAAA,CAAR;AAAA,QAAY,EAAA,GAAA,WAAA,CAAA,CAAA,CAAZ;AAAA,QAAgB,EAAA,GAAA,WAAA,CAAA,CAAA,CAAhB;AAAA,QAAoB,EAAA,GAAA,WAAA,CAAA,CAAA,CAApB;AAAA,QAAwB,EAAA,GAAA,WAAA,CAAA,CAAA,CAAxB;AAAA,QAA4B,EAAA,GAAA,WAAA,CAAA,CAAA,CAA5B;AAAA,QAAgC,EAAA,GAAA,WAAA,CAAA,CAAA,CAAhC;AACP,QAAM,KAAK,GAAG,8BAA8B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAA5C;AACA,QAAM,KAAK,GAAG,8BAA8B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAA5C;AACA,QAAM,KAAK,GAAG,8BAA8B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAA5C;AACA,QAAM,KAAK,GAAG,8BAA8B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAA5C;AACA,QAAM,KAAK,GAAG,8BAA8B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAA5C;AACA,QAAM,KAAK,GAAG,8BAA8B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAA5C;AACA,QAAM,KAAK,GAAG,8BAA8B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAA5C;AACA,QAAM,KAAK,GAAG,8BAA8B,CAAC,EAAD,EAAK,EAAL,EAAS,OAAT,CAA5C;AACA,QAAM,KAAK,GAAG,iBAAiB,CAAC,EAAD,EAAK,IAAI,eAAT,EAA0B,CAA1B,EAA6B,OAA7B,CAA/B;AACA,IAAA,MAAM,GAAG;AAAE,MAAA,KAAK,EAAA,KAAP;AAAS,MAAA,KAAK,EAAA,KAAd;AAAgB,MAAA,KAAK,EAAA,KAArB;AAAuB,MAAA,KAAK,EAAA,KAA5B;AAA8B,MAAA,KAAK,EAAA,KAAnC;AAAqC,MAAA,KAAK,EAAA,KAA1C;AAA4C,MAAA,KAAK,EAAA,KAAjD;AAAmD,MAAA,KAAK,EAAA,KAAxD;AAA0D,MAAA,KAAK,EAAA;AAA/D,KAAT;AACD;;AAED,MAAI,mBAAmB,GAAG,MAAtB,KAAiC,CAArC,EAAwC;AACtC,UAAM,IAAI,KAAJ,CAAU,oCAAkC,mBAAmB,GAAG,MAAlE,CAAN;AACD;;AAGD,SAAO;AAAE,IAAA,MAAM,EAAA,MAAR;AAAU,IAAA,aAAa,EAAA;AAAvB,GAAP;AACD","sourceRoot":"","sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { extractConvParamsFactory } from '../common';\r\nimport { extractSeparableConvParamsFactory } from '../common/extractSeparableConvParamsFactory';\r\nimport { extractWeightsFactory } from '../common/extractWeightsFactory';\r\nfunction extractorsFactory(extractWeights, paramMappings) {\r\n    var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);\r\n    function extractBatchNormParams(size, mappedPrefix) {\r\n        var sub = tf.tensor1d(extractWeights(size));\r\n        var truediv = tf.tensor1d(extractWeights(size));\r\n        paramMappings.push({ paramPath: mappedPrefix + \"/sub\" }, { paramPath: mappedPrefix + \"/truediv\" });\r\n        return { sub: sub, truediv: truediv };\r\n    }\r\n    function extractConvWithBatchNormParams(channelsIn, channelsOut, mappedPrefix) {\r\n        var conv = extractConvParams(channelsIn, channelsOut, 3, mappedPrefix + \"/conv\");\r\n        var bn = extractBatchNormParams(channelsOut, mappedPrefix + \"/bn\");\r\n        return { conv: conv, bn: bn };\r\n    }\r\n    var extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings);\r\n    return {\r\n        extractConvParams: extractConvParams,\r\n        extractConvWithBatchNormParams: extractConvWithBatchNormParams,\r\n        extractSeparableConvParams: extractSeparableConvParams\r\n    };\r\n}\r\nexport function extractParams(weights, config, boxEncodingSize, filterSizes) {\r\n    var _a = extractWeightsFactory(weights), extractWeights = _a.extractWeights, getRemainingWeights = _a.getRemainingWeights;\r\n    var paramMappings = [];\r\n    var _b = extractorsFactory(extractWeights, paramMappings), extractConvParams = _b.extractConvParams, extractConvWithBatchNormParams = _b.extractConvWithBatchNormParams, extractSeparableConvParams = _b.extractSeparableConvParams;\r\n    var params;\r\n    if (config.withSeparableConvs) {\r\n        var s0 = filterSizes[0], s1 = filterSizes[1], s2 = filterSizes[2], s3 = filterSizes[3], s4 = filterSizes[4], s5 = filterSizes[5], s6 = filterSizes[6], s7 = filterSizes[7], s8 = filterSizes[8];\r\n        var conv0 = config.isFirstLayerConv2d\r\n            ? extractConvParams(s0, s1, 3, 'conv0')\r\n            : extractSeparableConvParams(s0, s1, 'conv0');\r\n        var conv1 = extractSeparableConvParams(s1, s2, 'conv1');\r\n        var conv2 = extractSeparableConvParams(s2, s3, 'conv2');\r\n        var conv3 = extractSeparableConvParams(s3, s4, 'conv3');\r\n        var conv4 = extractSeparableConvParams(s4, s5, 'conv4');\r\n        var conv5 = extractSeparableConvParams(s5, s6, 'conv5');\r\n        var conv6 = s7 ? extractSeparableConvParams(s6, s7, 'conv6') : undefined;\r\n        var conv7 = s8 ? extractSeparableConvParams(s7, s8, 'conv7') : undefined;\r\n        var conv8 = extractConvParams(s8 || s7 || s6, 5 * boxEncodingSize, 1, 'conv8');\r\n        params = { conv0: conv0, conv1: conv1, conv2: conv2, conv3: conv3, conv4: conv4, conv5: conv5, conv6: conv6, conv7: conv7, conv8: conv8 };\r\n    }\r\n    else {\r\n        var s0 = filterSizes[0], s1 = filterSizes[1], s2 = filterSizes[2], s3 = filterSizes[3], s4 = filterSizes[4], s5 = filterSizes[5], s6 = filterSizes[6], s7 = filterSizes[7], s8 = filterSizes[8];\r\n        var conv0 = extractConvWithBatchNormParams(s0, s1, 'conv0');\r\n        var conv1 = extractConvWithBatchNormParams(s1, s2, 'conv1');\r\n        var conv2 = extractConvWithBatchNormParams(s2, s3, 'conv2');\r\n        var conv3 = extractConvWithBatchNormParams(s3, s4, 'conv3');\r\n        var conv4 = extractConvWithBatchNormParams(s4, s5, 'conv4');\r\n        var conv5 = extractConvWithBatchNormParams(s5, s6, 'conv5');\r\n        var conv6 = extractConvWithBatchNormParams(s6, s7, 'conv6');\r\n        var conv7 = extractConvWithBatchNormParams(s7, s8, 'conv7');\r\n        var conv8 = extractConvParams(s8, 5 * boxEncodingSize, 1, 'conv8');\r\n        params = { conv0: conv0, conv1: conv1, conv2: conv2, conv3: conv3, conv4: conv4, conv5: conv5, conv6: conv6, conv7: conv7, conv8: conv8 };\r\n    }\r\n    if (getRemainingWeights().length !== 0) {\r\n        throw new Error(\"weights remaing after extract: \" + getRemainingWeights().length);\r\n    }\r\n    return { params: params, paramMappings: paramMappings };\r\n}\r\n//# sourceMappingURL=extractParams.js.map"]},"metadata":{},"sourceType":"module"}