{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function batchNorm(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x,\n      scale = inputs.scale,\n      offset = inputs.offset,\n      mean = inputs.mean,\n      variance = inputs.variance;\n  util.assert(mean.shape.length === variance.shape.length, function () {\n    return 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.';\n  });\n  util.assert(offset == null || mean.shape.length === offset.shape.length, function () {\n    return 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.';\n  });\n  util.assert(scale == null || mean.shape.length === scale.shape.length, function () {\n    return 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.';\n  });\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n  var varianceEpsilon = attrs.varianceEpsilon;\n\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  var xVals = backend.data.get(x.dataId).values;\n  var mVals = backend.data.get(mean.dataId).values;\n  var varVals = backend.data.get(variance.dataId).values;\n  var sVals = scale ? backend.data.get(scale.dataId).values : new Float32Array([1]);\n  var offVals = offset ? backend.data.get(offset.dataId).values : new Float32Array([0]);\n  var outVals = new Float32Array(xVals.length);\n  var offValsLength = offVals.length;\n  var sValsLength = sVals.length;\n  var varValsLength = varVals.length;\n  var mValsLength = mVals.length;\n  var offi = 0;\n  var mi = 0;\n  var si = 0;\n  var vi = 0;\n\n  for (var i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] + (xVals[i] - mVals[mi++]) * sVals[si++] / Math.sqrt(varVals[vi++] + varianceEpsilon);\n\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n\n    if (si >= sValsLength) {\n      si = 0;\n    }\n\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\nexport var batchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm\n};","map":null,"metadata":{},"sourceType":"module"}