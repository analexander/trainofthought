{"ast":null,"code":"import _regeneratorRuntime from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n\nvar useUserMedia = function useUserMedia(requestedMedia) {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      mediaStream = _useState2[0],\n      setMediaStream = _useState2[1];\n\n  useEffect(function () {\n    var enableStream = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var stream;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return navigator.mediaDevices.getUserMedia(requestedMedia);\n\n              case 3:\n                stream = _context.sent;\n                setMediaStream(stream);\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                alert(\"Could not connect to camera: \" + _context.t0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n\n      return function enableStream() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    if (!mediaStream) {\n      enableStream();\n    } else {\n      return function () {\n        mediaStream.getTracks().forEach(function (track) {\n          return track.stop();\n        });\n      };\n    }\n  }, [mediaStream, requestedMedia]);\n  return mediaStream;\n};\n\nexport default useUserMedia;","map":{"version":3,"sources":["/Users/angeldiscopanda/Trilogy-2020/Projects/trainofthought/client/src/hooks/UseUserMedia/UseUserMedia.js"],"names":["useState","useEffect","useUserMedia","requestedMedia","mediaStream","setMediaStream","enableStream","navigator","mediaDevices","getUserMedia","stream","alert","getTracks","forEach","track","stop"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,IAAOC,YAAY,GAAG,SAAfA,YAAe,CAACC,cAAD,EAAoB;AAAA,kBACAH,QAAQ,EADR;AAAA;AAAA,MAC/BI,WAD+B;AAAA,MAClBC,cADkB;;AAGtCJ,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMK,YAAY;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEQC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCN,cAApC,CAFR;;AAAA;AAEPO,gBAAAA,MAFO;AAGbL,gBAAAA,cAAc,CAACK,MAAD,CAAd;AAHa;AAAA;;AAAA;AAAA;AAAA;AAKbC,gBAAAA,KAAK,CAAC,6CAAD,CAAL;;AALa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAZL,YAAY;AAAA;AAAA;AAAA,OAAlB;;AASA,QAAI,CAACF,WAAL,EAAkB;AACdE,MAAAA,YAAY;AACf,KAFD,MAEO;AACH,aAAO,YAAM;AACTF,QAAAA,WAAW,CAACQ,SAAZ,GAAwBC,OAAxB,CAAgC,UAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACC,IAAN,EAAJ;AAAA,SAArC;AACH,OAFD;AAGH;AACJ,GAjBQ,EAiBN,CAACX,WAAD,EAAcD,cAAd,CAjBM,CAAT;AAmBA,SAAOC,WAAP;AACH,CAvBD;;AAyBA,eAAeF,YAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst  useUserMedia = (requestedMedia) => {\n    const [mediaStream, setMediaStream] = useState();\n\n    useEffect(() => {\n        const enableStream = async () => {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia(requestedMedia);\n                setMediaStream(stream);\n            } catch (error) {\n                alert(\"Could not connect to camera: \" + error);\n            }\n        };\n\n        if (!mediaStream) {\n            enableStream();\n        } else {\n            return () => {\n                mediaStream.getTracks().forEach(track => track.stop());\n            };\n        }\n    }, [mediaStream, requestedMedia]);\n\n    return mediaStream;\n};\n\nexport default useUserMedia;"]},"metadata":{},"sourceType":"module"}