{"ast":null,"code":"\"use strict\";\n\nmodule.exports = exports;\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar win = process.platform == 'win32';\nvar existsSync = fs.existsSync || path.existsSync;\n\nvar cp = require('child_process'); // try to build up the complete path to node-gyp\n\n/* priority:\n  - node-gyp on ENV:npm_config_node_gyp (https://github.com/npm/npm/pull/4887)\n  - node-gyp on NODE_PATH\n  - node-gyp inside npm on NODE_PATH (ignore on iojs)\n  - node-gyp inside npm beside node exe\n*/\n\n\nfunction which_node_gyp() {\n  var node_gyp_bin;\n\n  if (process.env.npm_config_node_gyp) {\n    try {\n      node_gyp_bin = process.env.npm_config_node_gyp;\n\n      if (existsSync(node_gyp_bin)) {\n        return node_gyp_bin;\n      }\n    } catch (err) {}\n  }\n\n  try {\n    var node_gyp_main = require.resolve('node-gyp');\n\n    node_gyp_bin = path.join(path.dirname(path.dirname(node_gyp_main)), 'bin/node-gyp.js');\n\n    if (existsSync(node_gyp_bin)) {\n      return node_gyp_bin;\n    }\n  } catch (err) {}\n\n  if (process.execPath.indexOf('iojs') === -1) {\n    try {\n      var npm_main = require.resolve('npm');\n\n      node_gyp_bin = path.join(path.dirname(path.dirname(npm_main)), 'node_modules/node-gyp/bin/node-gyp.js');\n\n      if (existsSync(node_gyp_bin)) {\n        return node_gyp_bin;\n      }\n    } catch (err) {}\n  }\n\n  var npm_base = path.join(path.dirname(path.dirname(process.execPath)), 'lib/node_modules/npm/');\n  node_gyp_bin = path.join(npm_base, 'node_modules/node-gyp/bin/node-gyp.js');\n\n  if (existsSync(node_gyp_bin)) {\n    return node_gyp_bin;\n  }\n}\n\nmodule.exports.run_gyp = function (args, opts, callback) {\n  var shell_cmd = '';\n  var cmd_args = [];\n\n  if (opts.runtime && opts.runtime == 'node-webkit') {\n    shell_cmd = 'nw-gyp';\n    if (win) shell_cmd += '.cmd';\n  } else {\n    var node_gyp_path = which_node_gyp();\n\n    if (node_gyp_path) {\n      shell_cmd = process.execPath;\n      cmd_args.push(node_gyp_path);\n    } else {\n      shell_cmd = 'node-gyp';\n      if (win) shell_cmd += '.cmd';\n    }\n  }\n\n  var final_args = cmd_args.concat(args);\n  var cmd = cp.spawn(shell_cmd, final_args, {\n    cwd: undefined,\n    env: process.env,\n    stdio: [0, 1, 2]\n  });\n  cmd.on('error', function (err) {\n    if (err) {\n      return callback(new Error(\"Failed to execute '\" + shell_cmd + ' ' + final_args.join(' ') + \"' (\" + err + \")\"));\n    }\n\n    callback(null, opts);\n  });\n  cmd.on('close', function (code) {\n    if (code && code !== 0) {\n      return callback(new Error(\"Failed to execute '\" + shell_cmd + ' ' + final_args.join(' ') + \"' (\" + code + \")\"));\n    }\n\n    callback(null, opts);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}